
usb-f407.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007c40  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08007dc8  08007dc8  00008dc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007e10  08007e10  0000916c  2**0
                  CONTENTS
  4 .ARM          00000008  08007e10  08007e10  00008e10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007e18  08007e18  0000916c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007e18  08007e18  00008e18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007e1c  08007e1c  00008e1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000016c  20000000  08007e20  00009000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000916c  2**0
                  CONTENTS
 10 .bss          00001d8c  2000016c  2000016c  0000916c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001ef8  20001ef8  0000916c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000916c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001012f  00000000  00000000  0000919c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003b00  00000000  00000000  000192cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e68  00000000  00000000  0001cdd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a88  00000000  00000000  0001dc38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002412b  00000000  00000000  0001e6c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013e14  00000000  00000000  000427eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c61d1  00000000  00000000  000565ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0011c7d0  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003aa4  00000000  00000000  0011c814  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005f  00000000  00000000  001202b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000016c 	.word	0x2000016c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007db0 	.word	0x08007db0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000170 	.word	0x20000170
 80001c4:	08007db0 	.word	0x08007db0

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <CRC_CalculateCRC16>:
    return retVal;
}


uint16_t CRC_CalculateCRC16(const uint8_t *Buffer, uint16_t Length)
{
 80004b8:	b480      	push	{r7}
 80004ba:	b085      	sub	sp, #20
 80004bc:	af00      	add	r7, sp, #0
 80004be:	6078      	str	r0, [r7, #4]
 80004c0:	460b      	mov	r3, r1
 80004c2:	807b      	strh	r3, [r7, #2]
    uint16_t retVal = 0u;
 80004c4:	2300      	movs	r3, #0
 80004c6:	81fb      	strh	r3, [r7, #14]
    uint16_t byteIndex = 0u;
 80004c8:	2300      	movs	r3, #0
 80004ca:	81bb      	strh	r3, [r7, #12]

    if (Buffer != NULL)
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	2b00      	cmp	r3, #0
 80004d0:	d032      	beq.n	8000538 <CRC_CalculateCRC16+0x80>
    {
#if (CRC_16_MODE == RUNTTIME)
        retVal = CRC_16_INIT_VALUE;
 80004d2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80004d6:	81fb      	strh	r3, [r7, #14]

        /* Do calculation procedure for each byte */
        for (byteIndex = 0u; byteIndex < Length; byteIndex++)
 80004d8:	2300      	movs	r3, #0
 80004da:	81bb      	strh	r3, [r7, #12]
 80004dc:	e028      	b.n	8000530 <CRC_CalculateCRC16+0x78>
        {
            /* XOR new byte with temp result */
            retVal ^= (Buffer[byteIndex] << (CRC_16_RESULT_WIDTH - 8u));
 80004de:	89bb      	ldrh	r3, [r7, #12]
 80004e0:	687a      	ldr	r2, [r7, #4]
 80004e2:	4413      	add	r3, r2
 80004e4:	781b      	ldrb	r3, [r3, #0]
 80004e6:	021b      	lsls	r3, r3, #8
 80004e8:	b21a      	sxth	r2, r3
 80004ea:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80004ee:	4053      	eors	r3, r2
 80004f0:	b21b      	sxth	r3, r3
 80004f2:	81fb      	strh	r3, [r7, #14]

            uint8_t bitIndex = 0u;
 80004f4:	2300      	movs	r3, #0
 80004f6:	72fb      	strb	r3, [r7, #11]
            /* Do calculation for current data */
            for (bitIndex = 0u; bitIndex < 8u; bitIndex++)
 80004f8:	2300      	movs	r3, #0
 80004fa:	72fb      	strb	r3, [r7, #11]
 80004fc:	e012      	b.n	8000524 <CRC_CalculateCRC16+0x6c>
            {
                if (retVal & (1u << (CRC_16_RESULT_WIDTH - 1u)))
 80004fe:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000502:	2b00      	cmp	r3, #0
 8000504:	da08      	bge.n	8000518 <CRC_CalculateCRC16+0x60>
                {
                    retVal = (retVal << 1u) ^ CRC_16_POLYNOMIAL;
 8000506:	89fb      	ldrh	r3, [r7, #14]
 8000508:	005b      	lsls	r3, r3, #1
 800050a:	b29b      	uxth	r3, r3
 800050c:	f483 5381 	eor.w	r3, r3, #4128	@ 0x1020
 8000510:	f083 0301 	eor.w	r3, r3, #1
 8000514:	81fb      	strh	r3, [r7, #14]
 8000516:	e002      	b.n	800051e <CRC_CalculateCRC16+0x66>
                }
                else
                {
                    retVal = (retVal << 1u);
 8000518:	89fb      	ldrh	r3, [r7, #14]
 800051a:	005b      	lsls	r3, r3, #1
 800051c:	81fb      	strh	r3, [r7, #14]
            for (bitIndex = 0u; bitIndex < 8u; bitIndex++)
 800051e:	7afb      	ldrb	r3, [r7, #11]
 8000520:	3301      	adds	r3, #1
 8000522:	72fb      	strb	r3, [r7, #11]
 8000524:	7afb      	ldrb	r3, [r7, #11]
 8000526:	2b07      	cmp	r3, #7
 8000528:	d9e9      	bls.n	80004fe <CRC_CalculateCRC16+0x46>
        for (byteIndex = 0u; byteIndex < Length; byteIndex++)
 800052a:	89bb      	ldrh	r3, [r7, #12]
 800052c:	3301      	adds	r3, #1
 800052e:	81bb      	strh	r3, [r7, #12]
 8000530:	89ba      	ldrh	r2, [r7, #12]
 8000532:	887b      	ldrh	r3, [r7, #2]
 8000534:	429a      	cmp	r2, r3
 8000536:	d3d2      	bcc.n	80004de <CRC_CalculateCRC16+0x26>
        retVal = 0x0000u;

#endif
    }

    return retVal;
 8000538:	89fb      	ldrh	r3, [r7, #14]
}
 800053a:	4618      	mov	r0, r3
 800053c:	3714      	adds	r7, #20
 800053e:	46bd      	mov	sp, r7
 8000540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000544:	4770      	bx	lr
	...

08000548 <start_boot_checking>:
}
*/
#include "bootloader.h"
#include <string.h>

void start_boot_checking(struct boot_button *button) {
 8000548:	b580      	push	{r7, lr}
 800054a:	b082      	sub	sp, #8
 800054c:	af00      	add	r7, sp, #0
 800054e:	6078      	str	r0, [r7, #4]
	if (HAL_GPIO_ReadPin(button->port, button->pin) == BOOTLOADER_MODE) {
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	681a      	ldr	r2, [r3, #0]
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	889b      	ldrh	r3, [r3, #4]
 8000558:	4619      	mov	r1, r3
 800055a:	4610      	mov	r0, r2
 800055c:	f001 fb00 	bl	8001b60 <HAL_GPIO_ReadPin>
 8000560:	4603      	mov	r3, r0
 8000562:	2b00      	cmp	r3, #0
 8000564:	d002      	beq.n	800056c <start_boot_checking+0x24>
		//do nothing
	} else {
		goto_application(PROGRAM_ADDRESS);
 8000566:	4803      	ldr	r0, [pc, #12]	@ (8000574 <start_boot_checking+0x2c>)
 8000568:	f000 f806 	bl	8000578 <goto_application>
	}
}
 800056c:	bf00      	nop
 800056e:	3708      	adds	r7, #8
 8000570:	46bd      	mov	sp, r7
 8000572:	bd80      	pop	{r7, pc}
 8000574:	08020000 	.word	0x08020000

08000578 <goto_application>:

/* Run application */
void __attribute__((noreturn)) goto_application(u32 p_addr) {
 8000578:	b580      	push	{r7, lr}
 800057a:	b084      	sub	sp, #16
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
	/* Turn off Peripheral, Clear Interrupt Flag*/
	HAL_RCC_DeInit();
 8000580:	f003 f9e2 	bl	8003948 <HAL_RCC_DeInit>
	/* Clear Pending Interrupt Request, turn off System Tick*/
	HAL_DeInit();
 8000584:	f000 fcd0 	bl	8000f28 <HAL_DeInit>
	/* Turn off fault harder*/
	SCB->SHCSR &= ~(SCB_SHCSR_USGFAULTENA_Msk |
 8000588:	4b0b      	ldr	r3, [pc, #44]	@ (80005b8 <goto_application+0x40>)
 800058a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800058c:	4a0a      	ldr	r2, [pc, #40]	@ (80005b8 <goto_application+0x40>)
 800058e:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8000592:	6253      	str	r3, [r2, #36]	@ 0x24
			SCB_SHCSR_BUSFAULTENA_Msk |
			SCB_SHCSR_MEMFAULTENA_Msk);
	/* Set Vector Table */
	SCB->VTOR = p_addr;
 8000594:	4a08      	ldr	r2, [pc, #32]	@ (80005b8 <goto_application+0x40>)
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	6093      	str	r3, [r2, #8]

	__set_MSP(*((volatile u32 *) p_addr));
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	60bb      	str	r3, [r7, #8]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 80005a0:	68bb      	ldr	r3, [r7, #8]
 80005a2:	f383 8808 	msr	MSP, r3
}
 80005a6:	bf00      	nop
	void (*reset_handler)(void) = (void *)(*((volatile u32 *) (p_addr + 4U)));
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	3304      	adds	r3, #4
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	60fb      	str	r3, [r7, #12]
	reset_handler();
 80005b0:	68fb      	ldr	r3, [r7, #12]
 80005b2:	4798      	blx	r3
	for(;;) {
		__NOP();
 80005b4:	bf00      	nop
 80005b6:	e7fd      	b.n	80005b4 <goto_application+0x3c>
 80005b8:	e000ed00 	.word	0xe000ed00

080005bc <hex_line_handler>:
	}
}

/* Handle HEX Frame */
err_t hex_line_handler(const u8 *hex_line, u32 length) {
 80005bc:	b580      	push	{r7, lr}
 80005be:	b086      	sub	sp, #24
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
 80005c4:	6039      	str	r1, [r7, #0]
	u8 type, checksum;
	static addr_t flash;
	type = hex_line[INDEX_TYPE];
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	3303      	adds	r3, #3
 80005ca:	781b      	ldrb	r3, [r3, #0]
 80005cc:	73fb      	strb	r3, [r7, #15]
	checksum = 0x00;
 80005ce:	2300      	movs	r3, #0
 80005d0:	75fb      	strb	r3, [r7, #23]
	for (int i = 0; i < length; i++) {
 80005d2:	2300      	movs	r3, #0
 80005d4:	613b      	str	r3, [r7, #16]
 80005d6:	e009      	b.n	80005ec <hex_line_handler+0x30>
		checksum += hex_line[i];
 80005d8:	693b      	ldr	r3, [r7, #16]
 80005da:	687a      	ldr	r2, [r7, #4]
 80005dc:	4413      	add	r3, r2
 80005de:	781a      	ldrb	r2, [r3, #0]
 80005e0:	7dfb      	ldrb	r3, [r7, #23]
 80005e2:	4413      	add	r3, r2
 80005e4:	75fb      	strb	r3, [r7, #23]
	for (int i = 0; i < length; i++) {
 80005e6:	693b      	ldr	r3, [r7, #16]
 80005e8:	3301      	adds	r3, #1
 80005ea:	613b      	str	r3, [r7, #16]
 80005ec:	693b      	ldr	r3, [r7, #16]
 80005ee:	683a      	ldr	r2, [r7, #0]
 80005f0:	429a      	cmp	r2, r3
 80005f2:	d8f1      	bhi.n	80005d8 <hex_line_handler+0x1c>
	}
	if (checksum) {
 80005f4:	7dfb      	ldrb	r3, [r7, #23]
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d001      	beq.n	80005fe <hex_line_handler+0x42>
		return HEX_CS_FAILED;
 80005fa:	2301      	movs	r3, #1
 80005fc:	e039      	b.n	8000672 <hex_line_handler+0xb6>
	}
	switch (type) {
 80005fe:	7bfb      	ldrb	r3, [r7, #15]
 8000600:	2b05      	cmp	r3, #5
 8000602:	d832      	bhi.n	800066a <hex_line_handler+0xae>
 8000604:	a201      	add	r2, pc, #4	@ (adr r2, 800060c <hex_line_handler+0x50>)
 8000606:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800060a:	bf00      	nop
 800060c:	08000625 	.word	0x08000625
 8000610:	0800066f 	.word	0x0800066f
 8000614:	0800066f 	.word	0x0800066f
 8000618:	0800066f 	.word	0x0800066f
 800061c:	08000651 	.word	0x08000651
 8000620:	0800066f 	.word	0x0800066f
		case DATA_RECORD:
			flash.addr.offset = (u16)(hex_line[INDEX_ADDR] << 8) | (u16)hex_line[INDEX_ADDR + 1];
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	3301      	adds	r3, #1
 8000628:	781b      	ldrb	r3, [r3, #0]
 800062a:	021b      	lsls	r3, r3, #8
 800062c:	b29b      	uxth	r3, r3
 800062e:	687a      	ldr	r2, [r7, #4]
 8000630:	3202      	adds	r2, #2
 8000632:	7812      	ldrb	r2, [r2, #0]
 8000634:	4313      	orrs	r3, r2
 8000636:	b29a      	uxth	r2, r3
 8000638:	4b10      	ldr	r3, [pc, #64]	@ (800067c <hex_line_handler+0xc0>)
 800063a:	801a      	strh	r2, [r3, #0]
			if (flash_write(flash.address, &hex_line[INDEX_DATA], hex_line[INDEX_LEN]) < 0) {
 800063c:	4b0f      	ldr	r3, [pc, #60]	@ (800067c <hex_line_handler+0xc0>)
 800063e:	6818      	ldr	r0, [r3, #0]
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	1d19      	adds	r1, r3, #4
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	781b      	ldrb	r3, [r3, #0]
 8000648:	461a      	mov	r2, r3
 800064a:	f000 f840 	bl	80006ce <flash_write>
				return HEX_WR_FAILED;
			}
			break;
 800064e:	e00f      	b.n	8000670 <hex_line_handler+0xb4>
		case EXTENDED_SEG_ADDR:
			break;
		case START_SEG_ADDR:
			break;
		case EXTENDED_LINEAR_ADDR:
			flash.addr.base = (u16)(hex_line[INDEX_DATA] << 8) | (u16)hex_line[INDEX_DATA + 1];
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	3304      	adds	r3, #4
 8000654:	781b      	ldrb	r3, [r3, #0]
 8000656:	021b      	lsls	r3, r3, #8
 8000658:	b29b      	uxth	r3, r3
 800065a:	687a      	ldr	r2, [r7, #4]
 800065c:	3205      	adds	r2, #5
 800065e:	7812      	ldrb	r2, [r2, #0]
 8000660:	4313      	orrs	r3, r2
 8000662:	b29a      	uxth	r2, r3
 8000664:	4b05      	ldr	r3, [pc, #20]	@ (800067c <hex_line_handler+0xc0>)
 8000666:	805a      	strh	r2, [r3, #2]
			break;
 8000668:	e002      	b.n	8000670 <hex_line_handler+0xb4>
		case START_LINEAR_ADDR:
			break;
		default:
			return HEX_INVALID;
 800066a:	2303      	movs	r3, #3
 800066c:	e001      	b.n	8000672 <hex_line_handler+0xb6>
			break;
 800066e:	bf00      	nop
	}
	return HEX_SUCCESS;
 8000670:	2300      	movs	r3, #0
}
 8000672:	4618      	mov	r0, r3
 8000674:	3718      	adds	r7, #24
 8000676:	46bd      	mov	sp, r7
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	20000188 	.word	0x20000188

08000680 <flash_erase>:
 *  Created on: Sep 26, 2024
 *      Author: dinhnamuet
 */
#include "flash.h"

HAL_StatusTypeDef flash_erase(u32 base_sector, u32 num_sector) {
 8000680:	b580      	push	{r7, lr}
 8000682:	b08a      	sub	sp, #40	@ 0x28
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
 8000688:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef res = HAL_ERROR;
 800068a:	2301      	movs	r3, #1
 800068c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	FLASH_EraseInitTypeDef erase;
	u32 page_err;

	erase.Banks			= FLASH_BANK_1;
 8000690:	2301      	movs	r3, #1
 8000692:	617b      	str	r3, [r7, #20]
	erase.Sector		= base_sector;
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	61bb      	str	r3, [r7, #24]
	erase.NbSectors		= num_sector;
 8000698:	683b      	ldr	r3, [r7, #0]
 800069a:	61fb      	str	r3, [r7, #28]
	erase.TypeErase 	= FLASH_TYPEERASE_SECTORS;
 800069c:	2300      	movs	r3, #0
 800069e:	613b      	str	r3, [r7, #16]
	erase.VoltageRange	= FLASH_VOLTAGE_RANGE_3;
 80006a0:	2302      	movs	r3, #2
 80006a2:	623b      	str	r3, [r7, #32]

	HAL_FLASH_Unlock();
 80006a4:	f000 fe3c 	bl	8001320 <HAL_FLASH_Unlock>
	res = HAL_FLASHEx_Erase(&erase, &page_err);
 80006a8:	f107 020c 	add.w	r2, r7, #12
 80006ac:	f107 0310 	add.w	r3, r7, #16
 80006b0:	4611      	mov	r1, r2
 80006b2:	4618      	mov	r0, r3
 80006b4:	f000 ff96 	bl	80015e4 <HAL_FLASHEx_Erase>
 80006b8:	4603      	mov	r3, r0
 80006ba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	HAL_FLASH_Lock();
 80006be:	f000 fe51 	bl	8001364 <HAL_FLASH_Lock>
	return res;
 80006c2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80006c6:	4618      	mov	r0, r3
 80006c8:	3728      	adds	r7, #40	@ 0x28
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}

080006ce <flash_write>:
HAL_StatusTypeDef flash_write(u32 address, const u8 *data, u32 len) {
 80006ce:	b5b0      	push	{r4, r5, r7, lr}
 80006d0:	b086      	sub	sp, #24
 80006d2:	af00      	add	r7, sp, #0
 80006d4:	60f8      	str	r0, [r7, #12]
 80006d6:	60b9      	str	r1, [r7, #8]
 80006d8:	607a      	str	r2, [r7, #4]
    HAL_StatusTypeDef res;
    HAL_FLASH_Unlock();
 80006da:	f000 fe21 	bl	8001320 <HAL_FLASH_Unlock>
    for (int i = 0; i < len; i++) {
 80006de:	2300      	movs	r3, #0
 80006e0:	613b      	str	r3, [r7, #16]
 80006e2:	e014      	b.n	800070e <flash_write+0x40>
    	res = HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, address + i, data[i]);
 80006e4:	693a      	ldr	r2, [r7, #16]
 80006e6:	68fb      	ldr	r3, [r7, #12]
 80006e8:	18d1      	adds	r1, r2, r3
 80006ea:	693b      	ldr	r3, [r7, #16]
 80006ec:	68ba      	ldr	r2, [r7, #8]
 80006ee:	4413      	add	r3, r2
 80006f0:	781b      	ldrb	r3, [r3, #0]
 80006f2:	b2db      	uxtb	r3, r3
 80006f4:	2200      	movs	r2, #0
 80006f6:	461c      	mov	r4, r3
 80006f8:	4615      	mov	r5, r2
 80006fa:	4622      	mov	r2, r4
 80006fc:	462b      	mov	r3, r5
 80006fe:	2000      	movs	r0, #0
 8000700:	f000 fdba 	bl	8001278 <HAL_FLASH_Program>
 8000704:	4603      	mov	r3, r0
 8000706:	75fb      	strb	r3, [r7, #23]
    for (int i = 0; i < len; i++) {
 8000708:	693b      	ldr	r3, [r7, #16]
 800070a:	3301      	adds	r3, #1
 800070c:	613b      	str	r3, [r7, #16]
 800070e:	693b      	ldr	r3, [r7, #16]
 8000710:	687a      	ldr	r2, [r7, #4]
 8000712:	429a      	cmp	r2, r3
 8000714:	d8e6      	bhi.n	80006e4 <flash_write+0x16>
    	if (res < 0) {
    		goto exit;
    	}
    }
exit:
 8000716:	bf00      	nop
    HAL_FLASH_Lock();
 8000718:	f000 fe24 	bl	8001364 <HAL_FLASH_Lock>
    return res;
 800071c:	7dfb      	ldrb	r3, [r7, #23]
}
 800071e:	4618      	mov	r0, r3
 8000720:	3718      	adds	r7, #24
 8000722:	46bd      	mov	sp, r7
 8000724:	bdb0      	pop	{r4, r5, r7, pc}

08000726 <led_ctrl>:
 *      Author: dinhnamuet
 */

#include "led_bootloader.h"

void led_ctrl(struct led *led) {
 8000726:	b580      	push	{r7, lr}
 8000728:	b082      	sub	sp, #8
 800072a:	af00      	add	r7, sp, #0
 800072c:	6078      	str	r0, [r7, #4]
	if (led->counter >= led->blynk_period_ms) {
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800073a:	4290      	cmp	r0, r2
 800073c:	eb71 0303 	sbcs.w	r3, r1, r3
 8000740:	d310      	bcc.n	8000764 <led_ctrl+0x3e>
		led->port->ODR ^= led->pin;
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	695a      	ldr	r2, [r3, #20]
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	889b      	ldrh	r3, [r3, #4]
 800074c:	4619      	mov	r1, r3
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	404a      	eors	r2, r1
 8000754:	615a      	str	r2, [r3, #20]
		led_set_counter(led, 0);
 8000756:	f04f 0200 	mov.w	r2, #0
 800075a:	f04f 0300 	mov.w	r3, #0
 800075e:	6878      	ldr	r0, [r7, #4]
 8000760:	f000 f816 	bl	8000790 <led_set_counter>
	}
}
 8000764:	bf00      	nop
 8000766:	3708      	adds	r7, #8
 8000768:	46bd      	mov	sp, r7
 800076a:	bd80      	pop	{r7, pc}

0800076c <led_increase_counter>:
void led_increase_counter(struct led *led) {
 800076c:	b4b0      	push	{r4, r5, r7}
 800076e:	b083      	sub	sp, #12
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
	led->counter ++;
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800077a:	1c54      	adds	r4, r2, #1
 800077c:	f143 0500 	adc.w	r5, r3, #0
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	e9c3 4502 	strd	r4, r5, [r3, #8]
}
 8000786:	bf00      	nop
 8000788:	370c      	adds	r7, #12
 800078a:	46bd      	mov	sp, r7
 800078c:	bcb0      	pop	{r4, r5, r7}
 800078e:	4770      	bx	lr

08000790 <led_set_counter>:
void led_set_counter(struct led *led, u64 value) {
 8000790:	b480      	push	{r7}
 8000792:	b085      	sub	sp, #20
 8000794:	af00      	add	r7, sp, #0
 8000796:	60f8      	str	r0, [r7, #12]
 8000798:	e9c7 2300 	strd	r2, r3, [r7]
	led->counter = value;
 800079c:	68f9      	ldr	r1, [r7, #12]
 800079e:	e9d7 2300 	ldrd	r2, r3, [r7]
 80007a2:	e9c1 2302 	strd	r2, r3, [r1, #8]
}
 80007a6:	bf00      	nop
 80007a8:	3714      	adds	r7, #20
 80007aa:	46bd      	mov	sp, r7
 80007ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b0:	4770      	bx	lr
	...

080007b4 <HAL_IncTick>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_IncTick(void) {
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
	uwTick += uwTickFreq;
 80007b8:	4b06      	ldr	r3, [pc, #24]	@ (80007d4 <HAL_IncTick+0x20>)
 80007ba:	781b      	ldrb	r3, [r3, #0]
 80007bc:	461a      	mov	r2, r3
 80007be:	4b06      	ldr	r3, [pc, #24]	@ (80007d8 <HAL_IncTick+0x24>)
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	4413      	add	r3, r2
 80007c4:	4a04      	ldr	r2, [pc, #16]	@ (80007d8 <HAL_IncTick+0x24>)
 80007c6:	6013      	str	r3, [r2, #0]
	led_increase_counter(&boot_indicator);
 80007c8:	4804      	ldr	r0, [pc, #16]	@ (80007dc <HAL_IncTick+0x28>)
 80007ca:	f7ff ffcf 	bl	800076c <led_increase_counter>
}
 80007ce:	bf00      	nop
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	20000028 	.word	0x20000028
 80007d8:	200001a8 	.word	0x200001a8
 80007dc:	20000000 	.word	0x20000000

080007e0 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80007e4:	f000 fb7e 	bl	8000ee4 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80007e8:	f000 f82a 	bl	8000840 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80007ec:	f000 f892 	bl	8000914 <MX_GPIO_Init>
	MX_USB_DEVICE_Init();
 80007f0:	f006 fc92 	bl	8007118 <MX_USB_DEVICE_Init>
	/* USER CODE BEGIN 2 */
#if defined(BOOT_OPER)
	/* Hardware Boot Option */
	start_boot_checking(&button);
 80007f4:	480f      	ldr	r0, [pc, #60]	@ (8000834 <main+0x54>)
 80007f6:	f7ff fea7 	bl	8000548 <start_boot_checking>
#endif
	/* USB Queue Initialization */
	if (init_queue(&usb_queue, 10) < 0) {
 80007fa:	210a      	movs	r1, #10
 80007fc:	480e      	ldr	r0, [pc, #56]	@ (8000838 <main+0x58>)
 80007fe:	f000 fa50 	bl	8000ca2 <init_queue>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	da02      	bge.n	800080e <main+0x2e>
		return -1;
 8000808:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800080c:	e010      	b.n	8000830 <main+0x50>
	while (1)
	{
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		if (!queue_is_empty(&usb_queue)) {
 800080e:	480a      	ldr	r0, [pc, #40]	@ (8000838 <main+0x58>)
 8000810:	f000 f99e 	bl	8000b50 <queue_is_empty>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d106      	bne.n	8000828 <main+0x48>
			usb_handle_packet(get_new_task(&usb_queue));
 800081a:	4807      	ldr	r0, [pc, #28]	@ (8000838 <main+0x58>)
 800081c:	f000 fa06 	bl	8000c2c <get_new_task>
 8000820:	4603      	mov	r3, r0
 8000822:	4618      	mov	r0, r3
 8000824:	f000 fa74 	bl	8000d10 <usb_handle_packet>
		}
		led_ctrl(&boot_indicator);
 8000828:	4804      	ldr	r0, [pc, #16]	@ (800083c <main+0x5c>)
 800082a:	f7ff ff7c 	bl	8000726 <led_ctrl>
		if (!queue_is_empty(&usb_queue)) {
 800082e:	e7ee      	b.n	800080e <main+0x2e>
	}
	/* USER CODE END 3 */
}
 8000830:	4618      	mov	r0, r3
 8000832:	bd80      	pop	{r7, pc}
 8000834:	20000018 	.word	0x20000018
 8000838:	20000190 	.word	0x20000190
 800083c:	20000000 	.word	0x20000000

08000840 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b094      	sub	sp, #80	@ 0x50
 8000844:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000846:	f107 0320 	add.w	r3, r7, #32
 800084a:	2230      	movs	r2, #48	@ 0x30
 800084c:	2100      	movs	r1, #0
 800084e:	4618      	mov	r0, r3
 8000850:	f007 fa6a 	bl	8007d28 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000854:	f107 030c 	add.w	r3, r7, #12
 8000858:	2200      	movs	r2, #0
 800085a:	601a      	str	r2, [r3, #0]
 800085c:	605a      	str	r2, [r3, #4]
 800085e:	609a      	str	r2, [r3, #8]
 8000860:	60da      	str	r2, [r3, #12]
 8000862:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000864:	2300      	movs	r3, #0
 8000866:	60bb      	str	r3, [r7, #8]
 8000868:	4b28      	ldr	r3, [pc, #160]	@ (800090c <SystemClock_Config+0xcc>)
 800086a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800086c:	4a27      	ldr	r2, [pc, #156]	@ (800090c <SystemClock_Config+0xcc>)
 800086e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000872:	6413      	str	r3, [r2, #64]	@ 0x40
 8000874:	4b25      	ldr	r3, [pc, #148]	@ (800090c <SystemClock_Config+0xcc>)
 8000876:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000878:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800087c:	60bb      	str	r3, [r7, #8]
 800087e:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000880:	2300      	movs	r3, #0
 8000882:	607b      	str	r3, [r7, #4]
 8000884:	4b22      	ldr	r3, [pc, #136]	@ (8000910 <SystemClock_Config+0xd0>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	4a21      	ldr	r2, [pc, #132]	@ (8000910 <SystemClock_Config+0xd0>)
 800088a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800088e:	6013      	str	r3, [r2, #0]
 8000890:	4b1f      	ldr	r3, [pc, #124]	@ (8000910 <SystemClock_Config+0xd0>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000898:	607b      	str	r3, [r7, #4]
 800089a:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800089c:	2301      	movs	r3, #1
 800089e:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008a0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80008a4:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008a6:	2302      	movs	r3, #2
 80008a8:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008aa:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80008ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLM = 4;
 80008b0:	2304      	movs	r3, #4
 80008b2:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLN = 168;
 80008b4:	23a8      	movs	r3, #168	@ 0xa8
 80008b6:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008b8:	2302      	movs	r3, #2
 80008ba:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 80008bc:	2307      	movs	r3, #7
 80008be:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008c0:	f107 0320 	add.w	r3, r7, #32
 80008c4:	4618      	mov	r0, r3
 80008c6:	f002 fbcf 	bl	8003068 <HAL_RCC_OscConfig>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d001      	beq.n	80008d4 <SystemClock_Config+0x94>
	{
		Error_Handler();
 80008d0:	f000 f88e 	bl	80009f0 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008d4:	230f      	movs	r3, #15
 80008d6:	60fb      	str	r3, [r7, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008d8:	2302      	movs	r3, #2
 80008da:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008dc:	2300      	movs	r3, #0
 80008de:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80008e0:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80008e4:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80008e6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008ea:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80008ec:	f107 030c 	add.w	r3, r7, #12
 80008f0:	2105      	movs	r1, #5
 80008f2:	4618      	mov	r0, r3
 80008f4:	f002 fe30 	bl	8003558 <HAL_RCC_ClockConfig>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d001      	beq.n	8000902 <SystemClock_Config+0xc2>
	{
		Error_Handler();
 80008fe:	f000 f877 	bl	80009f0 <Error_Handler>
	}
}
 8000902:	bf00      	nop
 8000904:	3750      	adds	r7, #80	@ 0x50
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	40023800 	.word	0x40023800
 8000910:	40007000 	.word	0x40007000

08000914 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b08a      	sub	sp, #40	@ 0x28
 8000918:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800091a:	f107 0314 	add.w	r3, r7, #20
 800091e:	2200      	movs	r2, #0
 8000920:	601a      	str	r2, [r3, #0]
 8000922:	605a      	str	r2, [r3, #4]
 8000924:	609a      	str	r2, [r3, #8]
 8000926:	60da      	str	r2, [r3, #12]
 8000928:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800092a:	2300      	movs	r3, #0
 800092c:	613b      	str	r3, [r7, #16]
 800092e:	4b2d      	ldr	r3, [pc, #180]	@ (80009e4 <MX_GPIO_Init+0xd0>)
 8000930:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000932:	4a2c      	ldr	r2, [pc, #176]	@ (80009e4 <MX_GPIO_Init+0xd0>)
 8000934:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000938:	6313      	str	r3, [r2, #48]	@ 0x30
 800093a:	4b2a      	ldr	r3, [pc, #168]	@ (80009e4 <MX_GPIO_Init+0xd0>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800093e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000942:	613b      	str	r3, [r7, #16]
 8000944:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000946:	2300      	movs	r3, #0
 8000948:	60fb      	str	r3, [r7, #12]
 800094a:	4b26      	ldr	r3, [pc, #152]	@ (80009e4 <MX_GPIO_Init+0xd0>)
 800094c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800094e:	4a25      	ldr	r2, [pc, #148]	@ (80009e4 <MX_GPIO_Init+0xd0>)
 8000950:	f043 0304 	orr.w	r3, r3, #4
 8000954:	6313      	str	r3, [r2, #48]	@ 0x30
 8000956:	4b23      	ldr	r3, [pc, #140]	@ (80009e4 <MX_GPIO_Init+0xd0>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800095a:	f003 0304 	and.w	r3, r3, #4
 800095e:	60fb      	str	r3, [r7, #12]
 8000960:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000962:	2300      	movs	r3, #0
 8000964:	60bb      	str	r3, [r7, #8]
 8000966:	4b1f      	ldr	r3, [pc, #124]	@ (80009e4 <MX_GPIO_Init+0xd0>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800096a:	4a1e      	ldr	r2, [pc, #120]	@ (80009e4 <MX_GPIO_Init+0xd0>)
 800096c:	f043 0308 	orr.w	r3, r3, #8
 8000970:	6313      	str	r3, [r2, #48]	@ 0x30
 8000972:	4b1c      	ldr	r3, [pc, #112]	@ (80009e4 <MX_GPIO_Init+0xd0>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000976:	f003 0308 	and.w	r3, r3, #8
 800097a:	60bb      	str	r3, [r7, #8]
 800097c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800097e:	2300      	movs	r3, #0
 8000980:	607b      	str	r3, [r7, #4]
 8000982:	4b18      	ldr	r3, [pc, #96]	@ (80009e4 <MX_GPIO_Init+0xd0>)
 8000984:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000986:	4a17      	ldr	r2, [pc, #92]	@ (80009e4 <MX_GPIO_Init+0xd0>)
 8000988:	f043 0301 	orr.w	r3, r3, #1
 800098c:	6313      	str	r3, [r2, #48]	@ 0x30
 800098e:	4b15      	ldr	r3, [pc, #84]	@ (80009e4 <MX_GPIO_Init+0xd0>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000992:	f003 0301 	and.w	r3, r3, #1
 8000996:	607b      	str	r3, [r7, #4]
 8000998:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET);
 800099a:	2200      	movs	r2, #0
 800099c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80009a0:	4811      	ldr	r0, [pc, #68]	@ (80009e8 <MX_GPIO_Init+0xd4>)
 80009a2:	f001 f8f5 	bl	8001b90 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PC1 */
	GPIO_InitStruct.Pin = GPIO_PIN_1;
 80009a6:	2302      	movs	r3, #2
 80009a8:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009aa:	2300      	movs	r3, #0
 80009ac:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009ae:	2301      	movs	r3, #1
 80009b0:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009b2:	f107 0314 	add.w	r3, r7, #20
 80009b6:	4619      	mov	r1, r3
 80009b8:	480c      	ldr	r0, [pc, #48]	@ (80009ec <MX_GPIO_Init+0xd8>)
 80009ba:	f000 ff35 	bl	8001828 <HAL_GPIO_Init>

	/*Configure GPIO pin : PD15 */
	GPIO_InitStruct.Pin = GPIO_PIN_15;
 80009be:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80009c2:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009c4:	2301      	movs	r3, #1
 80009c6:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c8:	2300      	movs	r3, #0
 80009ca:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009cc:	2300      	movs	r3, #0
 80009ce:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009d0:	f107 0314 	add.w	r3, r7, #20
 80009d4:	4619      	mov	r1, r3
 80009d6:	4804      	ldr	r0, [pc, #16]	@ (80009e8 <MX_GPIO_Init+0xd4>)
 80009d8:	f000 ff26 	bl	8001828 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 80009dc:	bf00      	nop
 80009de:	3728      	adds	r7, #40	@ 0x28
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	40023800 	.word	0x40023800
 80009e8:	40020c00 	.word	0x40020c00
 80009ec:	40020800 	.word	0x40020800

080009f0 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80009f4:	b672      	cpsid	i
}
 80009f6:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80009f8:	bf00      	nop
 80009fa:	e7fd      	b.n	80009f8 <Error_Handler+0x8>

080009fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	b083      	sub	sp, #12
 8000a00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a02:	2300      	movs	r3, #0
 8000a04:	607b      	str	r3, [r7, #4]
 8000a06:	4b10      	ldr	r3, [pc, #64]	@ (8000a48 <HAL_MspInit+0x4c>)
 8000a08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a0a:	4a0f      	ldr	r2, [pc, #60]	@ (8000a48 <HAL_MspInit+0x4c>)
 8000a0c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a10:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a12:	4b0d      	ldr	r3, [pc, #52]	@ (8000a48 <HAL_MspInit+0x4c>)
 8000a14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a16:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a1a:	607b      	str	r3, [r7, #4]
 8000a1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a1e:	2300      	movs	r3, #0
 8000a20:	603b      	str	r3, [r7, #0]
 8000a22:	4b09      	ldr	r3, [pc, #36]	@ (8000a48 <HAL_MspInit+0x4c>)
 8000a24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a26:	4a08      	ldr	r2, [pc, #32]	@ (8000a48 <HAL_MspInit+0x4c>)
 8000a28:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a2c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a2e:	4b06      	ldr	r3, [pc, #24]	@ (8000a48 <HAL_MspInit+0x4c>)
 8000a30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a36:	603b      	str	r3, [r7, #0]
 8000a38:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a3a:	bf00      	nop
 8000a3c:	370c      	adds	r7, #12
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a44:	4770      	bx	lr
 8000a46:	bf00      	nop
 8000a48:	40023800 	.word	0x40023800

08000a4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a50:	bf00      	nop
 8000a52:	e7fd      	b.n	8000a50 <NMI_Handler+0x4>

08000a54 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a58:	bf00      	nop
 8000a5a:	e7fd      	b.n	8000a58 <HardFault_Handler+0x4>

08000a5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a60:	bf00      	nop
 8000a62:	e7fd      	b.n	8000a60 <MemManage_Handler+0x4>

08000a64 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a68:	bf00      	nop
 8000a6a:	e7fd      	b.n	8000a68 <BusFault_Handler+0x4>

08000a6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a70:	bf00      	nop
 8000a72:	e7fd      	b.n	8000a70 <UsageFault_Handler+0x4>

08000a74 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a78:	bf00      	nop
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a80:	4770      	bx	lr

08000a82 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a82:	b480      	push	{r7}
 8000a84:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a86:	bf00      	nop
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8e:	4770      	bx	lr

08000a90 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a94:	bf00      	nop
 8000a96:	46bd      	mov	sp, r7
 8000a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9c:	4770      	bx	lr

08000a9e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a9e:	b580      	push	{r7, lr}
 8000aa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000aa2:	f7ff fe87 	bl	80007b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000aa6:	bf00      	nop
 8000aa8:	bd80      	pop	{r7, pc}
	...

08000aac <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000ab0:	4802      	ldr	r0, [pc, #8]	@ (8000abc <OTG_FS_IRQHandler+0x10>)
 8000ab2:	f001 f9ca 	bl	8001e4a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000ab6:	bf00      	nop
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	200016ac 	.word	0x200016ac

08000ac0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b086      	sub	sp, #24
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ac8:	4a14      	ldr	r2, [pc, #80]	@ (8000b1c <_sbrk+0x5c>)
 8000aca:	4b15      	ldr	r3, [pc, #84]	@ (8000b20 <_sbrk+0x60>)
 8000acc:	1ad3      	subs	r3, r2, r3
 8000ace:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ad0:	697b      	ldr	r3, [r7, #20]
 8000ad2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ad4:	4b13      	ldr	r3, [pc, #76]	@ (8000b24 <_sbrk+0x64>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d102      	bne.n	8000ae2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000adc:	4b11      	ldr	r3, [pc, #68]	@ (8000b24 <_sbrk+0x64>)
 8000ade:	4a12      	ldr	r2, [pc, #72]	@ (8000b28 <_sbrk+0x68>)
 8000ae0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ae2:	4b10      	ldr	r3, [pc, #64]	@ (8000b24 <_sbrk+0x64>)
 8000ae4:	681a      	ldr	r2, [r3, #0]
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	4413      	add	r3, r2
 8000aea:	693a      	ldr	r2, [r7, #16]
 8000aec:	429a      	cmp	r2, r3
 8000aee:	d207      	bcs.n	8000b00 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000af0:	f007 f932 	bl	8007d58 <__errno>
 8000af4:	4603      	mov	r3, r0
 8000af6:	220c      	movs	r2, #12
 8000af8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000afa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000afe:	e009      	b.n	8000b14 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b00:	4b08      	ldr	r3, [pc, #32]	@ (8000b24 <_sbrk+0x64>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b06:	4b07      	ldr	r3, [pc, #28]	@ (8000b24 <_sbrk+0x64>)
 8000b08:	681a      	ldr	r2, [r3, #0]
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	4413      	add	r3, r2
 8000b0e:	4a05      	ldr	r2, [pc, #20]	@ (8000b24 <_sbrk+0x64>)
 8000b10:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b12:	68fb      	ldr	r3, [r7, #12]
}
 8000b14:	4618      	mov	r0, r3
 8000b16:	3718      	adds	r7, #24
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	20020000 	.word	0x20020000
 8000b20:	00000400 	.word	0x00000400
 8000b24:	200001a4 	.word	0x200001a4
 8000b28:	20001ef8 	.word	0x20001ef8

08000b2c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b30:	4b06      	ldr	r3, [pc, #24]	@ (8000b4c <SystemInit+0x20>)
 8000b32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b36:	4a05      	ldr	r2, [pc, #20]	@ (8000b4c <SystemInit+0x20>)
 8000b38:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b3c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b40:	bf00      	nop
 8000b42:	46bd      	mov	sp, r7
 8000b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b48:	4770      	bx	lr
 8000b4a:	bf00      	nop
 8000b4c:	e000ed00 	.word	0xe000ed00

08000b50 <queue_is_empty>:
/**
  * @brief  check queue is empty
  * @param  queue: queue to check
  * @retval 1: queue is empty, 0: data is avaiable
*/
int queue_is_empty(struct task_queue *queue) {
 8000b50:	b480      	push	{r7}
 8000b52:	b085      	sub	sp, #20
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
	return (atomic_load(&queue->n_tasks) == 0);
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	330c      	adds	r3, #12
 8000b5c:	60fb      	str	r3, [r7, #12]
 8000b5e:	68fb      	ldr	r3, [r7, #12]
 8000b60:	f3bf 8f5b 	dmb	ish
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	f3bf 8f5b 	dmb	ish
 8000b6a:	60bb      	str	r3, [r7, #8]
 8000b6c:	68bb      	ldr	r3, [r7, #8]
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	bf0c      	ite	eq
 8000b72:	2301      	moveq	r3, #1
 8000b74:	2300      	movne	r3, #0
 8000b76:	b2db      	uxtb	r3, r3
}
 8000b78:	4618      	mov	r0, r3
 8000b7a:	3714      	adds	r7, #20
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b82:	4770      	bx	lr

08000b84 <put_task_to_queue>:
  * @brief  put task to current queue, if the queue is already full, task will be 
  * put at head of queue if head task was handled
  * @param  task: task to put
  * @retval 0: success, -1: failed
*/
int put_task_to_queue(struct task_queue *queue, struct task_struct task) {
 8000b84:	b084      	sub	sp, #16
 8000b86:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b88:	b085      	sub	sp, #20
 8000b8a:	af00      	add	r7, sp, #0
 8000b8c:	6078      	str	r0, [r7, #4]
 8000b8e:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 8000b92:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	if ((atomic_load(&queue->n_tasks)) == queue->queue_size) {
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	330c      	adds	r3, #12
 8000b9a:	60fb      	str	r3, [r7, #12]
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	f3bf 8f5b 	dmb	ish
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	f3bf 8f5b 	dmb	ish
 8000ba8:	60bb      	str	r3, [r7, #8]
 8000baa:	68bb      	ldr	r3, [r7, #8]
 8000bac:	687a      	ldr	r2, [r7, #4]
 8000bae:	6912      	ldr	r2, [r2, #16]
 8000bb0:	4293      	cmp	r3, r2
 8000bb2:	d102      	bne.n	8000bba <put_task_to_queue+0x36>
		return -1; /* queue is full */
 8000bb4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000bb8:	e031      	b.n	8000c1e <put_task_to_queue+0x9a>
	} else {
		queue->task[queue->write_index] = task;
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	681a      	ldr	r2, [r3, #0]
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	689b      	ldr	r3, [r3, #8]
 8000bc2:	019b      	lsls	r3, r3, #6
 8000bc4:	4413      	add	r3, r2
 8000bc6:	f107 042c 	add.w	r4, r7, #44	@ 0x2c
 8000bca:	469c      	mov	ip, r3
 8000bcc:	f104 0e40 	add.w	lr, r4, #64	@ 0x40
 8000bd0:	4665      	mov	r5, ip
 8000bd2:	4626      	mov	r6, r4
 8000bd4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000bd6:	6028      	str	r0, [r5, #0]
 8000bd8:	6069      	str	r1, [r5, #4]
 8000bda:	60aa      	str	r2, [r5, #8]
 8000bdc:	60eb      	str	r3, [r5, #12]
 8000bde:	3410      	adds	r4, #16
 8000be0:	f10c 0c10 	add.w	ip, ip, #16
 8000be4:	4574      	cmp	r4, lr
 8000be6:	d1f3      	bne.n	8000bd0 <put_task_to_queue+0x4c>
		queue->write_index = (queue->write_index + 1) % queue->queue_size;
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	689b      	ldr	r3, [r3, #8]
 8000bec:	3301      	adds	r3, #1
 8000bee:	687a      	ldr	r2, [r7, #4]
 8000bf0:	6912      	ldr	r2, [r2, #16]
 8000bf2:	fbb3 f1f2 	udiv	r1, r3, r2
 8000bf6:	fb01 f202 	mul.w	r2, r1, r2
 8000bfa:	1a9a      	subs	r2, r3, r2
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	609a      	str	r2, [r3, #8]
		atomic_fetch_add(&queue->n_tasks, 1);
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	330c      	adds	r3, #12
 8000c04:	f3bf 8f5b 	dmb	ish
 8000c08:	e853 1f00 	ldrex	r1, [r3]
 8000c0c:	f101 0101 	add.w	r1, r1, #1
 8000c10:	e843 1200 	strex	r2, r1, [r3]
 8000c14:	2a00      	cmp	r2, #0
 8000c16:	d1f7      	bne.n	8000c08 <put_task_to_queue+0x84>
 8000c18:	f3bf 8f5b 	dmb	ish
	    return 0;
 8000c1c:	2300      	movs	r3, #0
	}
}
 8000c1e:	4618      	mov	r0, r3
 8000c20:	3714      	adds	r7, #20
 8000c22:	46bd      	mov	sp, r7
 8000c24:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8000c28:	b004      	add	sp, #16
 8000c2a:	4770      	bx	lr

08000c2c <get_new_task>:
  * @brief  Get head of task list
  * @param  queue: queue
  * @param  none
  * @retval head of task list
*/
struct task_struct *get_new_task(struct task_queue *queue) {
 8000c2c:	b480      	push	{r7}
 8000c2e:	b087      	sub	sp, #28
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
	if (atomic_load(&queue->n_tasks) == 0) {
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	330c      	adds	r3, #12
 8000c38:	617b      	str	r3, [r7, #20]
 8000c3a:	697b      	ldr	r3, [r7, #20]
 8000c3c:	f3bf 8f5b 	dmb	ish
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	f3bf 8f5b 	dmb	ish
 8000c46:	60fb      	str	r3, [r7, #12]
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d101      	bne.n	8000c52 <get_new_task+0x26>
		return NULL;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	e021      	b.n	8000c96 <get_new_task+0x6a>
	} else {
		int index = queue->read_index;
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	685b      	ldr	r3, [r3, #4]
 8000c56:	613b      	str	r3, [r7, #16]
		queue->read_index = (queue->read_index + 1) % queue->queue_size;
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	685b      	ldr	r3, [r3, #4]
 8000c5c:	3301      	adds	r3, #1
 8000c5e:	687a      	ldr	r2, [r7, #4]
 8000c60:	6912      	ldr	r2, [r2, #16]
 8000c62:	fbb3 f1f2 	udiv	r1, r3, r2
 8000c66:	fb01 f202 	mul.w	r2, r1, r2
 8000c6a:	1a9a      	subs	r2, r3, r2
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	605a      	str	r2, [r3, #4]
		atomic_fetch_sub(&queue->n_tasks, 1);
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	330c      	adds	r3, #12
 8000c74:	f3bf 8f5b 	dmb	ish
 8000c78:	e853 1f00 	ldrex	r1, [r3]
 8000c7c:	f101 31ff 	add.w	r1, r1, #4294967295	@ 0xffffffff
 8000c80:	e843 1200 	strex	r2, r1, [r3]
 8000c84:	2a00      	cmp	r2, #0
 8000c86:	d1f7      	bne.n	8000c78 <get_new_task+0x4c>
 8000c88:	f3bf 8f5b 	dmb	ish
		return &queue->task[index];
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	681a      	ldr	r2, [r3, #0]
 8000c90:	693b      	ldr	r3, [r7, #16]
 8000c92:	019b      	lsls	r3, r3, #6
 8000c94:	4413      	add	r3, r2
	}
}
 8000c96:	4618      	mov	r0, r3
 8000c98:	371c      	adds	r7, #28
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca0:	4770      	bx	lr

08000ca2 <init_queue>:
  * @brief  Initialize task queue
  * @param  queue: queue to init
  * @param  size: queue size (maximum of task to be executed)
  * @retval 0: success, -1: failed
*/
int init_queue(struct task_queue *queue, uint32_t size) {
 8000ca2:	b580      	push	{r7, lr}
 8000ca4:	b084      	sub	sp, #16
 8000ca6:	af00      	add	r7, sp, #0
 8000ca8:	6078      	str	r0, [r7, #4]
 8000caa:	6039      	str	r1, [r7, #0]
	queue->task = (struct task_struct *)calloc(size, sizeof(struct task_struct));
 8000cac:	2140      	movs	r1, #64	@ 0x40
 8000cae:	6838      	ldr	r0, [r7, #0]
 8000cb0:	f006 ff70 	bl	8007b94 <calloc>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	461a      	mov	r2, r3
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	601a      	str	r2, [r3, #0]
	if (!queue->task) {
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d102      	bne.n	8000cca <init_queue+0x28>
		return -1;
 8000cc4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000cc8:	e01e      	b.n	8000d08 <init_queue+0x66>
	}
	queue->read_index = 0;
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	2200      	movs	r2, #0
 8000cce:	711a      	strb	r2, [r3, #4]
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	715a      	strb	r2, [r3, #5]
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	719a      	strb	r2, [r3, #6]
 8000cd8:	2200      	movs	r2, #0
 8000cda:	71da      	strb	r2, [r3, #7]
	queue->write_index = 0;
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	2200      	movs	r2, #0
 8000ce0:	721a      	strb	r2, [r3, #8]
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	725a      	strb	r2, [r3, #9]
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	729a      	strb	r2, [r3, #10]
 8000cea:	2200      	movs	r2, #0
 8000cec:	72da      	strb	r2, [r3, #11]
	atomic_init(&queue->n_tasks, 0);
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	330c      	adds	r3, #12
 8000cf2:	60fb      	str	r3, [r7, #12]
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	60bb      	str	r3, [r7, #8]
 8000cf8:	68bb      	ldr	r3, [r7, #8]
 8000cfa:	461a      	mov	r2, r3
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	601a      	str	r2, [r3, #0]
	queue->queue_size = size;
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	683a      	ldr	r2, [r7, #0]
 8000d04:	611a      	str	r2, [r3, #16]
	return 0;
 8000d06:	2300      	movs	r3, #0
}
 8000d08:	4618      	mov	r0, r3
 8000d0a:	3710      	adds	r7, #16
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}

08000d10 <usb_handle_packet>:
#include <string.h>
#include "bootloader.h"

extern u16 adc_val;

int usb_handle_packet(struct task_struct *task) {
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b094      	sub	sp, #80	@ 0x50
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
	struct task_struct response_task;
	response_task.msg_error = MSG_SUCCESS;
 8000d18:	f243 2330 	movw	r3, #12848	@ 0x3230
 8000d1c:	81fb      	strh	r3, [r7, #14]
	int res;

	if (task->msg_head[0] != 0xFA || task->msg_head[1] != 0xFB || task->msg_tail[0] != 0xFC || task->msg_tail[1] != 0xFD) {
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	781b      	ldrb	r3, [r3, #0]
 8000d22:	2bfa      	cmp	r3, #250	@ 0xfa
 8000d24:	d10d      	bne.n	8000d42 <usb_handle_packet+0x32>
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	785b      	ldrb	r3, [r3, #1]
 8000d2a:	2bfb      	cmp	r3, #251	@ 0xfb
 8000d2c:	d109      	bne.n	8000d42 <usb_handle_packet+0x32>
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8000d34:	2bfc      	cmp	r3, #252	@ 0xfc
 8000d36:	d104      	bne.n	8000d42 <usb_handle_packet+0x32>
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8000d3e:	2bfd      	cmp	r3, #253	@ 0xfd
 8000d40:	d005      	beq.n	8000d4e <usb_handle_packet+0x3e>
		response_task.msg_error = MSG_WFORMAT;
 8000d42:	f243 2332 	movw	r3, #12850	@ 0x3232
 8000d46:	81fb      	strh	r3, [r7, #14]
		response_task.data_length = 0;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	827b      	strh	r3, [r7, #18]
		goto full_fill_and_response;
 8000d4c:	e05f      	b.n	8000e0e <usb_handle_packet+0xfe>
	} else if (CRC_CalculateCRC16(task->data, task->data_length) != task->crc) {
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	f103 0208 	add.w	r2, r3, #8
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	88db      	ldrh	r3, [r3, #6]
 8000d58:	b29b      	uxth	r3, r3
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	4610      	mov	r0, r2
 8000d5e:	f7ff fbab 	bl	80004b8 <CRC_CalculateCRC16>
 8000d62:	4603      	mov	r3, r0
 8000d64:	461a      	mov	r2, r3
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 8000d6a:	b29b      	uxth	r3, r3
 8000d6c:	429a      	cmp	r2, r3
 8000d6e:	d005      	beq.n	8000d7c <usb_handle_packet+0x6c>
		response_task.msg_error = MSG_WRONG_CRC;
 8000d70:	f243 2334 	movw	r3, #12852	@ 0x3234
 8000d74:	81fb      	strh	r3, [r7, #14]
		response_task.data_length = 0;
 8000d76:	2300      	movs	r3, #0
 8000d78:	827b      	strh	r3, [r7, #18]
		goto full_fill_and_response;
 8000d7a:	e048      	b.n	8000e0e <usb_handle_packet+0xfe>
	}

	switch (task->msg_type) {
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	889b      	ldrh	r3, [r3, #4]
 8000d80:	b29b      	uxth	r3, r3
 8000d82:	f5a3 5300 	sub.w	r3, r3, #8192	@ 0x2000
 8000d86:	3b01      	subs	r3, #1
 8000d88:	2b03      	cmp	r3, #3
 8000d8a:	d83a      	bhi.n	8000e02 <usb_handle_packet+0xf2>
 8000d8c:	a201      	add	r2, pc, #4	@ (adr r2, 8000d94 <usb_handle_packet+0x84>)
 8000d8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d92:	bf00      	nop
 8000d94:	08000da5 	.word	0x08000da5
 8000d98:	08000dbd 	.word	0x08000dbd
 8000d9c:	08000dc3 	.word	0x08000dc3
 8000da0:	08000de9 	.word	0x08000de9
		case MSG_REQUEST_DATA:
			memcpy(response_task.data, &adc_val, sizeof(u16));
 8000da4:	4b31      	ldr	r3, [pc, #196]	@ (8000e6c <usb_handle_packet+0x15c>)
 8000da6:	881b      	ldrh	r3, [r3, #0]
 8000da8:	82bb      	strh	r3, [r7, #20]
			response_task.data_length = sizeof(u16);
 8000daa:	2302      	movs	r3, #2
 8000dac:	827b      	strh	r3, [r7, #18]
			adc_val++;
 8000dae:	4b2f      	ldr	r3, [pc, #188]	@ (8000e6c <usb_handle_packet+0x15c>)
 8000db0:	881b      	ldrh	r3, [r3, #0]
 8000db2:	3301      	adds	r3, #1
 8000db4:	b29a      	uxth	r2, r3
 8000db6:	4b2d      	ldr	r3, [pc, #180]	@ (8000e6c <usb_handle_packet+0x15c>)
 8000db8:	801a      	strh	r2, [r3, #0]
			break;
 8000dba:	e028      	b.n	8000e0e <usb_handle_packet+0xfe>

		case MSG_GOTO_APP:
			response_task.data_length = 0;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	827b      	strh	r3, [r7, #18]
			break;
 8000dc0:	e025      	b.n	8000e0e <usb_handle_packet+0xfe>

		case MSG_PROGRAM_DATA:
			if (hex_line_handler(task->data, task->data_length) != HEX_SUCCESS) {
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	f103 0208 	add.w	r2, r3, #8
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	88db      	ldrh	r3, [r3, #6]
 8000dcc:	b29b      	uxth	r3, r3
 8000dce:	4619      	mov	r1, r3
 8000dd0:	4610      	mov	r0, r2
 8000dd2:	f7ff fbf3 	bl	80005bc <hex_line_handler>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d002      	beq.n	8000de2 <usb_handle_packet+0xd2>
				response_task.msg_error = MSG_FAILED;
 8000ddc:	f243 2333 	movw	r3, #12851	@ 0x3233
 8000de0:	81fb      	strh	r3, [r7, #14]
			}
			response_task.data_length = 0;
 8000de2:	2300      	movs	r3, #0
 8000de4:	827b      	strh	r3, [r7, #18]
			break;
 8000de6:	e012      	b.n	8000e0e <usb_handle_packet+0xfe>

		case MSG_DEV_ERASE:
			if (flash_erase(FLASH_SECTOR_5, 3) != HAL_OK) {
 8000de8:	2103      	movs	r1, #3
 8000dea:	2005      	movs	r0, #5
 8000dec:	f7ff fc48 	bl	8000680 <flash_erase>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d002      	beq.n	8000dfc <usb_handle_packet+0xec>
				response_task.msg_error = MSG_FAILED;
 8000df6:	f243 2333 	movw	r3, #12851	@ 0x3233
 8000dfa:	81fb      	strh	r3, [r7, #14]
			}
			response_task.data_length = 0;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	827b      	strh	r3, [r7, #18]
			break;
 8000e00:	e005      	b.n	8000e0e <usb_handle_packet+0xfe>

		default:
			response_task.msg_error = MSG_INVALID;
 8000e02:	f243 2331 	movw	r3, #12849	@ 0x3231
 8000e06:	81fb      	strh	r3, [r7, #14]
			response_task.data_length = 0;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	827b      	strh	r3, [r7, #18]
			break;
 8000e0c:	bf00      	nop
	}

full_fill_and_response:
	response_task.msg_head[0] = 0xFA;
 8000e0e:	23fa      	movs	r3, #250	@ 0xfa
 8000e10:	733b      	strb	r3, [r7, #12]
	response_task.msg_head[1] = 0xFB;
 8000e12:	23fb      	movs	r3, #251	@ 0xfb
 8000e14:	737b      	strb	r3, [r7, #13]
	response_task.msg_type = task->msg_type;
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	889b      	ldrh	r3, [r3, #4]
 8000e1a:	b29b      	uxth	r3, r3
 8000e1c:	823b      	strh	r3, [r7, #16]
	response_task.crc = CRC_CalculateCRC16(response_task.data, response_task.data_length);
 8000e1e:	8a7a      	ldrh	r2, [r7, #18]
 8000e20:	f107 030c 	add.w	r3, r7, #12
 8000e24:	3308      	adds	r3, #8
 8000e26:	4611      	mov	r1, r2
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f7ff fb45 	bl	80004b8 <CRC_CalculateCRC16>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
	response_task.msg_tail[0] = 0xFC;
 8000e34:	23fc      	movs	r3, #252	@ 0xfc
 8000e36:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
	response_task.msg_tail[1] = 0xFD;
 8000e3a:	23fd      	movs	r3, #253	@ 0xfd
 8000e3c:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
	res = usb_response_pkt(&response_task);
 8000e40:	f107 030c 	add.w	r3, r7, #12
 8000e44:	4618      	mov	r0, r3
 8000e46:	f000 f815 	bl	8000e74 <usb_response_pkt>
 8000e4a:	64f8      	str	r0, [r7, #76]	@ 0x4c
	if (task->msg_type == MSG_GOTO_APP) {
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	889b      	ldrh	r3, [r3, #4]
 8000e50:	b29b      	uxth	r3, r3
 8000e52:	f242 0202 	movw	r2, #8194	@ 0x2002
 8000e56:	4293      	cmp	r3, r2
 8000e58:	d102      	bne.n	8000e60 <usb_handle_packet+0x150>
		goto_application(PROGRAM_ADDRESS);
 8000e5a:	4805      	ldr	r0, [pc, #20]	@ (8000e70 <usb_handle_packet+0x160>)
 8000e5c:	f7ff fb8c 	bl	8000578 <goto_application>
	}
	return res;
 8000e60:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
}
 8000e62:	4618      	mov	r0, r3
 8000e64:	3750      	adds	r7, #80	@ 0x50
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	2000018c 	.word	0x2000018c
 8000e70:	08020000 	.word	0x08020000

08000e74 <usb_response_pkt>:

int usb_response_pkt(struct task_struct *task) {
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b082      	sub	sp, #8
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
	return CDC_Transmit_FS((u8 *)task, sizeof(struct task_struct));
 8000e7c:	2140      	movs	r1, #64	@ 0x40
 8000e7e:	6878      	ldr	r0, [r7, #4]
 8000e80:	f006 fa2c 	bl	80072dc <CDC_Transmit_FS>
 8000e84:	4603      	mov	r3, r0
}
 8000e86:	4618      	mov	r0, r3
 8000e88:	3708      	adds	r7, #8
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}
	...

08000e90 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000e90:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ec8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000e94:	f7ff fe4a 	bl	8000b2c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e98:	480c      	ldr	r0, [pc, #48]	@ (8000ecc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e9a:	490d      	ldr	r1, [pc, #52]	@ (8000ed0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e9c:	4a0d      	ldr	r2, [pc, #52]	@ (8000ed4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ea0:	e002      	b.n	8000ea8 <LoopCopyDataInit>

08000ea2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ea2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ea4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ea6:	3304      	adds	r3, #4

08000ea8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ea8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000eaa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000eac:	d3f9      	bcc.n	8000ea2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000eae:	4a0a      	ldr	r2, [pc, #40]	@ (8000ed8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000eb0:	4c0a      	ldr	r4, [pc, #40]	@ (8000edc <LoopFillZerobss+0x22>)
  movs r3, #0
 8000eb2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000eb4:	e001      	b.n	8000eba <LoopFillZerobss>

08000eb6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000eb6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000eb8:	3204      	adds	r2, #4

08000eba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000eba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ebc:	d3fb      	bcc.n	8000eb6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ebe:	f006 ff51 	bl	8007d64 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ec2:	f7ff fc8d 	bl	80007e0 <main>
  bx  lr    
 8000ec6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000ec8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ecc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ed0:	2000016c 	.word	0x2000016c
  ldr r2, =_sidata
 8000ed4:	08007e20 	.word	0x08007e20
  ldr r2, =_sbss
 8000ed8:	2000016c 	.word	0x2000016c
  ldr r4, =_ebss
 8000edc:	20001ef8 	.word	0x20001ef8

08000ee0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ee0:	e7fe      	b.n	8000ee0 <ADC_IRQHandler>
	...

08000ee4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ee8:	4b0e      	ldr	r3, [pc, #56]	@ (8000f24 <HAL_Init+0x40>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4a0d      	ldr	r2, [pc, #52]	@ (8000f24 <HAL_Init+0x40>)
 8000eee:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000ef2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ef4:	4b0b      	ldr	r3, [pc, #44]	@ (8000f24 <HAL_Init+0x40>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	4a0a      	ldr	r2, [pc, #40]	@ (8000f24 <HAL_Init+0x40>)
 8000efa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000efe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f00:	4b08      	ldr	r3, [pc, #32]	@ (8000f24 <HAL_Init+0x40>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	4a07      	ldr	r2, [pc, #28]	@ (8000f24 <HAL_Init+0x40>)
 8000f06:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f0a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f0c:	2003      	movs	r0, #3
 8000f0e:	f000 f971 	bl	80011f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f12:	200f      	movs	r0, #15
 8000f14:	f000 f83e 	bl	8000f94 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f18:	f7ff fd70 	bl	80009fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f1c:	2300      	movs	r3, #0
}
 8000f1e:	4618      	mov	r0, r3
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	40023c00 	.word	0x40023c00

08000f28 <HAL_DeInit>:
  * @brief  This function de-Initializes common part of the HAL and stops the systick.
  *         This function is optional.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 8000f2c:	4b11      	ldr	r3, [pc, #68]	@ (8000f74 <HAL_DeInit+0x4c>)
 8000f2e:	4a12      	ldr	r2, [pc, #72]	@ (8000f78 <HAL_DeInit+0x50>)
 8000f30:	621a      	str	r2, [r3, #32]
  __HAL_RCC_APB1_RELEASE_RESET();
 8000f32:	4b10      	ldr	r3, [pc, #64]	@ (8000f74 <HAL_DeInit+0x4c>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	621a      	str	r2, [r3, #32]

  __HAL_RCC_APB2_FORCE_RESET();
 8000f38:	4b0e      	ldr	r3, [pc, #56]	@ (8000f74 <HAL_DeInit+0x4c>)
 8000f3a:	4a10      	ldr	r2, [pc, #64]	@ (8000f7c <HAL_DeInit+0x54>)
 8000f3c:	625a      	str	r2, [r3, #36]	@ 0x24
  __HAL_RCC_APB2_RELEASE_RESET();
 8000f3e:	4b0d      	ldr	r3, [pc, #52]	@ (8000f74 <HAL_DeInit+0x4c>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	625a      	str	r2, [r3, #36]	@ 0x24

  __HAL_RCC_AHB1_FORCE_RESET();
 8000f44:	4b0b      	ldr	r3, [pc, #44]	@ (8000f74 <HAL_DeInit+0x4c>)
 8000f46:	4a0e      	ldr	r2, [pc, #56]	@ (8000f80 <HAL_DeInit+0x58>)
 8000f48:	611a      	str	r2, [r3, #16]
  __HAL_RCC_AHB1_RELEASE_RESET();
 8000f4a:	4b0a      	ldr	r3, [pc, #40]	@ (8000f74 <HAL_DeInit+0x4c>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	611a      	str	r2, [r3, #16]

  __HAL_RCC_AHB2_FORCE_RESET();
 8000f50:	4b08      	ldr	r3, [pc, #32]	@ (8000f74 <HAL_DeInit+0x4c>)
 8000f52:	22c1      	movs	r2, #193	@ 0xc1
 8000f54:	615a      	str	r2, [r3, #20]
  __HAL_RCC_AHB2_RELEASE_RESET();
 8000f56:	4b07      	ldr	r3, [pc, #28]	@ (8000f74 <HAL_DeInit+0x4c>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	615a      	str	r2, [r3, #20]

  __HAL_RCC_AHB3_FORCE_RESET();
 8000f5c:	4b05      	ldr	r3, [pc, #20]	@ (8000f74 <HAL_DeInit+0x4c>)
 8000f5e:	2201      	movs	r2, #1
 8000f60:	619a      	str	r2, [r3, #24]
  __HAL_RCC_AHB3_RELEASE_RESET();
 8000f62:	4b04      	ldr	r3, [pc, #16]	@ (8000f74 <HAL_DeInit+0x4c>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	619a      	str	r2, [r3, #24]

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 8000f68:	f000 f80c 	bl	8000f84 <HAL_MspDeInit>
    
  /* Return function status */
  return HAL_OK;
 8000f6c:	2300      	movs	r3, #0
}
 8000f6e:	4618      	mov	r0, r3
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	40023800 	.word	0x40023800
 8000f78:	f6fec9ff 	.word	0xf6fec9ff
 8000f7c:	04777933 	.word	0x04777933
 8000f80:	226011ff 	.word	0x226011ff

08000f84 <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */ 
}
 8000f88:	bf00      	nop
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr
	...

08000f94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f9c:	4b12      	ldr	r3, [pc, #72]	@ (8000fe8 <HAL_InitTick+0x54>)
 8000f9e:	681a      	ldr	r2, [r3, #0]
 8000fa0:	4b12      	ldr	r3, [pc, #72]	@ (8000fec <HAL_InitTick+0x58>)
 8000fa2:	781b      	ldrb	r3, [r3, #0]
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000faa:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fae:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f000 f953 	bl	800125e <HAL_SYSTICK_Config>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d001      	beq.n	8000fc2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	e00e      	b.n	8000fe0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	2b0f      	cmp	r3, #15
 8000fc6:	d80a      	bhi.n	8000fde <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fc8:	2200      	movs	r2, #0
 8000fca:	6879      	ldr	r1, [r7, #4]
 8000fcc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000fd0:	f000 f91b 	bl	800120a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fd4:	4a06      	ldr	r2, [pc, #24]	@ (8000ff0 <HAL_InitTick+0x5c>)
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	e000      	b.n	8000fe0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fde:	2301      	movs	r3, #1
}
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	3708      	adds	r7, #8
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	20000020 	.word	0x20000020
 8000fec:	20000028 	.word	0x20000028
 8000ff0:	20000024 	.word	0x20000024

08000ff4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ff8:	4b03      	ldr	r3, [pc, #12]	@ (8001008 <HAL_GetTick+0x14>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
}
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop
 8001008:	200001a8 	.word	0x200001a8

0800100c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b084      	sub	sp, #16
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001014:	f7ff ffee 	bl	8000ff4 <HAL_GetTick>
 8001018:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001024:	d005      	beq.n	8001032 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001026:	4b0a      	ldr	r3, [pc, #40]	@ (8001050 <HAL_Delay+0x44>)
 8001028:	781b      	ldrb	r3, [r3, #0]
 800102a:	461a      	mov	r2, r3
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	4413      	add	r3, r2
 8001030:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001032:	bf00      	nop
 8001034:	f7ff ffde 	bl	8000ff4 <HAL_GetTick>
 8001038:	4602      	mov	r2, r0
 800103a:	68bb      	ldr	r3, [r7, #8]
 800103c:	1ad3      	subs	r3, r2, r3
 800103e:	68fa      	ldr	r2, [r7, #12]
 8001040:	429a      	cmp	r2, r3
 8001042:	d8f7      	bhi.n	8001034 <HAL_Delay+0x28>
  {
  }
}
 8001044:	bf00      	nop
 8001046:	bf00      	nop
 8001048:	3710      	adds	r7, #16
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	20000028 	.word	0x20000028

08001054 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001054:	b480      	push	{r7}
 8001056:	b085      	sub	sp, #20
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	f003 0307 	and.w	r3, r3, #7
 8001062:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001064:	4b0c      	ldr	r3, [pc, #48]	@ (8001098 <__NVIC_SetPriorityGrouping+0x44>)
 8001066:	68db      	ldr	r3, [r3, #12]
 8001068:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800106a:	68ba      	ldr	r2, [r7, #8]
 800106c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001070:	4013      	ands	r3, r2
 8001072:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001078:	68bb      	ldr	r3, [r7, #8]
 800107a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800107c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001080:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001084:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001086:	4a04      	ldr	r2, [pc, #16]	@ (8001098 <__NVIC_SetPriorityGrouping+0x44>)
 8001088:	68bb      	ldr	r3, [r7, #8]
 800108a:	60d3      	str	r3, [r2, #12]
}
 800108c:	bf00      	nop
 800108e:	3714      	adds	r7, #20
 8001090:	46bd      	mov	sp, r7
 8001092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001096:	4770      	bx	lr
 8001098:	e000ed00 	.word	0xe000ed00

0800109c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800109c:	b480      	push	{r7}
 800109e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010a0:	4b04      	ldr	r3, [pc, #16]	@ (80010b4 <__NVIC_GetPriorityGrouping+0x18>)
 80010a2:	68db      	ldr	r3, [r3, #12]
 80010a4:	0a1b      	lsrs	r3, r3, #8
 80010a6:	f003 0307 	and.w	r3, r3, #7
}
 80010aa:	4618      	mov	r0, r3
 80010ac:	46bd      	mov	sp, r7
 80010ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b2:	4770      	bx	lr
 80010b4:	e000ed00 	.word	0xe000ed00

080010b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b083      	sub	sp, #12
 80010bc:	af00      	add	r7, sp, #0
 80010be:	4603      	mov	r3, r0
 80010c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	db0b      	blt.n	80010e2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010ca:	79fb      	ldrb	r3, [r7, #7]
 80010cc:	f003 021f 	and.w	r2, r3, #31
 80010d0:	4907      	ldr	r1, [pc, #28]	@ (80010f0 <__NVIC_EnableIRQ+0x38>)
 80010d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010d6:	095b      	lsrs	r3, r3, #5
 80010d8:	2001      	movs	r0, #1
 80010da:	fa00 f202 	lsl.w	r2, r0, r2
 80010de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80010e2:	bf00      	nop
 80010e4:	370c      	adds	r7, #12
 80010e6:	46bd      	mov	sp, r7
 80010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ec:	4770      	bx	lr
 80010ee:	bf00      	nop
 80010f0:	e000e100 	.word	0xe000e100

080010f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010f4:	b480      	push	{r7}
 80010f6:	b083      	sub	sp, #12
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	4603      	mov	r3, r0
 80010fc:	6039      	str	r1, [r7, #0]
 80010fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001100:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001104:	2b00      	cmp	r3, #0
 8001106:	db0a      	blt.n	800111e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	b2da      	uxtb	r2, r3
 800110c:	490c      	ldr	r1, [pc, #48]	@ (8001140 <__NVIC_SetPriority+0x4c>)
 800110e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001112:	0112      	lsls	r2, r2, #4
 8001114:	b2d2      	uxtb	r2, r2
 8001116:	440b      	add	r3, r1
 8001118:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800111c:	e00a      	b.n	8001134 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	b2da      	uxtb	r2, r3
 8001122:	4908      	ldr	r1, [pc, #32]	@ (8001144 <__NVIC_SetPriority+0x50>)
 8001124:	79fb      	ldrb	r3, [r7, #7]
 8001126:	f003 030f 	and.w	r3, r3, #15
 800112a:	3b04      	subs	r3, #4
 800112c:	0112      	lsls	r2, r2, #4
 800112e:	b2d2      	uxtb	r2, r2
 8001130:	440b      	add	r3, r1
 8001132:	761a      	strb	r2, [r3, #24]
}
 8001134:	bf00      	nop
 8001136:	370c      	adds	r7, #12
 8001138:	46bd      	mov	sp, r7
 800113a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113e:	4770      	bx	lr
 8001140:	e000e100 	.word	0xe000e100
 8001144:	e000ed00 	.word	0xe000ed00

08001148 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001148:	b480      	push	{r7}
 800114a:	b089      	sub	sp, #36	@ 0x24
 800114c:	af00      	add	r7, sp, #0
 800114e:	60f8      	str	r0, [r7, #12]
 8001150:	60b9      	str	r1, [r7, #8]
 8001152:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	f003 0307 	and.w	r3, r3, #7
 800115a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800115c:	69fb      	ldr	r3, [r7, #28]
 800115e:	f1c3 0307 	rsb	r3, r3, #7
 8001162:	2b04      	cmp	r3, #4
 8001164:	bf28      	it	cs
 8001166:	2304      	movcs	r3, #4
 8001168:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800116a:	69fb      	ldr	r3, [r7, #28]
 800116c:	3304      	adds	r3, #4
 800116e:	2b06      	cmp	r3, #6
 8001170:	d902      	bls.n	8001178 <NVIC_EncodePriority+0x30>
 8001172:	69fb      	ldr	r3, [r7, #28]
 8001174:	3b03      	subs	r3, #3
 8001176:	e000      	b.n	800117a <NVIC_EncodePriority+0x32>
 8001178:	2300      	movs	r3, #0
 800117a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800117c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001180:	69bb      	ldr	r3, [r7, #24]
 8001182:	fa02 f303 	lsl.w	r3, r2, r3
 8001186:	43da      	mvns	r2, r3
 8001188:	68bb      	ldr	r3, [r7, #8]
 800118a:	401a      	ands	r2, r3
 800118c:	697b      	ldr	r3, [r7, #20]
 800118e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001190:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001194:	697b      	ldr	r3, [r7, #20]
 8001196:	fa01 f303 	lsl.w	r3, r1, r3
 800119a:	43d9      	mvns	r1, r3
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011a0:	4313      	orrs	r3, r2
         );
}
 80011a2:	4618      	mov	r0, r3
 80011a4:	3724      	adds	r7, #36	@ 0x24
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr
	...

080011b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	3b01      	subs	r3, #1
 80011bc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80011c0:	d301      	bcc.n	80011c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011c2:	2301      	movs	r3, #1
 80011c4:	e00f      	b.n	80011e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011c6:	4a0a      	ldr	r2, [pc, #40]	@ (80011f0 <SysTick_Config+0x40>)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	3b01      	subs	r3, #1
 80011cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011ce:	210f      	movs	r1, #15
 80011d0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80011d4:	f7ff ff8e 	bl	80010f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011d8:	4b05      	ldr	r3, [pc, #20]	@ (80011f0 <SysTick_Config+0x40>)
 80011da:	2200      	movs	r2, #0
 80011dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011de:	4b04      	ldr	r3, [pc, #16]	@ (80011f0 <SysTick_Config+0x40>)
 80011e0:	2207      	movs	r2, #7
 80011e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011e4:	2300      	movs	r3, #0
}
 80011e6:	4618      	mov	r0, r3
 80011e8:	3708      	adds	r7, #8
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	e000e010 	.word	0xe000e010

080011f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b082      	sub	sp, #8
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011fc:	6878      	ldr	r0, [r7, #4]
 80011fe:	f7ff ff29 	bl	8001054 <__NVIC_SetPriorityGrouping>
}
 8001202:	bf00      	nop
 8001204:	3708      	adds	r7, #8
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}

0800120a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800120a:	b580      	push	{r7, lr}
 800120c:	b086      	sub	sp, #24
 800120e:	af00      	add	r7, sp, #0
 8001210:	4603      	mov	r3, r0
 8001212:	60b9      	str	r1, [r7, #8]
 8001214:	607a      	str	r2, [r7, #4]
 8001216:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001218:	2300      	movs	r3, #0
 800121a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800121c:	f7ff ff3e 	bl	800109c <__NVIC_GetPriorityGrouping>
 8001220:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001222:	687a      	ldr	r2, [r7, #4]
 8001224:	68b9      	ldr	r1, [r7, #8]
 8001226:	6978      	ldr	r0, [r7, #20]
 8001228:	f7ff ff8e 	bl	8001148 <NVIC_EncodePriority>
 800122c:	4602      	mov	r2, r0
 800122e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001232:	4611      	mov	r1, r2
 8001234:	4618      	mov	r0, r3
 8001236:	f7ff ff5d 	bl	80010f4 <__NVIC_SetPriority>
}
 800123a:	bf00      	nop
 800123c:	3718      	adds	r7, #24
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}

08001242 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001242:	b580      	push	{r7, lr}
 8001244:	b082      	sub	sp, #8
 8001246:	af00      	add	r7, sp, #0
 8001248:	4603      	mov	r3, r0
 800124a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800124c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001250:	4618      	mov	r0, r3
 8001252:	f7ff ff31 	bl	80010b8 <__NVIC_EnableIRQ>
}
 8001256:	bf00      	nop
 8001258:	3708      	adds	r7, #8
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}

0800125e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800125e:	b580      	push	{r7, lr}
 8001260:	b082      	sub	sp, #8
 8001262:	af00      	add	r7, sp, #0
 8001264:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001266:	6878      	ldr	r0, [r7, #4]
 8001268:	f7ff ffa2 	bl	80011b0 <SysTick_Config>
 800126c:	4603      	mov	r3, r0
}
 800126e:	4618      	mov	r0, r3
 8001270:	3708      	adds	r7, #8
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
	...

08001278 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b086      	sub	sp, #24
 800127c:	af00      	add	r7, sp, #0
 800127e:	60f8      	str	r0, [r7, #12]
 8001280:	60b9      	str	r1, [r7, #8]
 8001282:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001286:	2301      	movs	r3, #1
 8001288:	75fb      	strb	r3, [r7, #23]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800128a:	4b23      	ldr	r3, [pc, #140]	@ (8001318 <HAL_FLASH_Program+0xa0>)
 800128c:	7e1b      	ldrb	r3, [r3, #24]
 800128e:	2b01      	cmp	r3, #1
 8001290:	d101      	bne.n	8001296 <HAL_FLASH_Program+0x1e>
 8001292:	2302      	movs	r3, #2
 8001294:	e03b      	b.n	800130e <HAL_FLASH_Program+0x96>
 8001296:	4b20      	ldr	r3, [pc, #128]	@ (8001318 <HAL_FLASH_Program+0xa0>)
 8001298:	2201      	movs	r2, #1
 800129a:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800129c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80012a0:	f000 f870 	bl	8001384 <FLASH_WaitForLastOperation>
 80012a4:	4603      	mov	r3, r0
 80012a6:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 80012a8:	7dfb      	ldrb	r3, [r7, #23]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d12b      	bne.n	8001306 <HAL_FLASH_Program+0x8e>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d105      	bne.n	80012c0 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 80012b4:	783b      	ldrb	r3, [r7, #0]
 80012b6:	4619      	mov	r1, r3
 80012b8:	68b8      	ldr	r0, [r7, #8]
 80012ba:	f000 f91b 	bl	80014f4 <FLASH_Program_Byte>
 80012be:	e016      	b.n	80012ee <HAL_FLASH_Program+0x76>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	2b01      	cmp	r3, #1
 80012c4:	d105      	bne.n	80012d2 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 80012c6:	883b      	ldrh	r3, [r7, #0]
 80012c8:	4619      	mov	r1, r3
 80012ca:	68b8      	ldr	r0, [r7, #8]
 80012cc:	f000 f8ee 	bl	80014ac <FLASH_Program_HalfWord>
 80012d0:	e00d      	b.n	80012ee <HAL_FLASH_Program+0x76>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	2b02      	cmp	r3, #2
 80012d6:	d105      	bne.n	80012e4 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	4619      	mov	r1, r3
 80012dc:	68b8      	ldr	r0, [r7, #8]
 80012de:	f000 f8c3 	bl	8001468 <FLASH_Program_Word>
 80012e2:	e004      	b.n	80012ee <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 80012e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80012e8:	68b8      	ldr	r0, [r7, #8]
 80012ea:	f000 f88b 	bl	8001404 <FLASH_Program_DoubleWord>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80012ee:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80012f2:	f000 f847 	bl	8001384 <FLASH_WaitForLastOperation>
 80012f6:	4603      	mov	r3, r0
 80012f8:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 80012fa:	4b08      	ldr	r3, [pc, #32]	@ (800131c <HAL_FLASH_Program+0xa4>)
 80012fc:	691b      	ldr	r3, [r3, #16]
 80012fe:	4a07      	ldr	r2, [pc, #28]	@ (800131c <HAL_FLASH_Program+0xa4>)
 8001300:	f023 0301 	bic.w	r3, r3, #1
 8001304:	6113      	str	r3, [r2, #16]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001306:	4b04      	ldr	r3, [pc, #16]	@ (8001318 <HAL_FLASH_Program+0xa0>)
 8001308:	2200      	movs	r2, #0
 800130a:	761a      	strb	r2, [r3, #24]

  return status;
 800130c:	7dfb      	ldrb	r3, [r7, #23]
}
 800130e:	4618      	mov	r0, r3
 8001310:	3718      	adds	r7, #24
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	200001ac 	.word	0x200001ac
 800131c:	40023c00 	.word	0x40023c00

08001320 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001320:	b480      	push	{r7}
 8001322:	b083      	sub	sp, #12
 8001324:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8001326:	2300      	movs	r3, #0
 8001328:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800132a:	4b0b      	ldr	r3, [pc, #44]	@ (8001358 <HAL_FLASH_Unlock+0x38>)
 800132c:	691b      	ldr	r3, [r3, #16]
 800132e:	2b00      	cmp	r3, #0
 8001330:	da0b      	bge.n	800134a <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001332:	4b09      	ldr	r3, [pc, #36]	@ (8001358 <HAL_FLASH_Unlock+0x38>)
 8001334:	4a09      	ldr	r2, [pc, #36]	@ (800135c <HAL_FLASH_Unlock+0x3c>)
 8001336:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001338:	4b07      	ldr	r3, [pc, #28]	@ (8001358 <HAL_FLASH_Unlock+0x38>)
 800133a:	4a09      	ldr	r2, [pc, #36]	@ (8001360 <HAL_FLASH_Unlock+0x40>)
 800133c:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800133e:	4b06      	ldr	r3, [pc, #24]	@ (8001358 <HAL_FLASH_Unlock+0x38>)
 8001340:	691b      	ldr	r3, [r3, #16]
 8001342:	2b00      	cmp	r3, #0
 8001344:	da01      	bge.n	800134a <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8001346:	2301      	movs	r3, #1
 8001348:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800134a:	79fb      	ldrb	r3, [r7, #7]
}
 800134c:	4618      	mov	r0, r3
 800134e:	370c      	adds	r7, #12
 8001350:	46bd      	mov	sp, r7
 8001352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001356:	4770      	bx	lr
 8001358:	40023c00 	.word	0x40023c00
 800135c:	45670123 	.word	0x45670123
 8001360:	cdef89ab 	.word	0xcdef89ab

08001364 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8001368:	4b05      	ldr	r3, [pc, #20]	@ (8001380 <HAL_FLASH_Lock+0x1c>)
 800136a:	691b      	ldr	r3, [r3, #16]
 800136c:	4a04      	ldr	r2, [pc, #16]	@ (8001380 <HAL_FLASH_Lock+0x1c>)
 800136e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001372:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 8001374:	2300      	movs	r3, #0
}
 8001376:	4618      	mov	r0, r3
 8001378:	46bd      	mov	sp, r7
 800137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137e:	4770      	bx	lr
 8001380:	40023c00 	.word	0x40023c00

08001384 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b084      	sub	sp, #16
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800138c:	2300      	movs	r3, #0
 800138e:	60fb      	str	r3, [r7, #12]

  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001390:	4b1a      	ldr	r3, [pc, #104]	@ (80013fc <FLASH_WaitForLastOperation+0x78>)
 8001392:	2200      	movs	r2, #0
 8001394:	61da      	str	r2, [r3, #28]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8001396:	f7ff fe2d 	bl	8000ff4 <HAL_GetTick>
 800139a:	60f8      	str	r0, [r7, #12]

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 800139c:	e010      	b.n	80013c0 <FLASH_WaitForLastOperation+0x3c>
  {
    if (Timeout != HAL_MAX_DELAY)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80013a4:	d00c      	beq.n	80013c0 <FLASH_WaitForLastOperation+0x3c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d007      	beq.n	80013bc <FLASH_WaitForLastOperation+0x38>
 80013ac:	f7ff fe22 	bl	8000ff4 <HAL_GetTick>
 80013b0:	4602      	mov	r2, r0
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	1ad3      	subs	r3, r2, r3
 80013b6:	687a      	ldr	r2, [r7, #4]
 80013b8:	429a      	cmp	r2, r3
 80013ba:	d201      	bcs.n	80013c0 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 80013bc:	2303      	movs	r3, #3
 80013be:	e019      	b.n	80013f4 <FLASH_WaitForLastOperation+0x70>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 80013c0:	4b0f      	ldr	r3, [pc, #60]	@ (8001400 <FLASH_WaitForLastOperation+0x7c>)
 80013c2:	68db      	ldr	r3, [r3, #12]
 80013c4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d1e8      	bne.n	800139e <FLASH_WaitForLastOperation+0x1a>
      }
    }
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 80013cc:	4b0c      	ldr	r3, [pc, #48]	@ (8001400 <FLASH_WaitForLastOperation+0x7c>)
 80013ce:	68db      	ldr	r3, [r3, #12]
 80013d0:	f003 0301 	and.w	r3, r3, #1
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d002      	beq.n	80013de <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80013d8:	4b09      	ldr	r3, [pc, #36]	@ (8001400 <FLASH_WaitForLastOperation+0x7c>)
 80013da:	2201      	movs	r2, #1
 80013dc:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                            FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 80013de:	4b08      	ldr	r3, [pc, #32]	@ (8001400 <FLASH_WaitForLastOperation+0x7c>)
 80013e0:	68db      	ldr	r3, [r3, #12]
 80013e2:	f003 03f2 	and.w	r3, r3, #242	@ 0xf2
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d003      	beq.n	80013f2 <FLASH_WaitForLastOperation+0x6e>
                            FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80013ea:	f000 f8a5 	bl	8001538 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80013ee:	2301      	movs	r3, #1
 80013f0:	e000      	b.n	80013f4 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 80013f2:	2300      	movs	r3, #0

}
 80013f4:	4618      	mov	r0, r3
 80013f6:	3710      	adds	r7, #16
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	200001ac 	.word	0x200001ac
 8001400:	40023c00 	.word	0x40023c00

08001404 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8001404:	b480      	push	{r7}
 8001406:	b085      	sub	sp, #20
 8001408:	af00      	add	r7, sp, #0
 800140a:	60f8      	str	r0, [r7, #12]
 800140c:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001410:	4b14      	ldr	r3, [pc, #80]	@ (8001464 <FLASH_Program_DoubleWord+0x60>)
 8001412:	691b      	ldr	r3, [r3, #16]
 8001414:	4a13      	ldr	r2, [pc, #76]	@ (8001464 <FLASH_Program_DoubleWord+0x60>)
 8001416:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800141a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 800141c:	4b11      	ldr	r3, [pc, #68]	@ (8001464 <FLASH_Program_DoubleWord+0x60>)
 800141e:	691b      	ldr	r3, [r3, #16]
 8001420:	4a10      	ldr	r2, [pc, #64]	@ (8001464 <FLASH_Program_DoubleWord+0x60>)
 8001422:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8001426:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001428:	4b0e      	ldr	r3, [pc, #56]	@ (8001464 <FLASH_Program_DoubleWord+0x60>)
 800142a:	691b      	ldr	r3, [r3, #16]
 800142c:	4a0d      	ldr	r2, [pc, #52]	@ (8001464 <FLASH_Program_DoubleWord+0x60>)
 800142e:	f043 0301 	orr.w	r3, r3, #1
 8001432:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t *)Address = (uint32_t)Data;
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	683a      	ldr	r2, [r7, #0]
 8001438:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 800143a:	f3bf 8f6f 	isb	sy
}
 800143e:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t *)(Address + 4) = (uint32_t)(Data >> 32);
 8001440:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001444:	f04f 0200 	mov.w	r2, #0
 8001448:	f04f 0300 	mov.w	r3, #0
 800144c:	000a      	movs	r2, r1
 800144e:	2300      	movs	r3, #0
 8001450:	68f9      	ldr	r1, [r7, #12]
 8001452:	3104      	adds	r1, #4
 8001454:	4613      	mov	r3, r2
 8001456:	600b      	str	r3, [r1, #0]
}
 8001458:	bf00      	nop
 800145a:	3714      	adds	r7, #20
 800145c:	46bd      	mov	sp, r7
 800145e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001462:	4770      	bx	lr
 8001464:	40023c00 	.word	0x40023c00

08001468 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8001468:	b480      	push	{r7}
 800146a:	b083      	sub	sp, #12
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
 8001470:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001472:	4b0d      	ldr	r3, [pc, #52]	@ (80014a8 <FLASH_Program_Word+0x40>)
 8001474:	691b      	ldr	r3, [r3, #16]
 8001476:	4a0c      	ldr	r2, [pc, #48]	@ (80014a8 <FLASH_Program_Word+0x40>)
 8001478:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800147c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 800147e:	4b0a      	ldr	r3, [pc, #40]	@ (80014a8 <FLASH_Program_Word+0x40>)
 8001480:	691b      	ldr	r3, [r3, #16]
 8001482:	4a09      	ldr	r2, [pc, #36]	@ (80014a8 <FLASH_Program_Word+0x40>)
 8001484:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001488:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800148a:	4b07      	ldr	r3, [pc, #28]	@ (80014a8 <FLASH_Program_Word+0x40>)
 800148c:	691b      	ldr	r3, [r3, #16]
 800148e:	4a06      	ldr	r2, [pc, #24]	@ (80014a8 <FLASH_Program_Word+0x40>)
 8001490:	f043 0301 	orr.w	r3, r3, #1
 8001494:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t *)Address = Data;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	683a      	ldr	r2, [r7, #0]
 800149a:	601a      	str	r2, [r3, #0]
}
 800149c:	bf00      	nop
 800149e:	370c      	adds	r7, #12
 80014a0:	46bd      	mov	sp, r7
 80014a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a6:	4770      	bx	lr
 80014a8:	40023c00 	.word	0x40023c00

080014ac <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b083      	sub	sp, #12
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
 80014b4:	460b      	mov	r3, r1
 80014b6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80014b8:	4b0d      	ldr	r3, [pc, #52]	@ (80014f0 <FLASH_Program_HalfWord+0x44>)
 80014ba:	691b      	ldr	r3, [r3, #16]
 80014bc:	4a0c      	ldr	r2, [pc, #48]	@ (80014f0 <FLASH_Program_HalfWord+0x44>)
 80014be:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80014c2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 80014c4:	4b0a      	ldr	r3, [pc, #40]	@ (80014f0 <FLASH_Program_HalfWord+0x44>)
 80014c6:	691b      	ldr	r3, [r3, #16]
 80014c8:	4a09      	ldr	r2, [pc, #36]	@ (80014f0 <FLASH_Program_HalfWord+0x44>)
 80014ca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80014ce:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80014d0:	4b07      	ldr	r3, [pc, #28]	@ (80014f0 <FLASH_Program_HalfWord+0x44>)
 80014d2:	691b      	ldr	r3, [r3, #16]
 80014d4:	4a06      	ldr	r2, [pc, #24]	@ (80014f0 <FLASH_Program_HalfWord+0x44>)
 80014d6:	f043 0301 	orr.w	r3, r3, #1
 80014da:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t *)Address = Data;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	887a      	ldrh	r2, [r7, #2]
 80014e0:	801a      	strh	r2, [r3, #0]
}
 80014e2:	bf00      	nop
 80014e4:	370c      	adds	r7, #12
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr
 80014ee:	bf00      	nop
 80014f0:	40023c00 	.word	0x40023c00

080014f4 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 80014f4:	b480      	push	{r7}
 80014f6:	b083      	sub	sp, #12
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
 80014fc:	460b      	mov	r3, r1
 80014fe:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001500:	4b0c      	ldr	r3, [pc, #48]	@ (8001534 <FLASH_Program_Byte+0x40>)
 8001502:	691b      	ldr	r3, [r3, #16]
 8001504:	4a0b      	ldr	r2, [pc, #44]	@ (8001534 <FLASH_Program_Byte+0x40>)
 8001506:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800150a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 800150c:	4b09      	ldr	r3, [pc, #36]	@ (8001534 <FLASH_Program_Byte+0x40>)
 800150e:	4a09      	ldr	r2, [pc, #36]	@ (8001534 <FLASH_Program_Byte+0x40>)
 8001510:	691b      	ldr	r3, [r3, #16]
 8001512:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001514:	4b07      	ldr	r3, [pc, #28]	@ (8001534 <FLASH_Program_Byte+0x40>)
 8001516:	691b      	ldr	r3, [r3, #16]
 8001518:	4a06      	ldr	r2, [pc, #24]	@ (8001534 <FLASH_Program_Byte+0x40>)
 800151a:	f043 0301 	orr.w	r3, r3, #1
 800151e:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t *)Address = Data;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	78fa      	ldrb	r2, [r7, #3]
 8001524:	701a      	strb	r2, [r3, #0]
}
 8001526:	bf00      	nop
 8001528:	370c      	adds	r7, #12
 800152a:	46bd      	mov	sp, r7
 800152c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001530:	4770      	bx	lr
 8001532:	bf00      	nop
 8001534:	40023c00 	.word	0x40023c00

08001538 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8001538:	b480      	push	{r7}
 800153a:	af00      	add	r7, sp, #0
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 800153c:	4b27      	ldr	r3, [pc, #156]	@ (80015dc <FLASH_SetErrorCode+0xa4>)
 800153e:	68db      	ldr	r3, [r3, #12]
 8001540:	f003 0310 	and.w	r3, r3, #16
 8001544:	2b00      	cmp	r3, #0
 8001546:	d008      	beq.n	800155a <FLASH_SetErrorCode+0x22>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001548:	4b25      	ldr	r3, [pc, #148]	@ (80015e0 <FLASH_SetErrorCode+0xa8>)
 800154a:	69db      	ldr	r3, [r3, #28]
 800154c:	f043 0310 	orr.w	r3, r3, #16
 8001550:	4a23      	ldr	r2, [pc, #140]	@ (80015e0 <FLASH_SetErrorCode+0xa8>)
 8001552:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH write protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8001554:	4b21      	ldr	r3, [pc, #132]	@ (80015dc <FLASH_SetErrorCode+0xa4>)
 8001556:	2210      	movs	r2, #16
 8001558:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800155a:	4b20      	ldr	r3, [pc, #128]	@ (80015dc <FLASH_SetErrorCode+0xa4>)
 800155c:	68db      	ldr	r3, [r3, #12]
 800155e:	f003 0320 	and.w	r3, r3, #32
 8001562:	2b00      	cmp	r3, #0
 8001564:	d008      	beq.n	8001578 <FLASH_SetErrorCode+0x40>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8001566:	4b1e      	ldr	r3, [pc, #120]	@ (80015e0 <FLASH_SetErrorCode+0xa8>)
 8001568:	69db      	ldr	r3, [r3, #28]
 800156a:	f043 0308 	orr.w	r3, r3, #8
 800156e:	4a1c      	ldr	r2, [pc, #112]	@ (80015e0 <FLASH_SetErrorCode+0xa8>)
 8001570:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming alignment error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8001572:	4b1a      	ldr	r3, [pc, #104]	@ (80015dc <FLASH_SetErrorCode+0xa4>)
 8001574:	2220      	movs	r2, #32
 8001576:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8001578:	4b18      	ldr	r3, [pc, #96]	@ (80015dc <FLASH_SetErrorCode+0xa4>)
 800157a:	68db      	ldr	r3, [r3, #12]
 800157c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001580:	2b00      	cmp	r3, #0
 8001582:	d008      	beq.n	8001596 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8001584:	4b16      	ldr	r3, [pc, #88]	@ (80015e0 <FLASH_SetErrorCode+0xa8>)
 8001586:	69db      	ldr	r3, [r3, #28]
 8001588:	f043 0304 	orr.w	r3, r3, #4
 800158c:	4a14      	ldr	r2, [pc, #80]	@ (80015e0 <FLASH_SetErrorCode+0xa8>)
 800158e:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8001590:	4b12      	ldr	r3, [pc, #72]	@ (80015dc <FLASH_SetErrorCode+0xa4>)
 8001592:	2240      	movs	r2, #64	@ 0x40
 8001594:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8001596:	4b11      	ldr	r3, [pc, #68]	@ (80015dc <FLASH_SetErrorCode+0xa4>)
 8001598:	68db      	ldr	r3, [r3, #12]
 800159a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d008      	beq.n	80015b4 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 80015a2:	4b0f      	ldr	r3, [pc, #60]	@ (80015e0 <FLASH_SetErrorCode+0xa8>)
 80015a4:	69db      	ldr	r3, [r3, #28]
 80015a6:	f043 0302 	orr.w	r3, r3, #2
 80015aa:	4a0d      	ldr	r2, [pc, #52]	@ (80015e0 <FLASH_SetErrorCode+0xa8>)
 80015ac:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 80015ae:	4b0b      	ldr	r3, [pc, #44]	@ (80015dc <FLASH_SetErrorCode+0xa4>)
 80015b0:	2280      	movs	r2, #128	@ 0x80
 80015b2:	60da      	str	r2, [r3, #12]

    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 80015b4:	4b09      	ldr	r3, [pc, #36]	@ (80015dc <FLASH_SetErrorCode+0xa4>)
 80015b6:	68db      	ldr	r3, [r3, #12]
 80015b8:	f003 0302 	and.w	r3, r3, #2
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d008      	beq.n	80015d2 <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 80015c0:	4b07      	ldr	r3, [pc, #28]	@ (80015e0 <FLASH_SetErrorCode+0xa8>)
 80015c2:	69db      	ldr	r3, [r3, #28]
 80015c4:	f043 0320 	orr.w	r3, r3, #32
 80015c8:	4a05      	ldr	r2, [pc, #20]	@ (80015e0 <FLASH_SetErrorCode+0xa8>)
 80015ca:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 80015cc:	4b03      	ldr	r3, [pc, #12]	@ (80015dc <FLASH_SetErrorCode+0xa4>)
 80015ce:	2202      	movs	r2, #2
 80015d0:	60da      	str	r2, [r3, #12]
  }
}
 80015d2:	bf00      	nop
 80015d4:	46bd      	mov	sp, r7
 80015d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015da:	4770      	bx	lr
 80015dc:	40023c00 	.word	0x40023c00
 80015e0:	200001ac 	.word	0x200001ac

080015e4 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b084      	sub	sp, #16
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
 80015ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80015ee:	2301      	movs	r3, #1
 80015f0:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 80015f2:	2300      	movs	r3, #0
 80015f4:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80015f6:	4b31      	ldr	r3, [pc, #196]	@ (80016bc <HAL_FLASHEx_Erase+0xd8>)
 80015f8:	7e1b      	ldrb	r3, [r3, #24]
 80015fa:	2b01      	cmp	r3, #1
 80015fc:	d101      	bne.n	8001602 <HAL_FLASHEx_Erase+0x1e>
 80015fe:	2302      	movs	r3, #2
 8001600:	e058      	b.n	80016b4 <HAL_FLASHEx_Erase+0xd0>
 8001602:	4b2e      	ldr	r3, [pc, #184]	@ (80016bc <HAL_FLASHEx_Erase+0xd8>)
 8001604:	2201      	movs	r2, #1
 8001606:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001608:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800160c:	f7ff feba 	bl	8001384 <FLASH_WaitForLastOperation>
 8001610:	4603      	mov	r3, r0
 8001612:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8001614:	7bfb      	ldrb	r3, [r7, #15]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d148      	bne.n	80016ac <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001620:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	2b01      	cmp	r3, #1
 8001628:	d115      	bne.n	8001656 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	691b      	ldr	r3, [r3, #16]
 800162e:	b2da      	uxtb	r2, r3
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	4619      	mov	r1, r3
 8001636:	4610      	mov	r0, r2
 8001638:	f000 f844 	bl	80016c4 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800163c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001640:	f7ff fea0 	bl	8001384 <FLASH_WaitForLastOperation>
 8001644:	4603      	mov	r3, r0
 8001646:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8001648:	4b1d      	ldr	r3, [pc, #116]	@ (80016c0 <HAL_FLASHEx_Erase+0xdc>)
 800164a:	691b      	ldr	r3, [r3, #16]
 800164c:	4a1c      	ldr	r2, [pc, #112]	@ (80016c0 <HAL_FLASHEx_Erase+0xdc>)
 800164e:	f023 0304 	bic.w	r3, r3, #4
 8001652:	6113      	str	r3, [r2, #16]
 8001654:	e028      	b.n	80016a8 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	689b      	ldr	r3, [r3, #8]
 800165a:	60bb      	str	r3, [r7, #8]
 800165c:	e01c      	b.n	8001698 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	691b      	ldr	r3, [r3, #16]
 8001662:	b2db      	uxtb	r3, r3
 8001664:	4619      	mov	r1, r3
 8001666:	68b8      	ldr	r0, [r7, #8]
 8001668:	f000 f850 	bl	800170c <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800166c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001670:	f7ff fe88 	bl	8001384 <FLASH_WaitForLastOperation>
 8001674:	4603      	mov	r3, r0
 8001676:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8001678:	4b11      	ldr	r3, [pc, #68]	@ (80016c0 <HAL_FLASHEx_Erase+0xdc>)
 800167a:	691b      	ldr	r3, [r3, #16]
 800167c:	4a10      	ldr	r2, [pc, #64]	@ (80016c0 <HAL_FLASHEx_Erase+0xdc>)
 800167e:	f023 03fa 	bic.w	r3, r3, #250	@ 0xfa
 8001682:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8001684:	7bfb      	ldrb	r3, [r7, #15]
 8001686:	2b00      	cmp	r3, #0
 8001688:	d003      	beq.n	8001692 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	68ba      	ldr	r2, [r7, #8]
 800168e:	601a      	str	r2, [r3, #0]
          break;
 8001690:	e00a      	b.n	80016a8 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8001692:	68bb      	ldr	r3, [r7, #8]
 8001694:	3301      	adds	r3, #1
 8001696:	60bb      	str	r3, [r7, #8]
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	68da      	ldr	r2, [r3, #12]
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	689b      	ldr	r3, [r3, #8]
 80016a0:	4413      	add	r3, r2
 80016a2:	68ba      	ldr	r2, [r7, #8]
 80016a4:	429a      	cmp	r2, r3
 80016a6:	d3da      	bcc.n	800165e <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 80016a8:	f000 f878 	bl	800179c <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80016ac:	4b03      	ldr	r3, [pc, #12]	@ (80016bc <HAL_FLASHEx_Erase+0xd8>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	761a      	strb	r2, [r3, #24]

  return status;
 80016b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80016b4:	4618      	mov	r0, r3
 80016b6:	3710      	adds	r7, #16
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	200001ac 	.word	0x200001ac
 80016c0:	40023c00 	.word	0x40023c00

080016c4 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b083      	sub	sp, #12
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	4603      	mov	r3, r0
 80016cc:	6039      	str	r1, [r7, #0]
 80016ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80016d0:	4b0d      	ldr	r3, [pc, #52]	@ (8001708 <FLASH_MassErase+0x44>)
 80016d2:	691b      	ldr	r3, [r3, #16]
 80016d4:	4a0c      	ldr	r2, [pc, #48]	@ (8001708 <FLASH_MassErase+0x44>)
 80016d6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80016da:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 80016dc:	4b0a      	ldr	r3, [pc, #40]	@ (8001708 <FLASH_MassErase+0x44>)
 80016de:	691b      	ldr	r3, [r3, #16]
 80016e0:	4a09      	ldr	r2, [pc, #36]	@ (8001708 <FLASH_MassErase+0x44>)
 80016e2:	f043 0304 	orr.w	r3, r3, #4
 80016e6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 80016e8:	4b07      	ldr	r3, [pc, #28]	@ (8001708 <FLASH_MassErase+0x44>)
 80016ea:	691a      	ldr	r2, [r3, #16]
 80016ec:	79fb      	ldrb	r3, [r7, #7]
 80016ee:	021b      	lsls	r3, r3, #8
 80016f0:	4313      	orrs	r3, r2
 80016f2:	4a05      	ldr	r2, [pc, #20]	@ (8001708 <FLASH_MassErase+0x44>)
 80016f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80016f8:	6113      	str	r3, [r2, #16]
}
 80016fa:	bf00      	nop
 80016fc:	370c      	adds	r7, #12
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr
 8001706:	bf00      	nop
 8001708:	40023c00 	.word	0x40023c00

0800170c <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 800170c:	b480      	push	{r7}
 800170e:	b085      	sub	sp, #20
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
 8001714:	460b      	mov	r3, r1
 8001716:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8001718:	2300      	movs	r3, #0
 800171a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 800171c:	78fb      	ldrb	r3, [r7, #3]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d102      	bne.n	8001728 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8001722:	2300      	movs	r3, #0
 8001724:	60fb      	str	r3, [r7, #12]
 8001726:	e010      	b.n	800174a <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8001728:	78fb      	ldrb	r3, [r7, #3]
 800172a:	2b01      	cmp	r3, #1
 800172c:	d103      	bne.n	8001736 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800172e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001732:	60fb      	str	r3, [r7, #12]
 8001734:	e009      	b.n	800174a <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8001736:	78fb      	ldrb	r3, [r7, #3]
 8001738:	2b02      	cmp	r3, #2
 800173a:	d103      	bne.n	8001744 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 800173c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001740:	60fb      	str	r3, [r7, #12]
 8001742:	e002      	b.n	800174a <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8001744:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001748:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800174a:	4b13      	ldr	r3, [pc, #76]	@ (8001798 <FLASH_Erase_Sector+0x8c>)
 800174c:	691b      	ldr	r3, [r3, #16]
 800174e:	4a12      	ldr	r2, [pc, #72]	@ (8001798 <FLASH_Erase_Sector+0x8c>)
 8001750:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001754:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8001756:	4b10      	ldr	r3, [pc, #64]	@ (8001798 <FLASH_Erase_Sector+0x8c>)
 8001758:	691a      	ldr	r2, [r3, #16]
 800175a:	490f      	ldr	r1, [pc, #60]	@ (8001798 <FLASH_Erase_Sector+0x8c>)
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	4313      	orrs	r3, r2
 8001760:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8001762:	4b0d      	ldr	r3, [pc, #52]	@ (8001798 <FLASH_Erase_Sector+0x8c>)
 8001764:	691b      	ldr	r3, [r3, #16]
 8001766:	4a0c      	ldr	r2, [pc, #48]	@ (8001798 <FLASH_Erase_Sector+0x8c>)
 8001768:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800176c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800176e:	4b0a      	ldr	r3, [pc, #40]	@ (8001798 <FLASH_Erase_Sector+0x8c>)
 8001770:	691a      	ldr	r2, [r3, #16]
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	00db      	lsls	r3, r3, #3
 8001776:	4313      	orrs	r3, r2
 8001778:	4a07      	ldr	r2, [pc, #28]	@ (8001798 <FLASH_Erase_Sector+0x8c>)
 800177a:	f043 0302 	orr.w	r3, r3, #2
 800177e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8001780:	4b05      	ldr	r3, [pc, #20]	@ (8001798 <FLASH_Erase_Sector+0x8c>)
 8001782:	691b      	ldr	r3, [r3, #16]
 8001784:	4a04      	ldr	r2, [pc, #16]	@ (8001798 <FLASH_Erase_Sector+0x8c>)
 8001786:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800178a:	6113      	str	r3, [r2, #16]
}
 800178c:	bf00      	nop
 800178e:	3714      	adds	r7, #20
 8001790:	46bd      	mov	sp, r7
 8001792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001796:	4770      	bx	lr
 8001798:	40023c00 	.word	0x40023c00

0800179c <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 800179c:	b480      	push	{r7}
 800179e:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 80017a0:	4b20      	ldr	r3, [pc, #128]	@ (8001824 <FLASH_FlushCaches+0x88>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d017      	beq.n	80017dc <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80017ac:	4b1d      	ldr	r3, [pc, #116]	@ (8001824 <FLASH_FlushCaches+0x88>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a1c      	ldr	r2, [pc, #112]	@ (8001824 <FLASH_FlushCaches+0x88>)
 80017b2:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80017b6:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80017b8:	4b1a      	ldr	r3, [pc, #104]	@ (8001824 <FLASH_FlushCaches+0x88>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a19      	ldr	r2, [pc, #100]	@ (8001824 <FLASH_FlushCaches+0x88>)
 80017be:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80017c2:	6013      	str	r3, [r2, #0]
 80017c4:	4b17      	ldr	r3, [pc, #92]	@ (8001824 <FLASH_FlushCaches+0x88>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4a16      	ldr	r2, [pc, #88]	@ (8001824 <FLASH_FlushCaches+0x88>)
 80017ca:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80017ce:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80017d0:	4b14      	ldr	r3, [pc, #80]	@ (8001824 <FLASH_FlushCaches+0x88>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a13      	ldr	r2, [pc, #76]	@ (8001824 <FLASH_FlushCaches+0x88>)
 80017d6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80017da:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 80017dc:	4b11      	ldr	r3, [pc, #68]	@ (8001824 <FLASH_FlushCaches+0x88>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d017      	beq.n	8001818 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 80017e8:	4b0e      	ldr	r3, [pc, #56]	@ (8001824 <FLASH_FlushCaches+0x88>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4a0d      	ldr	r2, [pc, #52]	@ (8001824 <FLASH_FlushCaches+0x88>)
 80017ee:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80017f2:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80017f4:	4b0b      	ldr	r3, [pc, #44]	@ (8001824 <FLASH_FlushCaches+0x88>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a0a      	ldr	r2, [pc, #40]	@ (8001824 <FLASH_FlushCaches+0x88>)
 80017fa:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80017fe:	6013      	str	r3, [r2, #0]
 8001800:	4b08      	ldr	r3, [pc, #32]	@ (8001824 <FLASH_FlushCaches+0x88>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4a07      	ldr	r2, [pc, #28]	@ (8001824 <FLASH_FlushCaches+0x88>)
 8001806:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800180a:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800180c:	4b05      	ldr	r3, [pc, #20]	@ (8001824 <FLASH_FlushCaches+0x88>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a04      	ldr	r2, [pc, #16]	@ (8001824 <FLASH_FlushCaches+0x88>)
 8001812:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001816:	6013      	str	r3, [r2, #0]
  }
}
 8001818:	bf00      	nop
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr
 8001822:	bf00      	nop
 8001824:	40023c00 	.word	0x40023c00

08001828 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001828:	b480      	push	{r7}
 800182a:	b089      	sub	sp, #36	@ 0x24
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
 8001830:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001832:	2300      	movs	r3, #0
 8001834:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001836:	2300      	movs	r3, #0
 8001838:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800183a:	2300      	movs	r3, #0
 800183c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800183e:	2300      	movs	r3, #0
 8001840:	61fb      	str	r3, [r7, #28]
 8001842:	e16b      	b.n	8001b1c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001844:	2201      	movs	r2, #1
 8001846:	69fb      	ldr	r3, [r7, #28]
 8001848:	fa02 f303 	lsl.w	r3, r2, r3
 800184c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	697a      	ldr	r2, [r7, #20]
 8001854:	4013      	ands	r3, r2
 8001856:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001858:	693a      	ldr	r2, [r7, #16]
 800185a:	697b      	ldr	r3, [r7, #20]
 800185c:	429a      	cmp	r2, r3
 800185e:	f040 815a 	bne.w	8001b16 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	f003 0303 	and.w	r3, r3, #3
 800186a:	2b01      	cmp	r3, #1
 800186c:	d005      	beq.n	800187a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001876:	2b02      	cmp	r3, #2
 8001878:	d130      	bne.n	80018dc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	689b      	ldr	r3, [r3, #8]
 800187e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001880:	69fb      	ldr	r3, [r7, #28]
 8001882:	005b      	lsls	r3, r3, #1
 8001884:	2203      	movs	r2, #3
 8001886:	fa02 f303 	lsl.w	r3, r2, r3
 800188a:	43db      	mvns	r3, r3
 800188c:	69ba      	ldr	r2, [r7, #24]
 800188e:	4013      	ands	r3, r2
 8001890:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	68da      	ldr	r2, [r3, #12]
 8001896:	69fb      	ldr	r3, [r7, #28]
 8001898:	005b      	lsls	r3, r3, #1
 800189a:	fa02 f303 	lsl.w	r3, r2, r3
 800189e:	69ba      	ldr	r2, [r7, #24]
 80018a0:	4313      	orrs	r3, r2
 80018a2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	69ba      	ldr	r2, [r7, #24]
 80018a8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80018b0:	2201      	movs	r2, #1
 80018b2:	69fb      	ldr	r3, [r7, #28]
 80018b4:	fa02 f303 	lsl.w	r3, r2, r3
 80018b8:	43db      	mvns	r3, r3
 80018ba:	69ba      	ldr	r2, [r7, #24]
 80018bc:	4013      	ands	r3, r2
 80018be:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	091b      	lsrs	r3, r3, #4
 80018c6:	f003 0201 	and.w	r2, r3, #1
 80018ca:	69fb      	ldr	r3, [r7, #28]
 80018cc:	fa02 f303 	lsl.w	r3, r2, r3
 80018d0:	69ba      	ldr	r2, [r7, #24]
 80018d2:	4313      	orrs	r3, r2
 80018d4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	69ba      	ldr	r2, [r7, #24]
 80018da:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	f003 0303 	and.w	r3, r3, #3
 80018e4:	2b03      	cmp	r3, #3
 80018e6:	d017      	beq.n	8001918 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	68db      	ldr	r3, [r3, #12]
 80018ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80018ee:	69fb      	ldr	r3, [r7, #28]
 80018f0:	005b      	lsls	r3, r3, #1
 80018f2:	2203      	movs	r2, #3
 80018f4:	fa02 f303 	lsl.w	r3, r2, r3
 80018f8:	43db      	mvns	r3, r3
 80018fa:	69ba      	ldr	r2, [r7, #24]
 80018fc:	4013      	ands	r3, r2
 80018fe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	689a      	ldr	r2, [r3, #8]
 8001904:	69fb      	ldr	r3, [r7, #28]
 8001906:	005b      	lsls	r3, r3, #1
 8001908:	fa02 f303 	lsl.w	r3, r2, r3
 800190c:	69ba      	ldr	r2, [r7, #24]
 800190e:	4313      	orrs	r3, r2
 8001910:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	69ba      	ldr	r2, [r7, #24]
 8001916:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	f003 0303 	and.w	r3, r3, #3
 8001920:	2b02      	cmp	r3, #2
 8001922:	d123      	bne.n	800196c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001924:	69fb      	ldr	r3, [r7, #28]
 8001926:	08da      	lsrs	r2, r3, #3
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	3208      	adds	r2, #8
 800192c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001930:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001932:	69fb      	ldr	r3, [r7, #28]
 8001934:	f003 0307 	and.w	r3, r3, #7
 8001938:	009b      	lsls	r3, r3, #2
 800193a:	220f      	movs	r2, #15
 800193c:	fa02 f303 	lsl.w	r3, r2, r3
 8001940:	43db      	mvns	r3, r3
 8001942:	69ba      	ldr	r2, [r7, #24]
 8001944:	4013      	ands	r3, r2
 8001946:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	691a      	ldr	r2, [r3, #16]
 800194c:	69fb      	ldr	r3, [r7, #28]
 800194e:	f003 0307 	and.w	r3, r3, #7
 8001952:	009b      	lsls	r3, r3, #2
 8001954:	fa02 f303 	lsl.w	r3, r2, r3
 8001958:	69ba      	ldr	r2, [r7, #24]
 800195a:	4313      	orrs	r3, r2
 800195c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800195e:	69fb      	ldr	r3, [r7, #28]
 8001960:	08da      	lsrs	r2, r3, #3
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	3208      	adds	r2, #8
 8001966:	69b9      	ldr	r1, [r7, #24]
 8001968:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001972:	69fb      	ldr	r3, [r7, #28]
 8001974:	005b      	lsls	r3, r3, #1
 8001976:	2203      	movs	r2, #3
 8001978:	fa02 f303 	lsl.w	r3, r2, r3
 800197c:	43db      	mvns	r3, r3
 800197e:	69ba      	ldr	r2, [r7, #24]
 8001980:	4013      	ands	r3, r2
 8001982:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	f003 0203 	and.w	r2, r3, #3
 800198c:	69fb      	ldr	r3, [r7, #28]
 800198e:	005b      	lsls	r3, r3, #1
 8001990:	fa02 f303 	lsl.w	r3, r2, r3
 8001994:	69ba      	ldr	r2, [r7, #24]
 8001996:	4313      	orrs	r3, r2
 8001998:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	69ba      	ldr	r2, [r7, #24]
 800199e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	f000 80b4 	beq.w	8001b16 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019ae:	2300      	movs	r3, #0
 80019b0:	60fb      	str	r3, [r7, #12]
 80019b2:	4b60      	ldr	r3, [pc, #384]	@ (8001b34 <HAL_GPIO_Init+0x30c>)
 80019b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019b6:	4a5f      	ldr	r2, [pc, #380]	@ (8001b34 <HAL_GPIO_Init+0x30c>)
 80019b8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80019bc:	6453      	str	r3, [r2, #68]	@ 0x44
 80019be:	4b5d      	ldr	r3, [pc, #372]	@ (8001b34 <HAL_GPIO_Init+0x30c>)
 80019c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019c2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80019c6:	60fb      	str	r3, [r7, #12]
 80019c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80019ca:	4a5b      	ldr	r2, [pc, #364]	@ (8001b38 <HAL_GPIO_Init+0x310>)
 80019cc:	69fb      	ldr	r3, [r7, #28]
 80019ce:	089b      	lsrs	r3, r3, #2
 80019d0:	3302      	adds	r3, #2
 80019d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80019d8:	69fb      	ldr	r3, [r7, #28]
 80019da:	f003 0303 	and.w	r3, r3, #3
 80019de:	009b      	lsls	r3, r3, #2
 80019e0:	220f      	movs	r2, #15
 80019e2:	fa02 f303 	lsl.w	r3, r2, r3
 80019e6:	43db      	mvns	r3, r3
 80019e8:	69ba      	ldr	r2, [r7, #24]
 80019ea:	4013      	ands	r3, r2
 80019ec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	4a52      	ldr	r2, [pc, #328]	@ (8001b3c <HAL_GPIO_Init+0x314>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d02b      	beq.n	8001a4e <HAL_GPIO_Init+0x226>
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	4a51      	ldr	r2, [pc, #324]	@ (8001b40 <HAL_GPIO_Init+0x318>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d025      	beq.n	8001a4a <HAL_GPIO_Init+0x222>
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	4a50      	ldr	r2, [pc, #320]	@ (8001b44 <HAL_GPIO_Init+0x31c>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d01f      	beq.n	8001a46 <HAL_GPIO_Init+0x21e>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	4a4f      	ldr	r2, [pc, #316]	@ (8001b48 <HAL_GPIO_Init+0x320>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d019      	beq.n	8001a42 <HAL_GPIO_Init+0x21a>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	4a4e      	ldr	r2, [pc, #312]	@ (8001b4c <HAL_GPIO_Init+0x324>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d013      	beq.n	8001a3e <HAL_GPIO_Init+0x216>
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	4a4d      	ldr	r2, [pc, #308]	@ (8001b50 <HAL_GPIO_Init+0x328>)
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d00d      	beq.n	8001a3a <HAL_GPIO_Init+0x212>
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	4a4c      	ldr	r2, [pc, #304]	@ (8001b54 <HAL_GPIO_Init+0x32c>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d007      	beq.n	8001a36 <HAL_GPIO_Init+0x20e>
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	4a4b      	ldr	r2, [pc, #300]	@ (8001b58 <HAL_GPIO_Init+0x330>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d101      	bne.n	8001a32 <HAL_GPIO_Init+0x20a>
 8001a2e:	2307      	movs	r3, #7
 8001a30:	e00e      	b.n	8001a50 <HAL_GPIO_Init+0x228>
 8001a32:	2308      	movs	r3, #8
 8001a34:	e00c      	b.n	8001a50 <HAL_GPIO_Init+0x228>
 8001a36:	2306      	movs	r3, #6
 8001a38:	e00a      	b.n	8001a50 <HAL_GPIO_Init+0x228>
 8001a3a:	2305      	movs	r3, #5
 8001a3c:	e008      	b.n	8001a50 <HAL_GPIO_Init+0x228>
 8001a3e:	2304      	movs	r3, #4
 8001a40:	e006      	b.n	8001a50 <HAL_GPIO_Init+0x228>
 8001a42:	2303      	movs	r3, #3
 8001a44:	e004      	b.n	8001a50 <HAL_GPIO_Init+0x228>
 8001a46:	2302      	movs	r3, #2
 8001a48:	e002      	b.n	8001a50 <HAL_GPIO_Init+0x228>
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	e000      	b.n	8001a50 <HAL_GPIO_Init+0x228>
 8001a4e:	2300      	movs	r3, #0
 8001a50:	69fa      	ldr	r2, [r7, #28]
 8001a52:	f002 0203 	and.w	r2, r2, #3
 8001a56:	0092      	lsls	r2, r2, #2
 8001a58:	4093      	lsls	r3, r2
 8001a5a:	69ba      	ldr	r2, [r7, #24]
 8001a5c:	4313      	orrs	r3, r2
 8001a5e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a60:	4935      	ldr	r1, [pc, #212]	@ (8001b38 <HAL_GPIO_Init+0x310>)
 8001a62:	69fb      	ldr	r3, [r7, #28]
 8001a64:	089b      	lsrs	r3, r3, #2
 8001a66:	3302      	adds	r3, #2
 8001a68:	69ba      	ldr	r2, [r7, #24]
 8001a6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a6e:	4b3b      	ldr	r3, [pc, #236]	@ (8001b5c <HAL_GPIO_Init+0x334>)
 8001a70:	689b      	ldr	r3, [r3, #8]
 8001a72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a74:	693b      	ldr	r3, [r7, #16]
 8001a76:	43db      	mvns	r3, r3
 8001a78:	69ba      	ldr	r2, [r7, #24]
 8001a7a:	4013      	ands	r3, r2
 8001a7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d003      	beq.n	8001a92 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001a8a:	69ba      	ldr	r2, [r7, #24]
 8001a8c:	693b      	ldr	r3, [r7, #16]
 8001a8e:	4313      	orrs	r3, r2
 8001a90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a92:	4a32      	ldr	r2, [pc, #200]	@ (8001b5c <HAL_GPIO_Init+0x334>)
 8001a94:	69bb      	ldr	r3, [r7, #24]
 8001a96:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a98:	4b30      	ldr	r3, [pc, #192]	@ (8001b5c <HAL_GPIO_Init+0x334>)
 8001a9a:	68db      	ldr	r3, [r3, #12]
 8001a9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a9e:	693b      	ldr	r3, [r7, #16]
 8001aa0:	43db      	mvns	r3, r3
 8001aa2:	69ba      	ldr	r2, [r7, #24]
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d003      	beq.n	8001abc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001ab4:	69ba      	ldr	r2, [r7, #24]
 8001ab6:	693b      	ldr	r3, [r7, #16]
 8001ab8:	4313      	orrs	r3, r2
 8001aba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001abc:	4a27      	ldr	r2, [pc, #156]	@ (8001b5c <HAL_GPIO_Init+0x334>)
 8001abe:	69bb      	ldr	r3, [r7, #24]
 8001ac0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001ac2:	4b26      	ldr	r3, [pc, #152]	@ (8001b5c <HAL_GPIO_Init+0x334>)
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ac8:	693b      	ldr	r3, [r7, #16]
 8001aca:	43db      	mvns	r3, r3
 8001acc:	69ba      	ldr	r2, [r7, #24]
 8001ace:	4013      	ands	r3, r2
 8001ad0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d003      	beq.n	8001ae6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001ade:	69ba      	ldr	r2, [r7, #24]
 8001ae0:	693b      	ldr	r3, [r7, #16]
 8001ae2:	4313      	orrs	r3, r2
 8001ae4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ae6:	4a1d      	ldr	r2, [pc, #116]	@ (8001b5c <HAL_GPIO_Init+0x334>)
 8001ae8:	69bb      	ldr	r3, [r7, #24]
 8001aea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001aec:	4b1b      	ldr	r3, [pc, #108]	@ (8001b5c <HAL_GPIO_Init+0x334>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001af2:	693b      	ldr	r3, [r7, #16]
 8001af4:	43db      	mvns	r3, r3
 8001af6:	69ba      	ldr	r2, [r7, #24]
 8001af8:	4013      	ands	r3, r2
 8001afa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d003      	beq.n	8001b10 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001b08:	69ba      	ldr	r2, [r7, #24]
 8001b0a:	693b      	ldr	r3, [r7, #16]
 8001b0c:	4313      	orrs	r3, r2
 8001b0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b10:	4a12      	ldr	r2, [pc, #72]	@ (8001b5c <HAL_GPIO_Init+0x334>)
 8001b12:	69bb      	ldr	r3, [r7, #24]
 8001b14:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b16:	69fb      	ldr	r3, [r7, #28]
 8001b18:	3301      	adds	r3, #1
 8001b1a:	61fb      	str	r3, [r7, #28]
 8001b1c:	69fb      	ldr	r3, [r7, #28]
 8001b1e:	2b0f      	cmp	r3, #15
 8001b20:	f67f ae90 	bls.w	8001844 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001b24:	bf00      	nop
 8001b26:	bf00      	nop
 8001b28:	3724      	adds	r7, #36	@ 0x24
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b30:	4770      	bx	lr
 8001b32:	bf00      	nop
 8001b34:	40023800 	.word	0x40023800
 8001b38:	40013800 	.word	0x40013800
 8001b3c:	40020000 	.word	0x40020000
 8001b40:	40020400 	.word	0x40020400
 8001b44:	40020800 	.word	0x40020800
 8001b48:	40020c00 	.word	0x40020c00
 8001b4c:	40021000 	.word	0x40021000
 8001b50:	40021400 	.word	0x40021400
 8001b54:	40021800 	.word	0x40021800
 8001b58:	40021c00 	.word	0x40021c00
 8001b5c:	40013c00 	.word	0x40013c00

08001b60 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b085      	sub	sp, #20
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
 8001b68:	460b      	mov	r3, r1
 8001b6a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	691a      	ldr	r2, [r3, #16]
 8001b70:	887b      	ldrh	r3, [r7, #2]
 8001b72:	4013      	ands	r3, r2
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d002      	beq.n	8001b7e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	73fb      	strb	r3, [r7, #15]
 8001b7c:	e001      	b.n	8001b82 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001b82:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b84:	4618      	mov	r0, r3
 8001b86:	3714      	adds	r7, #20
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8e:	4770      	bx	lr

08001b90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b083      	sub	sp, #12
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
 8001b98:	460b      	mov	r3, r1
 8001b9a:	807b      	strh	r3, [r7, #2]
 8001b9c:	4613      	mov	r3, r2
 8001b9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ba0:	787b      	ldrb	r3, [r7, #1]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d003      	beq.n	8001bae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ba6:	887a      	ldrh	r2, [r7, #2]
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001bac:	e003      	b.n	8001bb6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001bae:	887b      	ldrh	r3, [r7, #2]
 8001bb0:	041a      	lsls	r2, r3, #16
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	619a      	str	r2, [r3, #24]
}
 8001bb6:	bf00      	nop
 8001bb8:	370c      	adds	r7, #12
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr

08001bc2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001bc2:	b580      	push	{r7, lr}
 8001bc4:	b086      	sub	sp, #24
 8001bc6:	af02      	add	r7, sp, #8
 8001bc8:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d101      	bne.n	8001bd4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	e101      	b.n	8001dd8 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8001be0:	b2db      	uxtb	r3, r3
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d106      	bne.n	8001bf4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	2200      	movs	r2, #0
 8001bea:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001bee:	6878      	ldr	r0, [r7, #4]
 8001bf0:	f005 fcbc 	bl	800756c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2203      	movs	r2, #3
 8001bf8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001bfc:	68bb      	ldr	r3, [r7, #8]
 8001bfe:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001c02:	d102      	bne.n	8001c0a <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2200      	movs	r2, #0
 8001c08:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f002 f87f 	bl	8003d12 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6818      	ldr	r0, [r3, #0]
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	7c1a      	ldrb	r2, [r3, #16]
 8001c1c:	f88d 2000 	strb.w	r2, [sp]
 8001c20:	3304      	adds	r3, #4
 8001c22:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001c24:	f001 ff5e 	bl	8003ae4 <USB_CoreInit>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d005      	beq.n	8001c3a <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2202      	movs	r2, #2
 8001c32:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001c36:	2301      	movs	r3, #1
 8001c38:	e0ce      	b.n	8001dd8 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	2100      	movs	r1, #0
 8001c40:	4618      	mov	r0, r3
 8001c42:	f002 f877 	bl	8003d34 <USB_SetCurrentMode>
 8001c46:	4603      	mov	r3, r0
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d005      	beq.n	8001c58 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2202      	movs	r2, #2
 8001c50:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001c54:	2301      	movs	r3, #1
 8001c56:	e0bf      	b.n	8001dd8 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c58:	2300      	movs	r3, #0
 8001c5a:	73fb      	strb	r3, [r7, #15]
 8001c5c:	e04a      	b.n	8001cf4 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001c5e:	7bfa      	ldrb	r2, [r7, #15]
 8001c60:	6879      	ldr	r1, [r7, #4]
 8001c62:	4613      	mov	r3, r2
 8001c64:	00db      	lsls	r3, r3, #3
 8001c66:	4413      	add	r3, r2
 8001c68:	009b      	lsls	r3, r3, #2
 8001c6a:	440b      	add	r3, r1
 8001c6c:	3315      	adds	r3, #21
 8001c6e:	2201      	movs	r2, #1
 8001c70:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001c72:	7bfa      	ldrb	r2, [r7, #15]
 8001c74:	6879      	ldr	r1, [r7, #4]
 8001c76:	4613      	mov	r3, r2
 8001c78:	00db      	lsls	r3, r3, #3
 8001c7a:	4413      	add	r3, r2
 8001c7c:	009b      	lsls	r3, r3, #2
 8001c7e:	440b      	add	r3, r1
 8001c80:	3314      	adds	r3, #20
 8001c82:	7bfa      	ldrb	r2, [r7, #15]
 8001c84:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001c86:	7bfa      	ldrb	r2, [r7, #15]
 8001c88:	7bfb      	ldrb	r3, [r7, #15]
 8001c8a:	b298      	uxth	r0, r3
 8001c8c:	6879      	ldr	r1, [r7, #4]
 8001c8e:	4613      	mov	r3, r2
 8001c90:	00db      	lsls	r3, r3, #3
 8001c92:	4413      	add	r3, r2
 8001c94:	009b      	lsls	r3, r3, #2
 8001c96:	440b      	add	r3, r1
 8001c98:	332e      	adds	r3, #46	@ 0x2e
 8001c9a:	4602      	mov	r2, r0
 8001c9c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001c9e:	7bfa      	ldrb	r2, [r7, #15]
 8001ca0:	6879      	ldr	r1, [r7, #4]
 8001ca2:	4613      	mov	r3, r2
 8001ca4:	00db      	lsls	r3, r3, #3
 8001ca6:	4413      	add	r3, r2
 8001ca8:	009b      	lsls	r3, r3, #2
 8001caa:	440b      	add	r3, r1
 8001cac:	3318      	adds	r3, #24
 8001cae:	2200      	movs	r2, #0
 8001cb0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001cb2:	7bfa      	ldrb	r2, [r7, #15]
 8001cb4:	6879      	ldr	r1, [r7, #4]
 8001cb6:	4613      	mov	r3, r2
 8001cb8:	00db      	lsls	r3, r3, #3
 8001cba:	4413      	add	r3, r2
 8001cbc:	009b      	lsls	r3, r3, #2
 8001cbe:	440b      	add	r3, r1
 8001cc0:	331c      	adds	r3, #28
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001cc6:	7bfa      	ldrb	r2, [r7, #15]
 8001cc8:	6879      	ldr	r1, [r7, #4]
 8001cca:	4613      	mov	r3, r2
 8001ccc:	00db      	lsls	r3, r3, #3
 8001cce:	4413      	add	r3, r2
 8001cd0:	009b      	lsls	r3, r3, #2
 8001cd2:	440b      	add	r3, r1
 8001cd4:	3320      	adds	r3, #32
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001cda:	7bfa      	ldrb	r2, [r7, #15]
 8001cdc:	6879      	ldr	r1, [r7, #4]
 8001cde:	4613      	mov	r3, r2
 8001ce0:	00db      	lsls	r3, r3, #3
 8001ce2:	4413      	add	r3, r2
 8001ce4:	009b      	lsls	r3, r3, #2
 8001ce6:	440b      	add	r3, r1
 8001ce8:	3324      	adds	r3, #36	@ 0x24
 8001cea:	2200      	movs	r2, #0
 8001cec:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001cee:	7bfb      	ldrb	r3, [r7, #15]
 8001cf0:	3301      	adds	r3, #1
 8001cf2:	73fb      	strb	r3, [r7, #15]
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	791b      	ldrb	r3, [r3, #4]
 8001cf8:	7bfa      	ldrb	r2, [r7, #15]
 8001cfa:	429a      	cmp	r2, r3
 8001cfc:	d3af      	bcc.n	8001c5e <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001cfe:	2300      	movs	r3, #0
 8001d00:	73fb      	strb	r3, [r7, #15]
 8001d02:	e044      	b.n	8001d8e <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001d04:	7bfa      	ldrb	r2, [r7, #15]
 8001d06:	6879      	ldr	r1, [r7, #4]
 8001d08:	4613      	mov	r3, r2
 8001d0a:	00db      	lsls	r3, r3, #3
 8001d0c:	4413      	add	r3, r2
 8001d0e:	009b      	lsls	r3, r3, #2
 8001d10:	440b      	add	r3, r1
 8001d12:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8001d16:	2200      	movs	r2, #0
 8001d18:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001d1a:	7bfa      	ldrb	r2, [r7, #15]
 8001d1c:	6879      	ldr	r1, [r7, #4]
 8001d1e:	4613      	mov	r3, r2
 8001d20:	00db      	lsls	r3, r3, #3
 8001d22:	4413      	add	r3, r2
 8001d24:	009b      	lsls	r3, r3, #2
 8001d26:	440b      	add	r3, r1
 8001d28:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8001d2c:	7bfa      	ldrb	r2, [r7, #15]
 8001d2e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001d30:	7bfa      	ldrb	r2, [r7, #15]
 8001d32:	6879      	ldr	r1, [r7, #4]
 8001d34:	4613      	mov	r3, r2
 8001d36:	00db      	lsls	r3, r3, #3
 8001d38:	4413      	add	r3, r2
 8001d3a:	009b      	lsls	r3, r3, #2
 8001d3c:	440b      	add	r3, r1
 8001d3e:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001d42:	2200      	movs	r2, #0
 8001d44:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001d46:	7bfa      	ldrb	r2, [r7, #15]
 8001d48:	6879      	ldr	r1, [r7, #4]
 8001d4a:	4613      	mov	r3, r2
 8001d4c:	00db      	lsls	r3, r3, #3
 8001d4e:	4413      	add	r3, r2
 8001d50:	009b      	lsls	r3, r3, #2
 8001d52:	440b      	add	r3, r1
 8001d54:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8001d58:	2200      	movs	r2, #0
 8001d5a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001d5c:	7bfa      	ldrb	r2, [r7, #15]
 8001d5e:	6879      	ldr	r1, [r7, #4]
 8001d60:	4613      	mov	r3, r2
 8001d62:	00db      	lsls	r3, r3, #3
 8001d64:	4413      	add	r3, r2
 8001d66:	009b      	lsls	r3, r3, #2
 8001d68:	440b      	add	r3, r1
 8001d6a:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8001d6e:	2200      	movs	r2, #0
 8001d70:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001d72:	7bfa      	ldrb	r2, [r7, #15]
 8001d74:	6879      	ldr	r1, [r7, #4]
 8001d76:	4613      	mov	r3, r2
 8001d78:	00db      	lsls	r3, r3, #3
 8001d7a:	4413      	add	r3, r2
 8001d7c:	009b      	lsls	r3, r3, #2
 8001d7e:	440b      	add	r3, r1
 8001d80:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8001d84:	2200      	movs	r2, #0
 8001d86:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d88:	7bfb      	ldrb	r3, [r7, #15]
 8001d8a:	3301      	adds	r3, #1
 8001d8c:	73fb      	strb	r3, [r7, #15]
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	791b      	ldrb	r3, [r3, #4]
 8001d92:	7bfa      	ldrb	r2, [r7, #15]
 8001d94:	429a      	cmp	r2, r3
 8001d96:	d3b5      	bcc.n	8001d04 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6818      	ldr	r0, [r3, #0]
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	7c1a      	ldrb	r2, [r3, #16]
 8001da0:	f88d 2000 	strb.w	r2, [sp]
 8001da4:	3304      	adds	r3, #4
 8001da6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001da8:	f002 f810 	bl	8003dcc <USB_DevInit>
 8001dac:	4603      	mov	r3, r0
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d005      	beq.n	8001dbe <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2202      	movs	r2, #2
 8001db6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	e00c      	b.n	8001dd8 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	f003 f85a 	bl	8004e8a <USB_DevDisconnect>

  return HAL_OK;
 8001dd6:	2300      	movs	r3, #0
}
 8001dd8:	4618      	mov	r0, r3
 8001dda:	3710      	adds	r7, #16
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd80      	pop	{r7, pc}

08001de0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b084      	sub	sp, #16
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001df4:	2b01      	cmp	r3, #1
 8001df6:	d101      	bne.n	8001dfc <HAL_PCD_Start+0x1c>
 8001df8:	2302      	movs	r3, #2
 8001dfa:	e022      	b.n	8001e42 <HAL_PCD_Start+0x62>
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2201      	movs	r2, #1
 8001e00:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	68db      	ldr	r3, [r3, #12]
 8001e08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d009      	beq.n	8001e24 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8001e14:	2b01      	cmp	r3, #1
 8001e16:	d105      	bne.n	8001e24 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e1c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f001 ff61 	bl	8003cf0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4618      	mov	r0, r3
 8001e34:	f003 f808 	bl	8004e48 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001e40:	2300      	movs	r3, #0
}
 8001e42:	4618      	mov	r0, r3
 8001e44:	3710      	adds	r7, #16
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}

08001e4a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001e4a:	b590      	push	{r4, r7, lr}
 8001e4c:	b08d      	sub	sp, #52	@ 0x34
 8001e4e:	af00      	add	r7, sp, #0
 8001e50:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001e58:	6a3b      	ldr	r3, [r7, #32]
 8001e5a:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4618      	mov	r0, r3
 8001e62:	f003 f8c6 	bl	8004ff2 <USB_GetMode>
 8001e66:	4603      	mov	r3, r0
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	f040 848c 	bne.w	8002786 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4618      	mov	r0, r3
 8001e74:	f003 f82a 	bl	8004ecc <USB_ReadInterrupts>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	f000 8482 	beq.w	8002784 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001e80:	69fb      	ldr	r3, [r7, #28]
 8001e82:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001e86:	689b      	ldr	r3, [r3, #8]
 8001e88:	0a1b      	lsrs	r3, r3, #8
 8001e8a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f003 f817 	bl	8004ecc <USB_ReadInterrupts>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	f003 0302 	and.w	r3, r3, #2
 8001ea4:	2b02      	cmp	r3, #2
 8001ea6:	d107      	bne.n	8001eb8 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	695a      	ldr	r2, [r3, #20]
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f002 0202 	and.w	r2, r2, #2
 8001eb6:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f003 f805 	bl	8004ecc <USB_ReadInterrupts>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	f003 0310 	and.w	r3, r3, #16
 8001ec8:	2b10      	cmp	r3, #16
 8001eca:	d161      	bne.n	8001f90 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	699a      	ldr	r2, [r3, #24]
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f022 0210 	bic.w	r2, r2, #16
 8001eda:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001edc:	6a3b      	ldr	r3, [r7, #32]
 8001ede:	6a1b      	ldr	r3, [r3, #32]
 8001ee0:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001ee2:	69bb      	ldr	r3, [r7, #24]
 8001ee4:	f003 020f 	and.w	r2, r3, #15
 8001ee8:	4613      	mov	r3, r2
 8001eea:	00db      	lsls	r3, r3, #3
 8001eec:	4413      	add	r3, r2
 8001eee:	009b      	lsls	r3, r3, #2
 8001ef0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001ef4:	687a      	ldr	r2, [r7, #4]
 8001ef6:	4413      	add	r3, r2
 8001ef8:	3304      	adds	r3, #4
 8001efa:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001efc:	69bb      	ldr	r3, [r7, #24]
 8001efe:	0c5b      	lsrs	r3, r3, #17
 8001f00:	f003 030f 	and.w	r3, r3, #15
 8001f04:	2b02      	cmp	r3, #2
 8001f06:	d124      	bne.n	8001f52 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001f08:	69ba      	ldr	r2, [r7, #24]
 8001f0a:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8001f0e:	4013      	ands	r3, r2
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d035      	beq.n	8001f80 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001f14:	697b      	ldr	r3, [r7, #20]
 8001f16:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001f18:	69bb      	ldr	r3, [r7, #24]
 8001f1a:	091b      	lsrs	r3, r3, #4
 8001f1c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001f1e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001f22:	b29b      	uxth	r3, r3
 8001f24:	461a      	mov	r2, r3
 8001f26:	6a38      	ldr	r0, [r7, #32]
 8001f28:	f002 fe3c 	bl	8004ba4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	68da      	ldr	r2, [r3, #12]
 8001f30:	69bb      	ldr	r3, [r7, #24]
 8001f32:	091b      	lsrs	r3, r3, #4
 8001f34:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001f38:	441a      	add	r2, r3
 8001f3a:	697b      	ldr	r3, [r7, #20]
 8001f3c:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001f3e:	697b      	ldr	r3, [r7, #20]
 8001f40:	695a      	ldr	r2, [r3, #20]
 8001f42:	69bb      	ldr	r3, [r7, #24]
 8001f44:	091b      	lsrs	r3, r3, #4
 8001f46:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001f4a:	441a      	add	r2, r3
 8001f4c:	697b      	ldr	r3, [r7, #20]
 8001f4e:	615a      	str	r2, [r3, #20]
 8001f50:	e016      	b.n	8001f80 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001f52:	69bb      	ldr	r3, [r7, #24]
 8001f54:	0c5b      	lsrs	r3, r3, #17
 8001f56:	f003 030f 	and.w	r3, r3, #15
 8001f5a:	2b06      	cmp	r3, #6
 8001f5c:	d110      	bne.n	8001f80 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001f64:	2208      	movs	r2, #8
 8001f66:	4619      	mov	r1, r3
 8001f68:	6a38      	ldr	r0, [r7, #32]
 8001f6a:	f002 fe1b 	bl	8004ba4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001f6e:	697b      	ldr	r3, [r7, #20]
 8001f70:	695a      	ldr	r2, [r3, #20]
 8001f72:	69bb      	ldr	r3, [r7, #24]
 8001f74:	091b      	lsrs	r3, r3, #4
 8001f76:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001f7a:	441a      	add	r2, r3
 8001f7c:	697b      	ldr	r3, [r7, #20]
 8001f7e:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	699a      	ldr	r2, [r3, #24]
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f042 0210 	orr.w	r2, r2, #16
 8001f8e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4618      	mov	r0, r3
 8001f96:	f002 ff99 	bl	8004ecc <USB_ReadInterrupts>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001fa0:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8001fa4:	f040 80a7 	bne.w	80020f6 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f002 ff9e 	bl	8004ef2 <USB_ReadDevAllOutEpInterrupt>
 8001fb6:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8001fb8:	e099      	b.n	80020ee <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001fba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001fbc:	f003 0301 	and.w	r3, r3, #1
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	f000 808e 	beq.w	80020e2 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001fcc:	b2d2      	uxtb	r2, r2
 8001fce:	4611      	mov	r1, r2
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f002 ffc2 	bl	8004f5a <USB_ReadDevOutEPInterrupt>
 8001fd6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001fd8:	693b      	ldr	r3, [r7, #16]
 8001fda:	f003 0301 	and.w	r3, r3, #1
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d00c      	beq.n	8001ffc <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001fe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fe4:	015a      	lsls	r2, r3, #5
 8001fe6:	69fb      	ldr	r3, [r7, #28]
 8001fe8:	4413      	add	r3, r2
 8001fea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001fee:	461a      	mov	r2, r3
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001ff4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001ff6:	6878      	ldr	r0, [r7, #4]
 8001ff8:	f000 fea4 	bl	8002d44 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001ffc:	693b      	ldr	r3, [r7, #16]
 8001ffe:	f003 0308 	and.w	r3, r3, #8
 8002002:	2b00      	cmp	r3, #0
 8002004:	d00c      	beq.n	8002020 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002006:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002008:	015a      	lsls	r2, r3, #5
 800200a:	69fb      	ldr	r3, [r7, #28]
 800200c:	4413      	add	r3, r2
 800200e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002012:	461a      	mov	r2, r3
 8002014:	2308      	movs	r3, #8
 8002016:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002018:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800201a:	6878      	ldr	r0, [r7, #4]
 800201c:	f000 ff7a 	bl	8002f14 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002020:	693b      	ldr	r3, [r7, #16]
 8002022:	f003 0310 	and.w	r3, r3, #16
 8002026:	2b00      	cmp	r3, #0
 8002028:	d008      	beq.n	800203c <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800202a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800202c:	015a      	lsls	r2, r3, #5
 800202e:	69fb      	ldr	r3, [r7, #28]
 8002030:	4413      	add	r3, r2
 8002032:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002036:	461a      	mov	r2, r3
 8002038:	2310      	movs	r3, #16
 800203a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800203c:	693b      	ldr	r3, [r7, #16]
 800203e:	f003 0302 	and.w	r3, r3, #2
 8002042:	2b00      	cmp	r3, #0
 8002044:	d030      	beq.n	80020a8 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002046:	6a3b      	ldr	r3, [r7, #32]
 8002048:	695b      	ldr	r3, [r3, #20]
 800204a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800204e:	2b80      	cmp	r3, #128	@ 0x80
 8002050:	d109      	bne.n	8002066 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002052:	69fb      	ldr	r3, [r7, #28]
 8002054:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	69fa      	ldr	r2, [r7, #28]
 800205c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002060:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002064:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002066:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002068:	4613      	mov	r3, r2
 800206a:	00db      	lsls	r3, r3, #3
 800206c:	4413      	add	r3, r2
 800206e:	009b      	lsls	r3, r3, #2
 8002070:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002074:	687a      	ldr	r2, [r7, #4]
 8002076:	4413      	add	r3, r2
 8002078:	3304      	adds	r3, #4
 800207a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	78db      	ldrb	r3, [r3, #3]
 8002080:	2b01      	cmp	r3, #1
 8002082:	d108      	bne.n	8002096 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002084:	697b      	ldr	r3, [r7, #20]
 8002086:	2200      	movs	r2, #0
 8002088:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800208a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800208c:	b2db      	uxtb	r3, r3
 800208e:	4619      	mov	r1, r3
 8002090:	6878      	ldr	r0, [r7, #4]
 8002092:	f005 fb71 	bl	8007778 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002096:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002098:	015a      	lsls	r2, r3, #5
 800209a:	69fb      	ldr	r3, [r7, #28]
 800209c:	4413      	add	r3, r2
 800209e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80020a2:	461a      	mov	r2, r3
 80020a4:	2302      	movs	r3, #2
 80020a6:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80020a8:	693b      	ldr	r3, [r7, #16]
 80020aa:	f003 0320 	and.w	r3, r3, #32
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d008      	beq.n	80020c4 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80020b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020b4:	015a      	lsls	r2, r3, #5
 80020b6:	69fb      	ldr	r3, [r7, #28]
 80020b8:	4413      	add	r3, r2
 80020ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80020be:	461a      	mov	r2, r3
 80020c0:	2320      	movs	r3, #32
 80020c2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80020c4:	693b      	ldr	r3, [r7, #16]
 80020c6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d009      	beq.n	80020e2 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80020ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020d0:	015a      	lsls	r2, r3, #5
 80020d2:	69fb      	ldr	r3, [r7, #28]
 80020d4:	4413      	add	r3, r2
 80020d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80020da:	461a      	mov	r2, r3
 80020dc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80020e0:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80020e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020e4:	3301      	adds	r3, #1
 80020e6:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80020e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020ea:	085b      	lsrs	r3, r3, #1
 80020ec:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80020ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	f47f af62 	bne.w	8001fba <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4618      	mov	r0, r3
 80020fc:	f002 fee6 	bl	8004ecc <USB_ReadInterrupts>
 8002100:	4603      	mov	r3, r0
 8002102:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002106:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800210a:	f040 80db 	bne.w	80022c4 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4618      	mov	r0, r3
 8002114:	f002 ff07 	bl	8004f26 <USB_ReadDevAllInEpInterrupt>
 8002118:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 800211a:	2300      	movs	r3, #0
 800211c:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 800211e:	e0cd      	b.n	80022bc <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002120:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002122:	f003 0301 	and.w	r3, r3, #1
 8002126:	2b00      	cmp	r3, #0
 8002128:	f000 80c2 	beq.w	80022b0 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002132:	b2d2      	uxtb	r2, r2
 8002134:	4611      	mov	r1, r2
 8002136:	4618      	mov	r0, r3
 8002138:	f002 ff2d 	bl	8004f96 <USB_ReadDevInEPInterrupt>
 800213c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800213e:	693b      	ldr	r3, [r7, #16]
 8002140:	f003 0301 	and.w	r3, r3, #1
 8002144:	2b00      	cmp	r3, #0
 8002146:	d057      	beq.n	80021f8 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002148:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800214a:	f003 030f 	and.w	r3, r3, #15
 800214e:	2201      	movs	r2, #1
 8002150:	fa02 f303 	lsl.w	r3, r2, r3
 8002154:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002156:	69fb      	ldr	r3, [r7, #28]
 8002158:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800215c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	43db      	mvns	r3, r3
 8002162:	69f9      	ldr	r1, [r7, #28]
 8002164:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002168:	4013      	ands	r3, r2
 800216a:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800216c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800216e:	015a      	lsls	r2, r3, #5
 8002170:	69fb      	ldr	r3, [r7, #28]
 8002172:	4413      	add	r3, r2
 8002174:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002178:	461a      	mov	r2, r3
 800217a:	2301      	movs	r3, #1
 800217c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	799b      	ldrb	r3, [r3, #6]
 8002182:	2b01      	cmp	r3, #1
 8002184:	d132      	bne.n	80021ec <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002186:	6879      	ldr	r1, [r7, #4]
 8002188:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800218a:	4613      	mov	r3, r2
 800218c:	00db      	lsls	r3, r3, #3
 800218e:	4413      	add	r3, r2
 8002190:	009b      	lsls	r3, r3, #2
 8002192:	440b      	add	r3, r1
 8002194:	3320      	adds	r3, #32
 8002196:	6819      	ldr	r1, [r3, #0]
 8002198:	6878      	ldr	r0, [r7, #4]
 800219a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800219c:	4613      	mov	r3, r2
 800219e:	00db      	lsls	r3, r3, #3
 80021a0:	4413      	add	r3, r2
 80021a2:	009b      	lsls	r3, r3, #2
 80021a4:	4403      	add	r3, r0
 80021a6:	331c      	adds	r3, #28
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4419      	add	r1, r3
 80021ac:	6878      	ldr	r0, [r7, #4]
 80021ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80021b0:	4613      	mov	r3, r2
 80021b2:	00db      	lsls	r3, r3, #3
 80021b4:	4413      	add	r3, r2
 80021b6:	009b      	lsls	r3, r3, #2
 80021b8:	4403      	add	r3, r0
 80021ba:	3320      	adds	r3, #32
 80021bc:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80021be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d113      	bne.n	80021ec <HAL_PCD_IRQHandler+0x3a2>
 80021c4:	6879      	ldr	r1, [r7, #4]
 80021c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80021c8:	4613      	mov	r3, r2
 80021ca:	00db      	lsls	r3, r3, #3
 80021cc:	4413      	add	r3, r2
 80021ce:	009b      	lsls	r3, r3, #2
 80021d0:	440b      	add	r3, r1
 80021d2:	3324      	adds	r3, #36	@ 0x24
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d108      	bne.n	80021ec <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6818      	ldr	r0, [r3, #0]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80021e4:	461a      	mov	r2, r3
 80021e6:	2101      	movs	r1, #1
 80021e8:	f002 ff34 	bl	8005054 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80021ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021ee:	b2db      	uxtb	r3, r3
 80021f0:	4619      	mov	r1, r3
 80021f2:	6878      	ldr	r0, [r7, #4]
 80021f4:	f005 fa3b 	bl	800766e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80021f8:	693b      	ldr	r3, [r7, #16]
 80021fa:	f003 0308 	and.w	r3, r3, #8
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d008      	beq.n	8002214 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002202:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002204:	015a      	lsls	r2, r3, #5
 8002206:	69fb      	ldr	r3, [r7, #28]
 8002208:	4413      	add	r3, r2
 800220a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800220e:	461a      	mov	r2, r3
 8002210:	2308      	movs	r3, #8
 8002212:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002214:	693b      	ldr	r3, [r7, #16]
 8002216:	f003 0310 	and.w	r3, r3, #16
 800221a:	2b00      	cmp	r3, #0
 800221c:	d008      	beq.n	8002230 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800221e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002220:	015a      	lsls	r2, r3, #5
 8002222:	69fb      	ldr	r3, [r7, #28]
 8002224:	4413      	add	r3, r2
 8002226:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800222a:	461a      	mov	r2, r3
 800222c:	2310      	movs	r3, #16
 800222e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002230:	693b      	ldr	r3, [r7, #16]
 8002232:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002236:	2b00      	cmp	r3, #0
 8002238:	d008      	beq.n	800224c <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800223a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800223c:	015a      	lsls	r2, r3, #5
 800223e:	69fb      	ldr	r3, [r7, #28]
 8002240:	4413      	add	r3, r2
 8002242:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002246:	461a      	mov	r2, r3
 8002248:	2340      	movs	r3, #64	@ 0x40
 800224a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800224c:	693b      	ldr	r3, [r7, #16]
 800224e:	f003 0302 	and.w	r3, r3, #2
 8002252:	2b00      	cmp	r3, #0
 8002254:	d023      	beq.n	800229e <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002256:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002258:	6a38      	ldr	r0, [r7, #32]
 800225a:	f001 ff1b 	bl	8004094 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800225e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002260:	4613      	mov	r3, r2
 8002262:	00db      	lsls	r3, r3, #3
 8002264:	4413      	add	r3, r2
 8002266:	009b      	lsls	r3, r3, #2
 8002268:	3310      	adds	r3, #16
 800226a:	687a      	ldr	r2, [r7, #4]
 800226c:	4413      	add	r3, r2
 800226e:	3304      	adds	r3, #4
 8002270:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002272:	697b      	ldr	r3, [r7, #20]
 8002274:	78db      	ldrb	r3, [r3, #3]
 8002276:	2b01      	cmp	r3, #1
 8002278:	d108      	bne.n	800228c <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800227a:	697b      	ldr	r3, [r7, #20]
 800227c:	2200      	movs	r2, #0
 800227e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002280:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002282:	b2db      	uxtb	r3, r3
 8002284:	4619      	mov	r1, r3
 8002286:	6878      	ldr	r0, [r7, #4]
 8002288:	f005 fa88 	bl	800779c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800228c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800228e:	015a      	lsls	r2, r3, #5
 8002290:	69fb      	ldr	r3, [r7, #28]
 8002292:	4413      	add	r3, r2
 8002294:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002298:	461a      	mov	r2, r3
 800229a:	2302      	movs	r3, #2
 800229c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800229e:	693b      	ldr	r3, [r7, #16]
 80022a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d003      	beq.n	80022b0 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80022a8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80022aa:	6878      	ldr	r0, [r7, #4]
 80022ac:	f000 fcbd 	bl	8002c2a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80022b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022b2:	3301      	adds	r3, #1
 80022b4:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80022b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022b8:	085b      	lsrs	r3, r3, #1
 80022ba:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80022bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022be:	2b00      	cmp	r3, #0
 80022c0:	f47f af2e 	bne.w	8002120 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4618      	mov	r0, r3
 80022ca:	f002 fdff 	bl	8004ecc <USB_ReadInterrupts>
 80022ce:	4603      	mov	r3, r0
 80022d0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80022d4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80022d8:	d122      	bne.n	8002320 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80022da:	69fb      	ldr	r3, [r7, #28]
 80022dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	69fa      	ldr	r2, [r7, #28]
 80022e4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80022e8:	f023 0301 	bic.w	r3, r3, #1
 80022ec:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80022f4:	2b01      	cmp	r3, #1
 80022f6:	d108      	bne.n	800230a <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2200      	movs	r2, #0
 80022fc:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002300:	2100      	movs	r1, #0
 8002302:	6878      	ldr	r0, [r7, #4]
 8002304:	f000 fea4 	bl	8003050 <HAL_PCDEx_LPM_Callback>
 8002308:	e002      	b.n	8002310 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800230a:	6878      	ldr	r0, [r7, #4]
 800230c:	f005 fa26 	bl	800775c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	695a      	ldr	r2, [r3, #20]
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 800231e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4618      	mov	r0, r3
 8002326:	f002 fdd1 	bl	8004ecc <USB_ReadInterrupts>
 800232a:	4603      	mov	r3, r0
 800232c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002330:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002334:	d112      	bne.n	800235c <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002336:	69fb      	ldr	r3, [r7, #28]
 8002338:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800233c:	689b      	ldr	r3, [r3, #8]
 800233e:	f003 0301 	and.w	r3, r3, #1
 8002342:	2b01      	cmp	r3, #1
 8002344:	d102      	bne.n	800234c <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002346:	6878      	ldr	r0, [r7, #4]
 8002348:	f005 f9e2 	bl	8007710 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	695a      	ldr	r2, [r3, #20]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 800235a:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4618      	mov	r0, r3
 8002362:	f002 fdb3 	bl	8004ecc <USB_ReadInterrupts>
 8002366:	4603      	mov	r3, r0
 8002368:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800236c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002370:	f040 80b7 	bne.w	80024e2 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002374:	69fb      	ldr	r3, [r7, #28]
 8002376:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	69fa      	ldr	r2, [r7, #28]
 800237e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002382:	f023 0301 	bic.w	r3, r3, #1
 8002386:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	2110      	movs	r1, #16
 800238e:	4618      	mov	r0, r3
 8002390:	f001 fe80 	bl	8004094 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002394:	2300      	movs	r3, #0
 8002396:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002398:	e046      	b.n	8002428 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800239a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800239c:	015a      	lsls	r2, r3, #5
 800239e:	69fb      	ldr	r3, [r7, #28]
 80023a0:	4413      	add	r3, r2
 80023a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80023a6:	461a      	mov	r2, r3
 80023a8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80023ac:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80023ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023b0:	015a      	lsls	r2, r3, #5
 80023b2:	69fb      	ldr	r3, [r7, #28]
 80023b4:	4413      	add	r3, r2
 80023b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80023be:	0151      	lsls	r1, r2, #5
 80023c0:	69fa      	ldr	r2, [r7, #28]
 80023c2:	440a      	add	r2, r1
 80023c4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80023c8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80023cc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80023ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023d0:	015a      	lsls	r2, r3, #5
 80023d2:	69fb      	ldr	r3, [r7, #28]
 80023d4:	4413      	add	r3, r2
 80023d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80023da:	461a      	mov	r2, r3
 80023dc:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80023e0:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80023e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023e4:	015a      	lsls	r2, r3, #5
 80023e6:	69fb      	ldr	r3, [r7, #28]
 80023e8:	4413      	add	r3, r2
 80023ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80023f2:	0151      	lsls	r1, r2, #5
 80023f4:	69fa      	ldr	r2, [r7, #28]
 80023f6:	440a      	add	r2, r1
 80023f8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80023fc:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002400:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002402:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002404:	015a      	lsls	r2, r3, #5
 8002406:	69fb      	ldr	r3, [r7, #28]
 8002408:	4413      	add	r3, r2
 800240a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002412:	0151      	lsls	r1, r2, #5
 8002414:	69fa      	ldr	r2, [r7, #28]
 8002416:	440a      	add	r2, r1
 8002418:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800241c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8002420:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002422:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002424:	3301      	adds	r3, #1
 8002426:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	791b      	ldrb	r3, [r3, #4]
 800242c:	461a      	mov	r2, r3
 800242e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002430:	4293      	cmp	r3, r2
 8002432:	d3b2      	bcc.n	800239a <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002434:	69fb      	ldr	r3, [r7, #28]
 8002436:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800243a:	69db      	ldr	r3, [r3, #28]
 800243c:	69fa      	ldr	r2, [r7, #28]
 800243e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002442:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8002446:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	7bdb      	ldrb	r3, [r3, #15]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d016      	beq.n	800247e <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002450:	69fb      	ldr	r3, [r7, #28]
 8002452:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002456:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800245a:	69fa      	ldr	r2, [r7, #28]
 800245c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002460:	f043 030b 	orr.w	r3, r3, #11
 8002464:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002468:	69fb      	ldr	r3, [r7, #28]
 800246a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800246e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002470:	69fa      	ldr	r2, [r7, #28]
 8002472:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002476:	f043 030b 	orr.w	r3, r3, #11
 800247a:	6453      	str	r3, [r2, #68]	@ 0x44
 800247c:	e015      	b.n	80024aa <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800247e:	69fb      	ldr	r3, [r7, #28]
 8002480:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002484:	695b      	ldr	r3, [r3, #20]
 8002486:	69fa      	ldr	r2, [r7, #28]
 8002488:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800248c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002490:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8002494:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002496:	69fb      	ldr	r3, [r7, #28]
 8002498:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800249c:	691b      	ldr	r3, [r3, #16]
 800249e:	69fa      	ldr	r2, [r7, #28]
 80024a0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80024a4:	f043 030b 	orr.w	r3, r3, #11
 80024a8:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80024aa:	69fb      	ldr	r3, [r7, #28]
 80024ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	69fa      	ldr	r2, [r7, #28]
 80024b4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80024b8:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80024bc:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6818      	ldr	r0, [r3, #0]
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80024cc:	461a      	mov	r2, r3
 80024ce:	f002 fdc1 	bl	8005054 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	695a      	ldr	r2, [r3, #20]
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80024e0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4618      	mov	r0, r3
 80024e8:	f002 fcf0 	bl	8004ecc <USB_ReadInterrupts>
 80024ec:	4603      	mov	r3, r0
 80024ee:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80024f2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80024f6:	d123      	bne.n	8002540 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4618      	mov	r0, r3
 80024fe:	f002 fd86 	bl	800500e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4618      	mov	r0, r3
 8002508:	f001 fe3d 	bl	8004186 <USB_GetDevSpeed>
 800250c:	4603      	mov	r3, r0
 800250e:	461a      	mov	r2, r3
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681c      	ldr	r4, [r3, #0]
 8002518:	f001 fa0a 	bl	8003930 <HAL_RCC_GetHCLKFreq>
 800251c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002522:	461a      	mov	r2, r3
 8002524:	4620      	mov	r0, r4
 8002526:	f001 fb41 	bl	8003bac <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800252a:	6878      	ldr	r0, [r7, #4]
 800252c:	f005 f8c7 	bl	80076be <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	695a      	ldr	r2, [r3, #20]
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 800253e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4618      	mov	r0, r3
 8002546:	f002 fcc1 	bl	8004ecc <USB_ReadInterrupts>
 800254a:	4603      	mov	r3, r0
 800254c:	f003 0308 	and.w	r3, r3, #8
 8002550:	2b08      	cmp	r3, #8
 8002552:	d10a      	bne.n	800256a <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002554:	6878      	ldr	r0, [r7, #4]
 8002556:	f005 f8a4 	bl	80076a2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	695a      	ldr	r2, [r3, #20]
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f002 0208 	and.w	r2, r2, #8
 8002568:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4618      	mov	r0, r3
 8002570:	f002 fcac 	bl	8004ecc <USB_ReadInterrupts>
 8002574:	4603      	mov	r3, r0
 8002576:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800257a:	2b80      	cmp	r3, #128	@ 0x80
 800257c:	d123      	bne.n	80025c6 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800257e:	6a3b      	ldr	r3, [r7, #32]
 8002580:	699b      	ldr	r3, [r3, #24]
 8002582:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002586:	6a3b      	ldr	r3, [r7, #32]
 8002588:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800258a:	2301      	movs	r3, #1
 800258c:	627b      	str	r3, [r7, #36]	@ 0x24
 800258e:	e014      	b.n	80025ba <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002590:	6879      	ldr	r1, [r7, #4]
 8002592:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002594:	4613      	mov	r3, r2
 8002596:	00db      	lsls	r3, r3, #3
 8002598:	4413      	add	r3, r2
 800259a:	009b      	lsls	r3, r3, #2
 800259c:	440b      	add	r3, r1
 800259e:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80025a2:	781b      	ldrb	r3, [r3, #0]
 80025a4:	2b01      	cmp	r3, #1
 80025a6:	d105      	bne.n	80025b4 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80025a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025aa:	b2db      	uxtb	r3, r3
 80025ac:	4619      	mov	r1, r3
 80025ae:	6878      	ldr	r0, [r7, #4]
 80025b0:	f000 fb0a 	bl	8002bc8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80025b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025b6:	3301      	adds	r3, #1
 80025b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	791b      	ldrb	r3, [r3, #4]
 80025be:	461a      	mov	r2, r3
 80025c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d3e4      	bcc.n	8002590 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4618      	mov	r0, r3
 80025cc:	f002 fc7e 	bl	8004ecc <USB_ReadInterrupts>
 80025d0:	4603      	mov	r3, r0
 80025d2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80025d6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80025da:	d13c      	bne.n	8002656 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80025dc:	2301      	movs	r3, #1
 80025de:	627b      	str	r3, [r7, #36]	@ 0x24
 80025e0:	e02b      	b.n	800263a <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80025e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025e4:	015a      	lsls	r2, r3, #5
 80025e6:	69fb      	ldr	r3, [r7, #28]
 80025e8:	4413      	add	r3, r2
 80025ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80025f2:	6879      	ldr	r1, [r7, #4]
 80025f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80025f6:	4613      	mov	r3, r2
 80025f8:	00db      	lsls	r3, r3, #3
 80025fa:	4413      	add	r3, r2
 80025fc:	009b      	lsls	r3, r3, #2
 80025fe:	440b      	add	r3, r1
 8002600:	3318      	adds	r3, #24
 8002602:	781b      	ldrb	r3, [r3, #0]
 8002604:	2b01      	cmp	r3, #1
 8002606:	d115      	bne.n	8002634 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002608:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800260a:	2b00      	cmp	r3, #0
 800260c:	da12      	bge.n	8002634 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800260e:	6879      	ldr	r1, [r7, #4]
 8002610:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002612:	4613      	mov	r3, r2
 8002614:	00db      	lsls	r3, r3, #3
 8002616:	4413      	add	r3, r2
 8002618:	009b      	lsls	r3, r3, #2
 800261a:	440b      	add	r3, r1
 800261c:	3317      	adds	r3, #23
 800261e:	2201      	movs	r2, #1
 8002620:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002622:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002624:	b2db      	uxtb	r3, r3
 8002626:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800262a:	b2db      	uxtb	r3, r3
 800262c:	4619      	mov	r1, r3
 800262e:	6878      	ldr	r0, [r7, #4]
 8002630:	f000 faca 	bl	8002bc8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002634:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002636:	3301      	adds	r3, #1
 8002638:	627b      	str	r3, [r7, #36]	@ 0x24
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	791b      	ldrb	r3, [r3, #4]
 800263e:	461a      	mov	r2, r3
 8002640:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002642:	4293      	cmp	r3, r2
 8002644:	d3cd      	bcc.n	80025e2 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	695a      	ldr	r2, [r3, #20]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8002654:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4618      	mov	r0, r3
 800265c:	f002 fc36 	bl	8004ecc <USB_ReadInterrupts>
 8002660:	4603      	mov	r3, r0
 8002662:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002666:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800266a:	d156      	bne.n	800271a <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800266c:	2301      	movs	r3, #1
 800266e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002670:	e045      	b.n	80026fe <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002672:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002674:	015a      	lsls	r2, r3, #5
 8002676:	69fb      	ldr	r3, [r7, #28]
 8002678:	4413      	add	r3, r2
 800267a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002682:	6879      	ldr	r1, [r7, #4]
 8002684:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002686:	4613      	mov	r3, r2
 8002688:	00db      	lsls	r3, r3, #3
 800268a:	4413      	add	r3, r2
 800268c:	009b      	lsls	r3, r3, #2
 800268e:	440b      	add	r3, r1
 8002690:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002694:	781b      	ldrb	r3, [r3, #0]
 8002696:	2b01      	cmp	r3, #1
 8002698:	d12e      	bne.n	80026f8 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800269a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800269c:	2b00      	cmp	r3, #0
 800269e:	da2b      	bge.n	80026f8 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80026a0:	69bb      	ldr	r3, [r7, #24]
 80026a2:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 80026ac:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80026b0:	429a      	cmp	r2, r3
 80026b2:	d121      	bne.n	80026f8 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80026b4:	6879      	ldr	r1, [r7, #4]
 80026b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80026b8:	4613      	mov	r3, r2
 80026ba:	00db      	lsls	r3, r3, #3
 80026bc:	4413      	add	r3, r2
 80026be:	009b      	lsls	r3, r3, #2
 80026c0:	440b      	add	r3, r1
 80026c2:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80026c6:	2201      	movs	r2, #1
 80026c8:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80026ca:	6a3b      	ldr	r3, [r7, #32]
 80026cc:	699b      	ldr	r3, [r3, #24]
 80026ce:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80026d2:	6a3b      	ldr	r3, [r7, #32]
 80026d4:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80026d6:	6a3b      	ldr	r3, [r7, #32]
 80026d8:	695b      	ldr	r3, [r3, #20]
 80026da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d10a      	bne.n	80026f8 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80026e2:	69fb      	ldr	r3, [r7, #28]
 80026e4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	69fa      	ldr	r2, [r7, #28]
 80026ec:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80026f0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80026f4:	6053      	str	r3, [r2, #4]
            break;
 80026f6:	e008      	b.n	800270a <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80026f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026fa:	3301      	adds	r3, #1
 80026fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	791b      	ldrb	r3, [r3, #4]
 8002702:	461a      	mov	r2, r3
 8002704:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002706:	4293      	cmp	r3, r2
 8002708:	d3b3      	bcc.n	8002672 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	695a      	ldr	r2, [r3, #20]
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8002718:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4618      	mov	r0, r3
 8002720:	f002 fbd4 	bl	8004ecc <USB_ReadInterrupts>
 8002724:	4603      	mov	r3, r0
 8002726:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800272a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800272e:	d10a      	bne.n	8002746 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002730:	6878      	ldr	r0, [r7, #4]
 8002732:	f005 f845 	bl	80077c0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	695a      	ldr	r2, [r3, #20]
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8002744:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4618      	mov	r0, r3
 800274c:	f002 fbbe 	bl	8004ecc <USB_ReadInterrupts>
 8002750:	4603      	mov	r3, r0
 8002752:	f003 0304 	and.w	r3, r3, #4
 8002756:	2b04      	cmp	r3, #4
 8002758:	d115      	bne.n	8002786 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002762:	69bb      	ldr	r3, [r7, #24]
 8002764:	f003 0304 	and.w	r3, r3, #4
 8002768:	2b00      	cmp	r3, #0
 800276a:	d002      	beq.n	8002772 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800276c:	6878      	ldr	r0, [r7, #4]
 800276e:	f005 f835 	bl	80077dc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	6859      	ldr	r1, [r3, #4]
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	69ba      	ldr	r2, [r7, #24]
 800277e:	430a      	orrs	r2, r1
 8002780:	605a      	str	r2, [r3, #4]
 8002782:	e000      	b.n	8002786 <HAL_PCD_IRQHandler+0x93c>
      return;
 8002784:	bf00      	nop
    }
  }
}
 8002786:	3734      	adds	r7, #52	@ 0x34
 8002788:	46bd      	mov	sp, r7
 800278a:	bd90      	pop	{r4, r7, pc}

0800278c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b082      	sub	sp, #8
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
 8002794:	460b      	mov	r3, r1
 8002796:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800279e:	2b01      	cmp	r3, #1
 80027a0:	d101      	bne.n	80027a6 <HAL_PCD_SetAddress+0x1a>
 80027a2:	2302      	movs	r3, #2
 80027a4:	e012      	b.n	80027cc <HAL_PCD_SetAddress+0x40>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2201      	movs	r2, #1
 80027aa:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	78fa      	ldrb	r2, [r7, #3]
 80027b2:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	78fa      	ldrb	r2, [r7, #3]
 80027ba:	4611      	mov	r1, r2
 80027bc:	4618      	mov	r0, r3
 80027be:	f002 fb1d 	bl	8004dfc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2200      	movs	r2, #0
 80027c6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80027ca:	2300      	movs	r3, #0
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	3708      	adds	r7, #8
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bd80      	pop	{r7, pc}

080027d4 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b084      	sub	sp, #16
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
 80027dc:	4608      	mov	r0, r1
 80027de:	4611      	mov	r1, r2
 80027e0:	461a      	mov	r2, r3
 80027e2:	4603      	mov	r3, r0
 80027e4:	70fb      	strb	r3, [r7, #3]
 80027e6:	460b      	mov	r3, r1
 80027e8:	803b      	strh	r3, [r7, #0]
 80027ea:	4613      	mov	r3, r2
 80027ec:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 80027ee:	2300      	movs	r3, #0
 80027f0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80027f2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	da0f      	bge.n	800281a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80027fa:	78fb      	ldrb	r3, [r7, #3]
 80027fc:	f003 020f 	and.w	r2, r3, #15
 8002800:	4613      	mov	r3, r2
 8002802:	00db      	lsls	r3, r3, #3
 8002804:	4413      	add	r3, r2
 8002806:	009b      	lsls	r3, r3, #2
 8002808:	3310      	adds	r3, #16
 800280a:	687a      	ldr	r2, [r7, #4]
 800280c:	4413      	add	r3, r2
 800280e:	3304      	adds	r3, #4
 8002810:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	2201      	movs	r2, #1
 8002816:	705a      	strb	r2, [r3, #1]
 8002818:	e00f      	b.n	800283a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800281a:	78fb      	ldrb	r3, [r7, #3]
 800281c:	f003 020f 	and.w	r2, r3, #15
 8002820:	4613      	mov	r3, r2
 8002822:	00db      	lsls	r3, r3, #3
 8002824:	4413      	add	r3, r2
 8002826:	009b      	lsls	r3, r3, #2
 8002828:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800282c:	687a      	ldr	r2, [r7, #4]
 800282e:	4413      	add	r3, r2
 8002830:	3304      	adds	r3, #4
 8002832:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	2200      	movs	r2, #0
 8002838:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800283a:	78fb      	ldrb	r3, [r7, #3]
 800283c:	f003 030f 	and.w	r3, r3, #15
 8002840:	b2da      	uxtb	r2, r3
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8002846:	883b      	ldrh	r3, [r7, #0]
 8002848:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	78ba      	ldrb	r2, [r7, #2]
 8002854:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	785b      	ldrb	r3, [r3, #1]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d004      	beq.n	8002868 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	781b      	ldrb	r3, [r3, #0]
 8002862:	461a      	mov	r2, r3
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002868:	78bb      	ldrb	r3, [r7, #2]
 800286a:	2b02      	cmp	r3, #2
 800286c:	d102      	bne.n	8002874 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	2200      	movs	r2, #0
 8002872:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800287a:	2b01      	cmp	r3, #1
 800287c:	d101      	bne.n	8002882 <HAL_PCD_EP_Open+0xae>
 800287e:	2302      	movs	r3, #2
 8002880:	e00e      	b.n	80028a0 <HAL_PCD_EP_Open+0xcc>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2201      	movs	r2, #1
 8002886:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	68f9      	ldr	r1, [r7, #12]
 8002890:	4618      	mov	r0, r3
 8002892:	f001 fc9d 	bl	80041d0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2200      	movs	r2, #0
 800289a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 800289e:	7afb      	ldrb	r3, [r7, #11]
}
 80028a0:	4618      	mov	r0, r3
 80028a2:	3710      	adds	r7, #16
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bd80      	pop	{r7, pc}

080028a8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b084      	sub	sp, #16
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
 80028b0:	460b      	mov	r3, r1
 80028b2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80028b4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	da0f      	bge.n	80028dc <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80028bc:	78fb      	ldrb	r3, [r7, #3]
 80028be:	f003 020f 	and.w	r2, r3, #15
 80028c2:	4613      	mov	r3, r2
 80028c4:	00db      	lsls	r3, r3, #3
 80028c6:	4413      	add	r3, r2
 80028c8:	009b      	lsls	r3, r3, #2
 80028ca:	3310      	adds	r3, #16
 80028cc:	687a      	ldr	r2, [r7, #4]
 80028ce:	4413      	add	r3, r2
 80028d0:	3304      	adds	r3, #4
 80028d2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	2201      	movs	r2, #1
 80028d8:	705a      	strb	r2, [r3, #1]
 80028da:	e00f      	b.n	80028fc <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80028dc:	78fb      	ldrb	r3, [r7, #3]
 80028de:	f003 020f 	and.w	r2, r3, #15
 80028e2:	4613      	mov	r3, r2
 80028e4:	00db      	lsls	r3, r3, #3
 80028e6:	4413      	add	r3, r2
 80028e8:	009b      	lsls	r3, r3, #2
 80028ea:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80028ee:	687a      	ldr	r2, [r7, #4]
 80028f0:	4413      	add	r3, r2
 80028f2:	3304      	adds	r3, #4
 80028f4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	2200      	movs	r2, #0
 80028fa:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80028fc:	78fb      	ldrb	r3, [r7, #3]
 80028fe:	f003 030f 	and.w	r3, r3, #15
 8002902:	b2da      	uxtb	r2, r3
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800290e:	2b01      	cmp	r3, #1
 8002910:	d101      	bne.n	8002916 <HAL_PCD_EP_Close+0x6e>
 8002912:	2302      	movs	r3, #2
 8002914:	e00e      	b.n	8002934 <HAL_PCD_EP_Close+0x8c>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2201      	movs	r2, #1
 800291a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	68f9      	ldr	r1, [r7, #12]
 8002924:	4618      	mov	r0, r3
 8002926:	f001 fcdb 	bl	80042e0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2200      	movs	r2, #0
 800292e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8002932:	2300      	movs	r3, #0
}
 8002934:	4618      	mov	r0, r3
 8002936:	3710      	adds	r7, #16
 8002938:	46bd      	mov	sp, r7
 800293a:	bd80      	pop	{r7, pc}

0800293c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b086      	sub	sp, #24
 8002940:	af00      	add	r7, sp, #0
 8002942:	60f8      	str	r0, [r7, #12]
 8002944:	607a      	str	r2, [r7, #4]
 8002946:	603b      	str	r3, [r7, #0]
 8002948:	460b      	mov	r3, r1
 800294a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800294c:	7afb      	ldrb	r3, [r7, #11]
 800294e:	f003 020f 	and.w	r2, r3, #15
 8002952:	4613      	mov	r3, r2
 8002954:	00db      	lsls	r3, r3, #3
 8002956:	4413      	add	r3, r2
 8002958:	009b      	lsls	r3, r3, #2
 800295a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800295e:	68fa      	ldr	r2, [r7, #12]
 8002960:	4413      	add	r3, r2
 8002962:	3304      	adds	r3, #4
 8002964:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	687a      	ldr	r2, [r7, #4]
 800296a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800296c:	697b      	ldr	r3, [r7, #20]
 800296e:	683a      	ldr	r2, [r7, #0]
 8002970:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002972:	697b      	ldr	r3, [r7, #20]
 8002974:	2200      	movs	r2, #0
 8002976:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8002978:	697b      	ldr	r3, [r7, #20]
 800297a:	2200      	movs	r2, #0
 800297c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800297e:	7afb      	ldrb	r3, [r7, #11]
 8002980:	f003 030f 	and.w	r3, r3, #15
 8002984:	b2da      	uxtb	r2, r3
 8002986:	697b      	ldr	r3, [r7, #20]
 8002988:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	799b      	ldrb	r3, [r3, #6]
 800298e:	2b01      	cmp	r3, #1
 8002990:	d102      	bne.n	8002998 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002992:	687a      	ldr	r2, [r7, #4]
 8002994:	697b      	ldr	r3, [r7, #20]
 8002996:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	6818      	ldr	r0, [r3, #0]
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	799b      	ldrb	r3, [r3, #6]
 80029a0:	461a      	mov	r2, r3
 80029a2:	6979      	ldr	r1, [r7, #20]
 80029a4:	f001 fd78 	bl	8004498 <USB_EPStartXfer>

  return HAL_OK;
 80029a8:	2300      	movs	r3, #0
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	3718      	adds	r7, #24
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}

080029b2 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80029b2:	b480      	push	{r7}
 80029b4:	b083      	sub	sp, #12
 80029b6:	af00      	add	r7, sp, #0
 80029b8:	6078      	str	r0, [r7, #4]
 80029ba:	460b      	mov	r3, r1
 80029bc:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80029be:	78fb      	ldrb	r3, [r7, #3]
 80029c0:	f003 020f 	and.w	r2, r3, #15
 80029c4:	6879      	ldr	r1, [r7, #4]
 80029c6:	4613      	mov	r3, r2
 80029c8:	00db      	lsls	r3, r3, #3
 80029ca:	4413      	add	r3, r2
 80029cc:	009b      	lsls	r3, r3, #2
 80029ce:	440b      	add	r3, r1
 80029d0:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 80029d4:	681b      	ldr	r3, [r3, #0]
}
 80029d6:	4618      	mov	r0, r3
 80029d8:	370c      	adds	r7, #12
 80029da:	46bd      	mov	sp, r7
 80029dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e0:	4770      	bx	lr

080029e2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80029e2:	b580      	push	{r7, lr}
 80029e4:	b086      	sub	sp, #24
 80029e6:	af00      	add	r7, sp, #0
 80029e8:	60f8      	str	r0, [r7, #12]
 80029ea:	607a      	str	r2, [r7, #4]
 80029ec:	603b      	str	r3, [r7, #0]
 80029ee:	460b      	mov	r3, r1
 80029f0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80029f2:	7afb      	ldrb	r3, [r7, #11]
 80029f4:	f003 020f 	and.w	r2, r3, #15
 80029f8:	4613      	mov	r3, r2
 80029fa:	00db      	lsls	r3, r3, #3
 80029fc:	4413      	add	r3, r2
 80029fe:	009b      	lsls	r3, r3, #2
 8002a00:	3310      	adds	r3, #16
 8002a02:	68fa      	ldr	r2, [r7, #12]
 8002a04:	4413      	add	r3, r2
 8002a06:	3304      	adds	r3, #4
 8002a08:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	687a      	ldr	r2, [r7, #4]
 8002a0e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002a10:	697b      	ldr	r3, [r7, #20]
 8002a12:	683a      	ldr	r2, [r7, #0]
 8002a14:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002a16:	697b      	ldr	r3, [r7, #20]
 8002a18:	2200      	movs	r2, #0
 8002a1a:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8002a1c:	697b      	ldr	r3, [r7, #20]
 8002a1e:	2201      	movs	r2, #1
 8002a20:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002a22:	7afb      	ldrb	r3, [r7, #11]
 8002a24:	f003 030f 	and.w	r3, r3, #15
 8002a28:	b2da      	uxtb	r2, r3
 8002a2a:	697b      	ldr	r3, [r7, #20]
 8002a2c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	799b      	ldrb	r3, [r3, #6]
 8002a32:	2b01      	cmp	r3, #1
 8002a34:	d102      	bne.n	8002a3c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002a36:	687a      	ldr	r2, [r7, #4]
 8002a38:	697b      	ldr	r3, [r7, #20]
 8002a3a:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	6818      	ldr	r0, [r3, #0]
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	799b      	ldrb	r3, [r3, #6]
 8002a44:	461a      	mov	r2, r3
 8002a46:	6979      	ldr	r1, [r7, #20]
 8002a48:	f001 fd26 	bl	8004498 <USB_EPStartXfer>

  return HAL_OK;
 8002a4c:	2300      	movs	r3, #0
}
 8002a4e:	4618      	mov	r0, r3
 8002a50:	3718      	adds	r7, #24
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}

08002a56 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002a56:	b580      	push	{r7, lr}
 8002a58:	b084      	sub	sp, #16
 8002a5a:	af00      	add	r7, sp, #0
 8002a5c:	6078      	str	r0, [r7, #4]
 8002a5e:	460b      	mov	r3, r1
 8002a60:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002a62:	78fb      	ldrb	r3, [r7, #3]
 8002a64:	f003 030f 	and.w	r3, r3, #15
 8002a68:	687a      	ldr	r2, [r7, #4]
 8002a6a:	7912      	ldrb	r2, [r2, #4]
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d901      	bls.n	8002a74 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002a70:	2301      	movs	r3, #1
 8002a72:	e04f      	b.n	8002b14 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002a74:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	da0f      	bge.n	8002a9c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a7c:	78fb      	ldrb	r3, [r7, #3]
 8002a7e:	f003 020f 	and.w	r2, r3, #15
 8002a82:	4613      	mov	r3, r2
 8002a84:	00db      	lsls	r3, r3, #3
 8002a86:	4413      	add	r3, r2
 8002a88:	009b      	lsls	r3, r3, #2
 8002a8a:	3310      	adds	r3, #16
 8002a8c:	687a      	ldr	r2, [r7, #4]
 8002a8e:	4413      	add	r3, r2
 8002a90:	3304      	adds	r3, #4
 8002a92:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	2201      	movs	r2, #1
 8002a98:	705a      	strb	r2, [r3, #1]
 8002a9a:	e00d      	b.n	8002ab8 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002a9c:	78fa      	ldrb	r2, [r7, #3]
 8002a9e:	4613      	mov	r3, r2
 8002aa0:	00db      	lsls	r3, r3, #3
 8002aa2:	4413      	add	r3, r2
 8002aa4:	009b      	lsls	r3, r3, #2
 8002aa6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002aaa:	687a      	ldr	r2, [r7, #4]
 8002aac:	4413      	add	r3, r2
 8002aae:	3304      	adds	r3, #4
 8002ab0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	2201      	movs	r2, #1
 8002abc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002abe:	78fb      	ldrb	r3, [r7, #3]
 8002ac0:	f003 030f 	and.w	r3, r3, #15
 8002ac4:	b2da      	uxtb	r2, r3
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002ad0:	2b01      	cmp	r3, #1
 8002ad2:	d101      	bne.n	8002ad8 <HAL_PCD_EP_SetStall+0x82>
 8002ad4:	2302      	movs	r3, #2
 8002ad6:	e01d      	b.n	8002b14 <HAL_PCD_EP_SetStall+0xbe>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2201      	movs	r2, #1
 8002adc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	68f9      	ldr	r1, [r7, #12]
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f002 f8b4 	bl	8004c54 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002aec:	78fb      	ldrb	r3, [r7, #3]
 8002aee:	f003 030f 	and.w	r3, r3, #15
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d109      	bne.n	8002b0a <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6818      	ldr	r0, [r3, #0]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	7999      	ldrb	r1, [r3, #6]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002b04:	461a      	mov	r2, r3
 8002b06:	f002 faa5 	bl	8005054 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002b12:	2300      	movs	r3, #0
}
 8002b14:	4618      	mov	r0, r3
 8002b16:	3710      	adds	r7, #16
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bd80      	pop	{r7, pc}

08002b1c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b084      	sub	sp, #16
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
 8002b24:	460b      	mov	r3, r1
 8002b26:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002b28:	78fb      	ldrb	r3, [r7, #3]
 8002b2a:	f003 030f 	and.w	r3, r3, #15
 8002b2e:	687a      	ldr	r2, [r7, #4]
 8002b30:	7912      	ldrb	r2, [r2, #4]
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d901      	bls.n	8002b3a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002b36:	2301      	movs	r3, #1
 8002b38:	e042      	b.n	8002bc0 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002b3a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	da0f      	bge.n	8002b62 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b42:	78fb      	ldrb	r3, [r7, #3]
 8002b44:	f003 020f 	and.w	r2, r3, #15
 8002b48:	4613      	mov	r3, r2
 8002b4a:	00db      	lsls	r3, r3, #3
 8002b4c:	4413      	add	r3, r2
 8002b4e:	009b      	lsls	r3, r3, #2
 8002b50:	3310      	adds	r3, #16
 8002b52:	687a      	ldr	r2, [r7, #4]
 8002b54:	4413      	add	r3, r2
 8002b56:	3304      	adds	r3, #4
 8002b58:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	2201      	movs	r2, #1
 8002b5e:	705a      	strb	r2, [r3, #1]
 8002b60:	e00f      	b.n	8002b82 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002b62:	78fb      	ldrb	r3, [r7, #3]
 8002b64:	f003 020f 	and.w	r2, r3, #15
 8002b68:	4613      	mov	r3, r2
 8002b6a:	00db      	lsls	r3, r3, #3
 8002b6c:	4413      	add	r3, r2
 8002b6e:	009b      	lsls	r3, r3, #2
 8002b70:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002b74:	687a      	ldr	r2, [r7, #4]
 8002b76:	4413      	add	r3, r2
 8002b78:	3304      	adds	r3, #4
 8002b7a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	2200      	movs	r2, #0
 8002b80:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	2200      	movs	r2, #0
 8002b86:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002b88:	78fb      	ldrb	r3, [r7, #3]
 8002b8a:	f003 030f 	and.w	r3, r3, #15
 8002b8e:	b2da      	uxtb	r2, r3
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002b9a:	2b01      	cmp	r3, #1
 8002b9c:	d101      	bne.n	8002ba2 <HAL_PCD_EP_ClrStall+0x86>
 8002b9e:	2302      	movs	r3, #2
 8002ba0:	e00e      	b.n	8002bc0 <HAL_PCD_EP_ClrStall+0xa4>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2201      	movs	r2, #1
 8002ba6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	68f9      	ldr	r1, [r7, #12]
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	f002 f8bd 	bl	8004d30 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2200      	movs	r2, #0
 8002bba:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002bbe:	2300      	movs	r3, #0
}
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	3710      	adds	r7, #16
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bd80      	pop	{r7, pc}

08002bc8 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b084      	sub	sp, #16
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
 8002bd0:	460b      	mov	r3, r1
 8002bd2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002bd4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	da0c      	bge.n	8002bf6 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002bdc:	78fb      	ldrb	r3, [r7, #3]
 8002bde:	f003 020f 	and.w	r2, r3, #15
 8002be2:	4613      	mov	r3, r2
 8002be4:	00db      	lsls	r3, r3, #3
 8002be6:	4413      	add	r3, r2
 8002be8:	009b      	lsls	r3, r3, #2
 8002bea:	3310      	adds	r3, #16
 8002bec:	687a      	ldr	r2, [r7, #4]
 8002bee:	4413      	add	r3, r2
 8002bf0:	3304      	adds	r3, #4
 8002bf2:	60fb      	str	r3, [r7, #12]
 8002bf4:	e00c      	b.n	8002c10 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002bf6:	78fb      	ldrb	r3, [r7, #3]
 8002bf8:	f003 020f 	and.w	r2, r3, #15
 8002bfc:	4613      	mov	r3, r2
 8002bfe:	00db      	lsls	r3, r3, #3
 8002c00:	4413      	add	r3, r2
 8002c02:	009b      	lsls	r3, r3, #2
 8002c04:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002c08:	687a      	ldr	r2, [r7, #4]
 8002c0a:	4413      	add	r3, r2
 8002c0c:	3304      	adds	r3, #4
 8002c0e:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	68f9      	ldr	r1, [r7, #12]
 8002c16:	4618      	mov	r0, r3
 8002c18:	f001 fedc 	bl	80049d4 <USB_EPStopXfer>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002c20:	7afb      	ldrb	r3, [r7, #11]
}
 8002c22:	4618      	mov	r0, r3
 8002c24:	3710      	adds	r7, #16
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}

08002c2a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002c2a:	b580      	push	{r7, lr}
 8002c2c:	b08a      	sub	sp, #40	@ 0x28
 8002c2e:	af02      	add	r7, sp, #8
 8002c30:	6078      	str	r0, [r7, #4]
 8002c32:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c3a:	697b      	ldr	r3, [r7, #20]
 8002c3c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002c3e:	683a      	ldr	r2, [r7, #0]
 8002c40:	4613      	mov	r3, r2
 8002c42:	00db      	lsls	r3, r3, #3
 8002c44:	4413      	add	r3, r2
 8002c46:	009b      	lsls	r3, r3, #2
 8002c48:	3310      	adds	r3, #16
 8002c4a:	687a      	ldr	r2, [r7, #4]
 8002c4c:	4413      	add	r3, r2
 8002c4e:	3304      	adds	r3, #4
 8002c50:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	695a      	ldr	r2, [r3, #20]
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	691b      	ldr	r3, [r3, #16]
 8002c5a:	429a      	cmp	r2, r3
 8002c5c:	d901      	bls.n	8002c62 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	e06b      	b.n	8002d3a <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	691a      	ldr	r2, [r3, #16]
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	695b      	ldr	r3, [r3, #20]
 8002c6a:	1ad3      	subs	r3, r2, r3
 8002c6c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	689b      	ldr	r3, [r3, #8]
 8002c72:	69fa      	ldr	r2, [r7, #28]
 8002c74:	429a      	cmp	r2, r3
 8002c76:	d902      	bls.n	8002c7e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	689b      	ldr	r3, [r3, #8]
 8002c7c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002c7e:	69fb      	ldr	r3, [r7, #28]
 8002c80:	3303      	adds	r3, #3
 8002c82:	089b      	lsrs	r3, r3, #2
 8002c84:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002c86:	e02a      	b.n	8002cde <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	691a      	ldr	r2, [r3, #16]
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	695b      	ldr	r3, [r3, #20]
 8002c90:	1ad3      	subs	r3, r2, r3
 8002c92:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	689b      	ldr	r3, [r3, #8]
 8002c98:	69fa      	ldr	r2, [r7, #28]
 8002c9a:	429a      	cmp	r2, r3
 8002c9c:	d902      	bls.n	8002ca4 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	689b      	ldr	r3, [r3, #8]
 8002ca2:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002ca4:	69fb      	ldr	r3, [r7, #28]
 8002ca6:	3303      	adds	r3, #3
 8002ca8:	089b      	lsrs	r3, r3, #2
 8002caa:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	68d9      	ldr	r1, [r3, #12]
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	b2da      	uxtb	r2, r3
 8002cb4:	69fb      	ldr	r3, [r7, #28]
 8002cb6:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002cbc:	9300      	str	r3, [sp, #0]
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	6978      	ldr	r0, [r7, #20]
 8002cc2:	f001 ff31 	bl	8004b28 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	68da      	ldr	r2, [r3, #12]
 8002cca:	69fb      	ldr	r3, [r7, #28]
 8002ccc:	441a      	add	r2, r3
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	695a      	ldr	r2, [r3, #20]
 8002cd6:	69fb      	ldr	r3, [r7, #28]
 8002cd8:	441a      	add	r2, r3
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	015a      	lsls	r2, r3, #5
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	4413      	add	r3, r2
 8002ce6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002cea:	699b      	ldr	r3, [r3, #24]
 8002cec:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002cee:	69ba      	ldr	r2, [r7, #24]
 8002cf0:	429a      	cmp	r2, r3
 8002cf2:	d809      	bhi.n	8002d08 <PCD_WriteEmptyTxFifo+0xde>
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	695a      	ldr	r2, [r3, #20]
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002cfc:	429a      	cmp	r2, r3
 8002cfe:	d203      	bcs.n	8002d08 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	691b      	ldr	r3, [r3, #16]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d1bf      	bne.n	8002c88 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	691a      	ldr	r2, [r3, #16]
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	695b      	ldr	r3, [r3, #20]
 8002d10:	429a      	cmp	r2, r3
 8002d12:	d811      	bhi.n	8002d38 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	f003 030f 	and.w	r3, r3, #15
 8002d1a:	2201      	movs	r2, #1
 8002d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d20:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002d22:	693b      	ldr	r3, [r7, #16]
 8002d24:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002d28:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002d2a:	68bb      	ldr	r3, [r7, #8]
 8002d2c:	43db      	mvns	r3, r3
 8002d2e:	6939      	ldr	r1, [r7, #16]
 8002d30:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002d34:	4013      	ands	r3, r2
 8002d36:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8002d38:	2300      	movs	r3, #0
}
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	3720      	adds	r7, #32
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}
	...

08002d44 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b088      	sub	sp, #32
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
 8002d4c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d54:	69fb      	ldr	r3, [r7, #28]
 8002d56:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002d58:	69fb      	ldr	r3, [r7, #28]
 8002d5a:	333c      	adds	r3, #60	@ 0x3c
 8002d5c:	3304      	adds	r3, #4
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	015a      	lsls	r2, r3, #5
 8002d66:	69bb      	ldr	r3, [r7, #24]
 8002d68:	4413      	add	r3, r2
 8002d6a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002d6e:	689b      	ldr	r3, [r3, #8]
 8002d70:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	799b      	ldrb	r3, [r3, #6]
 8002d76:	2b01      	cmp	r3, #1
 8002d78:	d17b      	bne.n	8002e72 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002d7a:	693b      	ldr	r3, [r7, #16]
 8002d7c:	f003 0308 	and.w	r3, r3, #8
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d015      	beq.n	8002db0 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002d84:	697b      	ldr	r3, [r7, #20]
 8002d86:	4a61      	ldr	r2, [pc, #388]	@ (8002f0c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	f240 80b9 	bls.w	8002f00 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002d8e:	693b      	ldr	r3, [r7, #16]
 8002d90:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	f000 80b3 	beq.w	8002f00 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	015a      	lsls	r2, r3, #5
 8002d9e:	69bb      	ldr	r3, [r7, #24]
 8002da0:	4413      	add	r3, r2
 8002da2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002da6:	461a      	mov	r2, r3
 8002da8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002dac:	6093      	str	r3, [r2, #8]
 8002dae:	e0a7      	b.n	8002f00 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002db0:	693b      	ldr	r3, [r7, #16]
 8002db2:	f003 0320 	and.w	r3, r3, #32
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d009      	beq.n	8002dce <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	015a      	lsls	r2, r3, #5
 8002dbe:	69bb      	ldr	r3, [r7, #24]
 8002dc0:	4413      	add	r3, r2
 8002dc2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002dc6:	461a      	mov	r2, r3
 8002dc8:	2320      	movs	r3, #32
 8002dca:	6093      	str	r3, [r2, #8]
 8002dcc:	e098      	b.n	8002f00 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002dce:	693b      	ldr	r3, [r7, #16]
 8002dd0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	f040 8093 	bne.w	8002f00 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002dda:	697b      	ldr	r3, [r7, #20]
 8002ddc:	4a4b      	ldr	r2, [pc, #300]	@ (8002f0c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d90f      	bls.n	8002e02 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002de2:	693b      	ldr	r3, [r7, #16]
 8002de4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d00a      	beq.n	8002e02 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	015a      	lsls	r2, r3, #5
 8002df0:	69bb      	ldr	r3, [r7, #24]
 8002df2:	4413      	add	r3, r2
 8002df4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002df8:	461a      	mov	r2, r3
 8002dfa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002dfe:	6093      	str	r3, [r2, #8]
 8002e00:	e07e      	b.n	8002f00 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002e02:	683a      	ldr	r2, [r7, #0]
 8002e04:	4613      	mov	r3, r2
 8002e06:	00db      	lsls	r3, r3, #3
 8002e08:	4413      	add	r3, r2
 8002e0a:	009b      	lsls	r3, r3, #2
 8002e0c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002e10:	687a      	ldr	r2, [r7, #4]
 8002e12:	4413      	add	r3, r2
 8002e14:	3304      	adds	r3, #4
 8002e16:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	6a1a      	ldr	r2, [r3, #32]
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	0159      	lsls	r1, r3, #5
 8002e20:	69bb      	ldr	r3, [r7, #24]
 8002e22:	440b      	add	r3, r1
 8002e24:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002e28:	691b      	ldr	r3, [r3, #16]
 8002e2a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e2e:	1ad2      	subs	r2, r2, r3
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d114      	bne.n	8002e64 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	691b      	ldr	r3, [r3, #16]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d109      	bne.n	8002e56 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6818      	ldr	r0, [r3, #0]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002e4c:	461a      	mov	r2, r3
 8002e4e:	2101      	movs	r1, #1
 8002e50:	f002 f900 	bl	8005054 <USB_EP0_OutStart>
 8002e54:	e006      	b.n	8002e64 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	68da      	ldr	r2, [r3, #12]
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	695b      	ldr	r3, [r3, #20]
 8002e5e:	441a      	add	r2, r3
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	b2db      	uxtb	r3, r3
 8002e68:	4619      	mov	r1, r3
 8002e6a:	6878      	ldr	r0, [r7, #4]
 8002e6c:	f004 fbe4 	bl	8007638 <HAL_PCD_DataOutStageCallback>
 8002e70:	e046      	b.n	8002f00 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002e72:	697b      	ldr	r3, [r7, #20]
 8002e74:	4a26      	ldr	r2, [pc, #152]	@ (8002f10 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d124      	bne.n	8002ec4 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002e7a:	693b      	ldr	r3, [r7, #16]
 8002e7c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d00a      	beq.n	8002e9a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	015a      	lsls	r2, r3, #5
 8002e88:	69bb      	ldr	r3, [r7, #24]
 8002e8a:	4413      	add	r3, r2
 8002e8c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002e90:	461a      	mov	r2, r3
 8002e92:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002e96:	6093      	str	r3, [r2, #8]
 8002e98:	e032      	b.n	8002f00 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002e9a:	693b      	ldr	r3, [r7, #16]
 8002e9c:	f003 0320 	and.w	r3, r3, #32
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d008      	beq.n	8002eb6 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	015a      	lsls	r2, r3, #5
 8002ea8:	69bb      	ldr	r3, [r7, #24]
 8002eaa:	4413      	add	r3, r2
 8002eac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002eb0:	461a      	mov	r2, r3
 8002eb2:	2320      	movs	r3, #32
 8002eb4:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	b2db      	uxtb	r3, r3
 8002eba:	4619      	mov	r1, r3
 8002ebc:	6878      	ldr	r0, [r7, #4]
 8002ebe:	f004 fbbb 	bl	8007638 <HAL_PCD_DataOutStageCallback>
 8002ec2:	e01d      	b.n	8002f00 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d114      	bne.n	8002ef4 <PCD_EP_OutXfrComplete_int+0x1b0>
 8002eca:	6879      	ldr	r1, [r7, #4]
 8002ecc:	683a      	ldr	r2, [r7, #0]
 8002ece:	4613      	mov	r3, r2
 8002ed0:	00db      	lsls	r3, r3, #3
 8002ed2:	4413      	add	r3, r2
 8002ed4:	009b      	lsls	r3, r3, #2
 8002ed6:	440b      	add	r3, r1
 8002ed8:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d108      	bne.n	8002ef4 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6818      	ldr	r0, [r3, #0]
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002eec:	461a      	mov	r2, r3
 8002eee:	2100      	movs	r1, #0
 8002ef0:	f002 f8b0 	bl	8005054 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	b2db      	uxtb	r3, r3
 8002ef8:	4619      	mov	r1, r3
 8002efa:	6878      	ldr	r0, [r7, #4]
 8002efc:	f004 fb9c 	bl	8007638 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002f00:	2300      	movs	r3, #0
}
 8002f02:	4618      	mov	r0, r3
 8002f04:	3720      	adds	r7, #32
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bd80      	pop	{r7, pc}
 8002f0a:	bf00      	nop
 8002f0c:	4f54300a 	.word	0x4f54300a
 8002f10:	4f54310a 	.word	0x4f54310a

08002f14 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b086      	sub	sp, #24
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
 8002f1c:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f24:	697b      	ldr	r3, [r7, #20]
 8002f26:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002f28:	697b      	ldr	r3, [r7, #20]
 8002f2a:	333c      	adds	r3, #60	@ 0x3c
 8002f2c:	3304      	adds	r3, #4
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	015a      	lsls	r2, r3, #5
 8002f36:	693b      	ldr	r3, [r7, #16]
 8002f38:	4413      	add	r3, r2
 8002f3a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002f3e:	689b      	ldr	r3, [r3, #8]
 8002f40:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	4a15      	ldr	r2, [pc, #84]	@ (8002f9c <PCD_EP_OutSetupPacket_int+0x88>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d90e      	bls.n	8002f68 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002f4a:	68bb      	ldr	r3, [r7, #8]
 8002f4c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d009      	beq.n	8002f68 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	015a      	lsls	r2, r3, #5
 8002f58:	693b      	ldr	r3, [r7, #16]
 8002f5a:	4413      	add	r3, r2
 8002f5c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002f60:	461a      	mov	r2, r3
 8002f62:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002f66:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002f68:	6878      	ldr	r0, [r7, #4]
 8002f6a:	f004 fb53 	bl	8007614 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	4a0a      	ldr	r2, [pc, #40]	@ (8002f9c <PCD_EP_OutSetupPacket_int+0x88>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d90c      	bls.n	8002f90 <PCD_EP_OutSetupPacket_int+0x7c>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	799b      	ldrb	r3, [r3, #6]
 8002f7a:	2b01      	cmp	r3, #1
 8002f7c:	d108      	bne.n	8002f90 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6818      	ldr	r0, [r3, #0]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002f88:	461a      	mov	r2, r3
 8002f8a:	2101      	movs	r1, #1
 8002f8c:	f002 f862 	bl	8005054 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002f90:	2300      	movs	r3, #0
}
 8002f92:	4618      	mov	r0, r3
 8002f94:	3718      	adds	r7, #24
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}
 8002f9a:	bf00      	nop
 8002f9c:	4f54300a 	.word	0x4f54300a

08002fa0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	b085      	sub	sp, #20
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
 8002fa8:	460b      	mov	r3, r1
 8002faa:	70fb      	strb	r3, [r7, #3]
 8002fac:	4613      	mov	r3, r2
 8002fae:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fb6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002fb8:	78fb      	ldrb	r3, [r7, #3]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d107      	bne.n	8002fce <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002fbe:	883b      	ldrh	r3, [r7, #0]
 8002fc0:	0419      	lsls	r1, r3, #16
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	68ba      	ldr	r2, [r7, #8]
 8002fc8:	430a      	orrs	r2, r1
 8002fca:	629a      	str	r2, [r3, #40]	@ 0x28
 8002fcc:	e028      	b.n	8003020 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fd4:	0c1b      	lsrs	r3, r3, #16
 8002fd6:	68ba      	ldr	r2, [r7, #8]
 8002fd8:	4413      	add	r3, r2
 8002fda:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002fdc:	2300      	movs	r3, #0
 8002fde:	73fb      	strb	r3, [r7, #15]
 8002fe0:	e00d      	b.n	8002ffe <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681a      	ldr	r2, [r3, #0]
 8002fe6:	7bfb      	ldrb	r3, [r7, #15]
 8002fe8:	3340      	adds	r3, #64	@ 0x40
 8002fea:	009b      	lsls	r3, r3, #2
 8002fec:	4413      	add	r3, r2
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	0c1b      	lsrs	r3, r3, #16
 8002ff2:	68ba      	ldr	r2, [r7, #8]
 8002ff4:	4413      	add	r3, r2
 8002ff6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002ff8:	7bfb      	ldrb	r3, [r7, #15]
 8002ffa:	3301      	adds	r3, #1
 8002ffc:	73fb      	strb	r3, [r7, #15]
 8002ffe:	7bfa      	ldrb	r2, [r7, #15]
 8003000:	78fb      	ldrb	r3, [r7, #3]
 8003002:	3b01      	subs	r3, #1
 8003004:	429a      	cmp	r2, r3
 8003006:	d3ec      	bcc.n	8002fe2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003008:	883b      	ldrh	r3, [r7, #0]
 800300a:	0418      	lsls	r0, r3, #16
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6819      	ldr	r1, [r3, #0]
 8003010:	78fb      	ldrb	r3, [r7, #3]
 8003012:	3b01      	subs	r3, #1
 8003014:	68ba      	ldr	r2, [r7, #8]
 8003016:	4302      	orrs	r2, r0
 8003018:	3340      	adds	r3, #64	@ 0x40
 800301a:	009b      	lsls	r3, r3, #2
 800301c:	440b      	add	r3, r1
 800301e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003020:	2300      	movs	r3, #0
}
 8003022:	4618      	mov	r0, r3
 8003024:	3714      	adds	r7, #20
 8003026:	46bd      	mov	sp, r7
 8003028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302c:	4770      	bx	lr

0800302e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800302e:	b480      	push	{r7}
 8003030:	b083      	sub	sp, #12
 8003032:	af00      	add	r7, sp, #0
 8003034:	6078      	str	r0, [r7, #4]
 8003036:	460b      	mov	r3, r1
 8003038:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	887a      	ldrh	r2, [r7, #2]
 8003040:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003042:	2300      	movs	r3, #0
}
 8003044:	4618      	mov	r0, r3
 8003046:	370c      	adds	r7, #12
 8003048:	46bd      	mov	sp, r7
 800304a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304e:	4770      	bx	lr

08003050 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003050:	b480      	push	{r7}
 8003052:	b083      	sub	sp, #12
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
 8003058:	460b      	mov	r3, r1
 800305a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800305c:	bf00      	nop
 800305e:	370c      	adds	r7, #12
 8003060:	46bd      	mov	sp, r7
 8003062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003066:	4770      	bx	lr

08003068 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b086      	sub	sp, #24
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d101      	bne.n	800307a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003076:	2301      	movs	r3, #1
 8003078:	e267      	b.n	800354a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f003 0301 	and.w	r3, r3, #1
 8003082:	2b00      	cmp	r3, #0
 8003084:	d075      	beq.n	8003172 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003086:	4b88      	ldr	r3, [pc, #544]	@ (80032a8 <HAL_RCC_OscConfig+0x240>)
 8003088:	689b      	ldr	r3, [r3, #8]
 800308a:	f003 030c 	and.w	r3, r3, #12
 800308e:	2b04      	cmp	r3, #4
 8003090:	d00c      	beq.n	80030ac <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003092:	4b85      	ldr	r3, [pc, #532]	@ (80032a8 <HAL_RCC_OscConfig+0x240>)
 8003094:	689b      	ldr	r3, [r3, #8]
 8003096:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800309a:	2b08      	cmp	r3, #8
 800309c:	d112      	bne.n	80030c4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800309e:	4b82      	ldr	r3, [pc, #520]	@ (80032a8 <HAL_RCC_OscConfig+0x240>)
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80030a6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80030aa:	d10b      	bne.n	80030c4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030ac:	4b7e      	ldr	r3, [pc, #504]	@ (80032a8 <HAL_RCC_OscConfig+0x240>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d05b      	beq.n	8003170 <HAL_RCC_OscConfig+0x108>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d157      	bne.n	8003170 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80030c0:	2301      	movs	r3, #1
 80030c2:	e242      	b.n	800354a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80030cc:	d106      	bne.n	80030dc <HAL_RCC_OscConfig+0x74>
 80030ce:	4b76      	ldr	r3, [pc, #472]	@ (80032a8 <HAL_RCC_OscConfig+0x240>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4a75      	ldr	r2, [pc, #468]	@ (80032a8 <HAL_RCC_OscConfig+0x240>)
 80030d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80030d8:	6013      	str	r3, [r2, #0]
 80030da:	e01d      	b.n	8003118 <HAL_RCC_OscConfig+0xb0>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80030e4:	d10c      	bne.n	8003100 <HAL_RCC_OscConfig+0x98>
 80030e6:	4b70      	ldr	r3, [pc, #448]	@ (80032a8 <HAL_RCC_OscConfig+0x240>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a6f      	ldr	r2, [pc, #444]	@ (80032a8 <HAL_RCC_OscConfig+0x240>)
 80030ec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80030f0:	6013      	str	r3, [r2, #0]
 80030f2:	4b6d      	ldr	r3, [pc, #436]	@ (80032a8 <HAL_RCC_OscConfig+0x240>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4a6c      	ldr	r2, [pc, #432]	@ (80032a8 <HAL_RCC_OscConfig+0x240>)
 80030f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80030fc:	6013      	str	r3, [r2, #0]
 80030fe:	e00b      	b.n	8003118 <HAL_RCC_OscConfig+0xb0>
 8003100:	4b69      	ldr	r3, [pc, #420]	@ (80032a8 <HAL_RCC_OscConfig+0x240>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a68      	ldr	r2, [pc, #416]	@ (80032a8 <HAL_RCC_OscConfig+0x240>)
 8003106:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800310a:	6013      	str	r3, [r2, #0]
 800310c:	4b66      	ldr	r3, [pc, #408]	@ (80032a8 <HAL_RCC_OscConfig+0x240>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a65      	ldr	r2, [pc, #404]	@ (80032a8 <HAL_RCC_OscConfig+0x240>)
 8003112:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003116:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d013      	beq.n	8003148 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003120:	f7fd ff68 	bl	8000ff4 <HAL_GetTick>
 8003124:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003126:	e008      	b.n	800313a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003128:	f7fd ff64 	bl	8000ff4 <HAL_GetTick>
 800312c:	4602      	mov	r2, r0
 800312e:	693b      	ldr	r3, [r7, #16]
 8003130:	1ad3      	subs	r3, r2, r3
 8003132:	2b64      	cmp	r3, #100	@ 0x64
 8003134:	d901      	bls.n	800313a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003136:	2303      	movs	r3, #3
 8003138:	e207      	b.n	800354a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800313a:	4b5b      	ldr	r3, [pc, #364]	@ (80032a8 <HAL_RCC_OscConfig+0x240>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003142:	2b00      	cmp	r3, #0
 8003144:	d0f0      	beq.n	8003128 <HAL_RCC_OscConfig+0xc0>
 8003146:	e014      	b.n	8003172 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003148:	f7fd ff54 	bl	8000ff4 <HAL_GetTick>
 800314c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800314e:	e008      	b.n	8003162 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003150:	f7fd ff50 	bl	8000ff4 <HAL_GetTick>
 8003154:	4602      	mov	r2, r0
 8003156:	693b      	ldr	r3, [r7, #16]
 8003158:	1ad3      	subs	r3, r2, r3
 800315a:	2b64      	cmp	r3, #100	@ 0x64
 800315c:	d901      	bls.n	8003162 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800315e:	2303      	movs	r3, #3
 8003160:	e1f3      	b.n	800354a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003162:	4b51      	ldr	r3, [pc, #324]	@ (80032a8 <HAL_RCC_OscConfig+0x240>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800316a:	2b00      	cmp	r3, #0
 800316c:	d1f0      	bne.n	8003150 <HAL_RCC_OscConfig+0xe8>
 800316e:	e000      	b.n	8003172 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003170:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f003 0302 	and.w	r3, r3, #2
 800317a:	2b00      	cmp	r3, #0
 800317c:	d063      	beq.n	8003246 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800317e:	4b4a      	ldr	r3, [pc, #296]	@ (80032a8 <HAL_RCC_OscConfig+0x240>)
 8003180:	689b      	ldr	r3, [r3, #8]
 8003182:	f003 030c 	and.w	r3, r3, #12
 8003186:	2b00      	cmp	r3, #0
 8003188:	d00b      	beq.n	80031a2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800318a:	4b47      	ldr	r3, [pc, #284]	@ (80032a8 <HAL_RCC_OscConfig+0x240>)
 800318c:	689b      	ldr	r3, [r3, #8]
 800318e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003192:	2b08      	cmp	r3, #8
 8003194:	d11c      	bne.n	80031d0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003196:	4b44      	ldr	r3, [pc, #272]	@ (80032a8 <HAL_RCC_OscConfig+0x240>)
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d116      	bne.n	80031d0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031a2:	4b41      	ldr	r3, [pc, #260]	@ (80032a8 <HAL_RCC_OscConfig+0x240>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f003 0302 	and.w	r3, r3, #2
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d005      	beq.n	80031ba <HAL_RCC_OscConfig+0x152>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	68db      	ldr	r3, [r3, #12]
 80031b2:	2b01      	cmp	r3, #1
 80031b4:	d001      	beq.n	80031ba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80031b6:	2301      	movs	r3, #1
 80031b8:	e1c7      	b.n	800354a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031ba:	4b3b      	ldr	r3, [pc, #236]	@ (80032a8 <HAL_RCC_OscConfig+0x240>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	691b      	ldr	r3, [r3, #16]
 80031c6:	00db      	lsls	r3, r3, #3
 80031c8:	4937      	ldr	r1, [pc, #220]	@ (80032a8 <HAL_RCC_OscConfig+0x240>)
 80031ca:	4313      	orrs	r3, r2
 80031cc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031ce:	e03a      	b.n	8003246 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	68db      	ldr	r3, [r3, #12]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d020      	beq.n	800321a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80031d8:	4b34      	ldr	r3, [pc, #208]	@ (80032ac <HAL_RCC_OscConfig+0x244>)
 80031da:	2201      	movs	r2, #1
 80031dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031de:	f7fd ff09 	bl	8000ff4 <HAL_GetTick>
 80031e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031e4:	e008      	b.n	80031f8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031e6:	f7fd ff05 	bl	8000ff4 <HAL_GetTick>
 80031ea:	4602      	mov	r2, r0
 80031ec:	693b      	ldr	r3, [r7, #16]
 80031ee:	1ad3      	subs	r3, r2, r3
 80031f0:	2b02      	cmp	r3, #2
 80031f2:	d901      	bls.n	80031f8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80031f4:	2303      	movs	r3, #3
 80031f6:	e1a8      	b.n	800354a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031f8:	4b2b      	ldr	r3, [pc, #172]	@ (80032a8 <HAL_RCC_OscConfig+0x240>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f003 0302 	and.w	r3, r3, #2
 8003200:	2b00      	cmp	r3, #0
 8003202:	d0f0      	beq.n	80031e6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003204:	4b28      	ldr	r3, [pc, #160]	@ (80032a8 <HAL_RCC_OscConfig+0x240>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	691b      	ldr	r3, [r3, #16]
 8003210:	00db      	lsls	r3, r3, #3
 8003212:	4925      	ldr	r1, [pc, #148]	@ (80032a8 <HAL_RCC_OscConfig+0x240>)
 8003214:	4313      	orrs	r3, r2
 8003216:	600b      	str	r3, [r1, #0]
 8003218:	e015      	b.n	8003246 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800321a:	4b24      	ldr	r3, [pc, #144]	@ (80032ac <HAL_RCC_OscConfig+0x244>)
 800321c:	2200      	movs	r2, #0
 800321e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003220:	f7fd fee8 	bl	8000ff4 <HAL_GetTick>
 8003224:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003226:	e008      	b.n	800323a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003228:	f7fd fee4 	bl	8000ff4 <HAL_GetTick>
 800322c:	4602      	mov	r2, r0
 800322e:	693b      	ldr	r3, [r7, #16]
 8003230:	1ad3      	subs	r3, r2, r3
 8003232:	2b02      	cmp	r3, #2
 8003234:	d901      	bls.n	800323a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003236:	2303      	movs	r3, #3
 8003238:	e187      	b.n	800354a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800323a:	4b1b      	ldr	r3, [pc, #108]	@ (80032a8 <HAL_RCC_OscConfig+0x240>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f003 0302 	and.w	r3, r3, #2
 8003242:	2b00      	cmp	r3, #0
 8003244:	d1f0      	bne.n	8003228 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f003 0308 	and.w	r3, r3, #8
 800324e:	2b00      	cmp	r3, #0
 8003250:	d036      	beq.n	80032c0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	695b      	ldr	r3, [r3, #20]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d016      	beq.n	8003288 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800325a:	4b15      	ldr	r3, [pc, #84]	@ (80032b0 <HAL_RCC_OscConfig+0x248>)
 800325c:	2201      	movs	r2, #1
 800325e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003260:	f7fd fec8 	bl	8000ff4 <HAL_GetTick>
 8003264:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003266:	e008      	b.n	800327a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003268:	f7fd fec4 	bl	8000ff4 <HAL_GetTick>
 800326c:	4602      	mov	r2, r0
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	1ad3      	subs	r3, r2, r3
 8003272:	2b02      	cmp	r3, #2
 8003274:	d901      	bls.n	800327a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003276:	2303      	movs	r3, #3
 8003278:	e167      	b.n	800354a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800327a:	4b0b      	ldr	r3, [pc, #44]	@ (80032a8 <HAL_RCC_OscConfig+0x240>)
 800327c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800327e:	f003 0302 	and.w	r3, r3, #2
 8003282:	2b00      	cmp	r3, #0
 8003284:	d0f0      	beq.n	8003268 <HAL_RCC_OscConfig+0x200>
 8003286:	e01b      	b.n	80032c0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003288:	4b09      	ldr	r3, [pc, #36]	@ (80032b0 <HAL_RCC_OscConfig+0x248>)
 800328a:	2200      	movs	r2, #0
 800328c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800328e:	f7fd feb1 	bl	8000ff4 <HAL_GetTick>
 8003292:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003294:	e00e      	b.n	80032b4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003296:	f7fd fead 	bl	8000ff4 <HAL_GetTick>
 800329a:	4602      	mov	r2, r0
 800329c:	693b      	ldr	r3, [r7, #16]
 800329e:	1ad3      	subs	r3, r2, r3
 80032a0:	2b02      	cmp	r3, #2
 80032a2:	d907      	bls.n	80032b4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80032a4:	2303      	movs	r3, #3
 80032a6:	e150      	b.n	800354a <HAL_RCC_OscConfig+0x4e2>
 80032a8:	40023800 	.word	0x40023800
 80032ac:	42470000 	.word	0x42470000
 80032b0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032b4:	4b88      	ldr	r3, [pc, #544]	@ (80034d8 <HAL_RCC_OscConfig+0x470>)
 80032b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80032b8:	f003 0302 	and.w	r3, r3, #2
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d1ea      	bne.n	8003296 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f003 0304 	and.w	r3, r3, #4
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	f000 8097 	beq.w	80033fc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032ce:	2300      	movs	r3, #0
 80032d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032d2:	4b81      	ldr	r3, [pc, #516]	@ (80034d8 <HAL_RCC_OscConfig+0x470>)
 80032d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d10f      	bne.n	80032fe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032de:	2300      	movs	r3, #0
 80032e0:	60bb      	str	r3, [r7, #8]
 80032e2:	4b7d      	ldr	r3, [pc, #500]	@ (80034d8 <HAL_RCC_OscConfig+0x470>)
 80032e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032e6:	4a7c      	ldr	r2, [pc, #496]	@ (80034d8 <HAL_RCC_OscConfig+0x470>)
 80032e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80032ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80032ee:	4b7a      	ldr	r3, [pc, #488]	@ (80034d8 <HAL_RCC_OscConfig+0x470>)
 80032f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032f6:	60bb      	str	r3, [r7, #8]
 80032f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032fa:	2301      	movs	r3, #1
 80032fc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032fe:	4b77      	ldr	r3, [pc, #476]	@ (80034dc <HAL_RCC_OscConfig+0x474>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003306:	2b00      	cmp	r3, #0
 8003308:	d118      	bne.n	800333c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800330a:	4b74      	ldr	r3, [pc, #464]	@ (80034dc <HAL_RCC_OscConfig+0x474>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a73      	ldr	r2, [pc, #460]	@ (80034dc <HAL_RCC_OscConfig+0x474>)
 8003310:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003314:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003316:	f7fd fe6d 	bl	8000ff4 <HAL_GetTick>
 800331a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800331c:	e008      	b.n	8003330 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800331e:	f7fd fe69 	bl	8000ff4 <HAL_GetTick>
 8003322:	4602      	mov	r2, r0
 8003324:	693b      	ldr	r3, [r7, #16]
 8003326:	1ad3      	subs	r3, r2, r3
 8003328:	2b02      	cmp	r3, #2
 800332a:	d901      	bls.n	8003330 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800332c:	2303      	movs	r3, #3
 800332e:	e10c      	b.n	800354a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003330:	4b6a      	ldr	r3, [pc, #424]	@ (80034dc <HAL_RCC_OscConfig+0x474>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003338:	2b00      	cmp	r3, #0
 800333a:	d0f0      	beq.n	800331e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	689b      	ldr	r3, [r3, #8]
 8003340:	2b01      	cmp	r3, #1
 8003342:	d106      	bne.n	8003352 <HAL_RCC_OscConfig+0x2ea>
 8003344:	4b64      	ldr	r3, [pc, #400]	@ (80034d8 <HAL_RCC_OscConfig+0x470>)
 8003346:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003348:	4a63      	ldr	r2, [pc, #396]	@ (80034d8 <HAL_RCC_OscConfig+0x470>)
 800334a:	f043 0301 	orr.w	r3, r3, #1
 800334e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003350:	e01c      	b.n	800338c <HAL_RCC_OscConfig+0x324>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	689b      	ldr	r3, [r3, #8]
 8003356:	2b05      	cmp	r3, #5
 8003358:	d10c      	bne.n	8003374 <HAL_RCC_OscConfig+0x30c>
 800335a:	4b5f      	ldr	r3, [pc, #380]	@ (80034d8 <HAL_RCC_OscConfig+0x470>)
 800335c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800335e:	4a5e      	ldr	r2, [pc, #376]	@ (80034d8 <HAL_RCC_OscConfig+0x470>)
 8003360:	f043 0304 	orr.w	r3, r3, #4
 8003364:	6713      	str	r3, [r2, #112]	@ 0x70
 8003366:	4b5c      	ldr	r3, [pc, #368]	@ (80034d8 <HAL_RCC_OscConfig+0x470>)
 8003368:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800336a:	4a5b      	ldr	r2, [pc, #364]	@ (80034d8 <HAL_RCC_OscConfig+0x470>)
 800336c:	f043 0301 	orr.w	r3, r3, #1
 8003370:	6713      	str	r3, [r2, #112]	@ 0x70
 8003372:	e00b      	b.n	800338c <HAL_RCC_OscConfig+0x324>
 8003374:	4b58      	ldr	r3, [pc, #352]	@ (80034d8 <HAL_RCC_OscConfig+0x470>)
 8003376:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003378:	4a57      	ldr	r2, [pc, #348]	@ (80034d8 <HAL_RCC_OscConfig+0x470>)
 800337a:	f023 0301 	bic.w	r3, r3, #1
 800337e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003380:	4b55      	ldr	r3, [pc, #340]	@ (80034d8 <HAL_RCC_OscConfig+0x470>)
 8003382:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003384:	4a54      	ldr	r2, [pc, #336]	@ (80034d8 <HAL_RCC_OscConfig+0x470>)
 8003386:	f023 0304 	bic.w	r3, r3, #4
 800338a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	689b      	ldr	r3, [r3, #8]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d015      	beq.n	80033c0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003394:	f7fd fe2e 	bl	8000ff4 <HAL_GetTick>
 8003398:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800339a:	e00a      	b.n	80033b2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800339c:	f7fd fe2a 	bl	8000ff4 <HAL_GetTick>
 80033a0:	4602      	mov	r2, r0
 80033a2:	693b      	ldr	r3, [r7, #16]
 80033a4:	1ad3      	subs	r3, r2, r3
 80033a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d901      	bls.n	80033b2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80033ae:	2303      	movs	r3, #3
 80033b0:	e0cb      	b.n	800354a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033b2:	4b49      	ldr	r3, [pc, #292]	@ (80034d8 <HAL_RCC_OscConfig+0x470>)
 80033b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033b6:	f003 0302 	and.w	r3, r3, #2
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d0ee      	beq.n	800339c <HAL_RCC_OscConfig+0x334>
 80033be:	e014      	b.n	80033ea <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033c0:	f7fd fe18 	bl	8000ff4 <HAL_GetTick>
 80033c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033c6:	e00a      	b.n	80033de <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033c8:	f7fd fe14 	bl	8000ff4 <HAL_GetTick>
 80033cc:	4602      	mov	r2, r0
 80033ce:	693b      	ldr	r3, [r7, #16]
 80033d0:	1ad3      	subs	r3, r2, r3
 80033d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d901      	bls.n	80033de <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80033da:	2303      	movs	r3, #3
 80033dc:	e0b5      	b.n	800354a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033de:	4b3e      	ldr	r3, [pc, #248]	@ (80034d8 <HAL_RCC_OscConfig+0x470>)
 80033e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033e2:	f003 0302 	and.w	r3, r3, #2
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d1ee      	bne.n	80033c8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80033ea:	7dfb      	ldrb	r3, [r7, #23]
 80033ec:	2b01      	cmp	r3, #1
 80033ee:	d105      	bne.n	80033fc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033f0:	4b39      	ldr	r3, [pc, #228]	@ (80034d8 <HAL_RCC_OscConfig+0x470>)
 80033f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033f4:	4a38      	ldr	r2, [pc, #224]	@ (80034d8 <HAL_RCC_OscConfig+0x470>)
 80033f6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80033fa:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	699b      	ldr	r3, [r3, #24]
 8003400:	2b00      	cmp	r3, #0
 8003402:	f000 80a1 	beq.w	8003548 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003406:	4b34      	ldr	r3, [pc, #208]	@ (80034d8 <HAL_RCC_OscConfig+0x470>)
 8003408:	689b      	ldr	r3, [r3, #8]
 800340a:	f003 030c 	and.w	r3, r3, #12
 800340e:	2b08      	cmp	r3, #8
 8003410:	d05c      	beq.n	80034cc <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	699b      	ldr	r3, [r3, #24]
 8003416:	2b02      	cmp	r3, #2
 8003418:	d141      	bne.n	800349e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800341a:	4b31      	ldr	r3, [pc, #196]	@ (80034e0 <HAL_RCC_OscConfig+0x478>)
 800341c:	2200      	movs	r2, #0
 800341e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003420:	f7fd fde8 	bl	8000ff4 <HAL_GetTick>
 8003424:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003426:	e008      	b.n	800343a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003428:	f7fd fde4 	bl	8000ff4 <HAL_GetTick>
 800342c:	4602      	mov	r2, r0
 800342e:	693b      	ldr	r3, [r7, #16]
 8003430:	1ad3      	subs	r3, r2, r3
 8003432:	2b02      	cmp	r3, #2
 8003434:	d901      	bls.n	800343a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003436:	2303      	movs	r3, #3
 8003438:	e087      	b.n	800354a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800343a:	4b27      	ldr	r3, [pc, #156]	@ (80034d8 <HAL_RCC_OscConfig+0x470>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003442:	2b00      	cmp	r3, #0
 8003444:	d1f0      	bne.n	8003428 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	69da      	ldr	r2, [r3, #28]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6a1b      	ldr	r3, [r3, #32]
 800344e:	431a      	orrs	r2, r3
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003454:	019b      	lsls	r3, r3, #6
 8003456:	431a      	orrs	r2, r3
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800345c:	085b      	lsrs	r3, r3, #1
 800345e:	3b01      	subs	r3, #1
 8003460:	041b      	lsls	r3, r3, #16
 8003462:	431a      	orrs	r2, r3
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003468:	061b      	lsls	r3, r3, #24
 800346a:	491b      	ldr	r1, [pc, #108]	@ (80034d8 <HAL_RCC_OscConfig+0x470>)
 800346c:	4313      	orrs	r3, r2
 800346e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003470:	4b1b      	ldr	r3, [pc, #108]	@ (80034e0 <HAL_RCC_OscConfig+0x478>)
 8003472:	2201      	movs	r2, #1
 8003474:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003476:	f7fd fdbd 	bl	8000ff4 <HAL_GetTick>
 800347a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800347c:	e008      	b.n	8003490 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800347e:	f7fd fdb9 	bl	8000ff4 <HAL_GetTick>
 8003482:	4602      	mov	r2, r0
 8003484:	693b      	ldr	r3, [r7, #16]
 8003486:	1ad3      	subs	r3, r2, r3
 8003488:	2b02      	cmp	r3, #2
 800348a:	d901      	bls.n	8003490 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800348c:	2303      	movs	r3, #3
 800348e:	e05c      	b.n	800354a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003490:	4b11      	ldr	r3, [pc, #68]	@ (80034d8 <HAL_RCC_OscConfig+0x470>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003498:	2b00      	cmp	r3, #0
 800349a:	d0f0      	beq.n	800347e <HAL_RCC_OscConfig+0x416>
 800349c:	e054      	b.n	8003548 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800349e:	4b10      	ldr	r3, [pc, #64]	@ (80034e0 <HAL_RCC_OscConfig+0x478>)
 80034a0:	2200      	movs	r2, #0
 80034a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034a4:	f7fd fda6 	bl	8000ff4 <HAL_GetTick>
 80034a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034aa:	e008      	b.n	80034be <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034ac:	f7fd fda2 	bl	8000ff4 <HAL_GetTick>
 80034b0:	4602      	mov	r2, r0
 80034b2:	693b      	ldr	r3, [r7, #16]
 80034b4:	1ad3      	subs	r3, r2, r3
 80034b6:	2b02      	cmp	r3, #2
 80034b8:	d901      	bls.n	80034be <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80034ba:	2303      	movs	r3, #3
 80034bc:	e045      	b.n	800354a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034be:	4b06      	ldr	r3, [pc, #24]	@ (80034d8 <HAL_RCC_OscConfig+0x470>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d1f0      	bne.n	80034ac <HAL_RCC_OscConfig+0x444>
 80034ca:	e03d      	b.n	8003548 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	699b      	ldr	r3, [r3, #24]
 80034d0:	2b01      	cmp	r3, #1
 80034d2:	d107      	bne.n	80034e4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80034d4:	2301      	movs	r3, #1
 80034d6:	e038      	b.n	800354a <HAL_RCC_OscConfig+0x4e2>
 80034d8:	40023800 	.word	0x40023800
 80034dc:	40007000 	.word	0x40007000
 80034e0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80034e4:	4b1b      	ldr	r3, [pc, #108]	@ (8003554 <HAL_RCC_OscConfig+0x4ec>)
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	699b      	ldr	r3, [r3, #24]
 80034ee:	2b01      	cmp	r3, #1
 80034f0:	d028      	beq.n	8003544 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80034fc:	429a      	cmp	r2, r3
 80034fe:	d121      	bne.n	8003544 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800350a:	429a      	cmp	r2, r3
 800350c:	d11a      	bne.n	8003544 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800350e:	68fa      	ldr	r2, [r7, #12]
 8003510:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003514:	4013      	ands	r3, r2
 8003516:	687a      	ldr	r2, [r7, #4]
 8003518:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800351a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800351c:	4293      	cmp	r3, r2
 800351e:	d111      	bne.n	8003544 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800352a:	085b      	lsrs	r3, r3, #1
 800352c:	3b01      	subs	r3, #1
 800352e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003530:	429a      	cmp	r2, r3
 8003532:	d107      	bne.n	8003544 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800353e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003540:	429a      	cmp	r2, r3
 8003542:	d001      	beq.n	8003548 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003544:	2301      	movs	r3, #1
 8003546:	e000      	b.n	800354a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003548:	2300      	movs	r3, #0
}
 800354a:	4618      	mov	r0, r3
 800354c:	3718      	adds	r7, #24
 800354e:	46bd      	mov	sp, r7
 8003550:	bd80      	pop	{r7, pc}
 8003552:	bf00      	nop
 8003554:	40023800 	.word	0x40023800

08003558 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b084      	sub	sp, #16
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
 8003560:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d101      	bne.n	800356c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003568:	2301      	movs	r3, #1
 800356a:	e0cc      	b.n	8003706 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800356c:	4b68      	ldr	r3, [pc, #416]	@ (8003710 <HAL_RCC_ClockConfig+0x1b8>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f003 0307 	and.w	r3, r3, #7
 8003574:	683a      	ldr	r2, [r7, #0]
 8003576:	429a      	cmp	r2, r3
 8003578:	d90c      	bls.n	8003594 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800357a:	4b65      	ldr	r3, [pc, #404]	@ (8003710 <HAL_RCC_ClockConfig+0x1b8>)
 800357c:	683a      	ldr	r2, [r7, #0]
 800357e:	b2d2      	uxtb	r2, r2
 8003580:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003582:	4b63      	ldr	r3, [pc, #396]	@ (8003710 <HAL_RCC_ClockConfig+0x1b8>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f003 0307 	and.w	r3, r3, #7
 800358a:	683a      	ldr	r2, [r7, #0]
 800358c:	429a      	cmp	r2, r3
 800358e:	d001      	beq.n	8003594 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003590:	2301      	movs	r3, #1
 8003592:	e0b8      	b.n	8003706 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f003 0302 	and.w	r3, r3, #2
 800359c:	2b00      	cmp	r3, #0
 800359e:	d020      	beq.n	80035e2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f003 0304 	and.w	r3, r3, #4
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d005      	beq.n	80035b8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80035ac:	4b59      	ldr	r3, [pc, #356]	@ (8003714 <HAL_RCC_ClockConfig+0x1bc>)
 80035ae:	689b      	ldr	r3, [r3, #8]
 80035b0:	4a58      	ldr	r2, [pc, #352]	@ (8003714 <HAL_RCC_ClockConfig+0x1bc>)
 80035b2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80035b6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f003 0308 	and.w	r3, r3, #8
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d005      	beq.n	80035d0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80035c4:	4b53      	ldr	r3, [pc, #332]	@ (8003714 <HAL_RCC_ClockConfig+0x1bc>)
 80035c6:	689b      	ldr	r3, [r3, #8]
 80035c8:	4a52      	ldr	r2, [pc, #328]	@ (8003714 <HAL_RCC_ClockConfig+0x1bc>)
 80035ca:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80035ce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035d0:	4b50      	ldr	r3, [pc, #320]	@ (8003714 <HAL_RCC_ClockConfig+0x1bc>)
 80035d2:	689b      	ldr	r3, [r3, #8]
 80035d4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	689b      	ldr	r3, [r3, #8]
 80035dc:	494d      	ldr	r1, [pc, #308]	@ (8003714 <HAL_RCC_ClockConfig+0x1bc>)
 80035de:	4313      	orrs	r3, r2
 80035e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f003 0301 	and.w	r3, r3, #1
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d044      	beq.n	8003678 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	2b01      	cmp	r3, #1
 80035f4:	d107      	bne.n	8003606 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035f6:	4b47      	ldr	r3, [pc, #284]	@ (8003714 <HAL_RCC_ClockConfig+0x1bc>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d119      	bne.n	8003636 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003602:	2301      	movs	r3, #1
 8003604:	e07f      	b.n	8003706 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	2b02      	cmp	r3, #2
 800360c:	d003      	beq.n	8003616 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003612:	2b03      	cmp	r3, #3
 8003614:	d107      	bne.n	8003626 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003616:	4b3f      	ldr	r3, [pc, #252]	@ (8003714 <HAL_RCC_ClockConfig+0x1bc>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800361e:	2b00      	cmp	r3, #0
 8003620:	d109      	bne.n	8003636 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003622:	2301      	movs	r3, #1
 8003624:	e06f      	b.n	8003706 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003626:	4b3b      	ldr	r3, [pc, #236]	@ (8003714 <HAL_RCC_ClockConfig+0x1bc>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f003 0302 	and.w	r3, r3, #2
 800362e:	2b00      	cmp	r3, #0
 8003630:	d101      	bne.n	8003636 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003632:	2301      	movs	r3, #1
 8003634:	e067      	b.n	8003706 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003636:	4b37      	ldr	r3, [pc, #220]	@ (8003714 <HAL_RCC_ClockConfig+0x1bc>)
 8003638:	689b      	ldr	r3, [r3, #8]
 800363a:	f023 0203 	bic.w	r2, r3, #3
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	4934      	ldr	r1, [pc, #208]	@ (8003714 <HAL_RCC_ClockConfig+0x1bc>)
 8003644:	4313      	orrs	r3, r2
 8003646:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003648:	f7fd fcd4 	bl	8000ff4 <HAL_GetTick>
 800364c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800364e:	e00a      	b.n	8003666 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003650:	f7fd fcd0 	bl	8000ff4 <HAL_GetTick>
 8003654:	4602      	mov	r2, r0
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	1ad3      	subs	r3, r2, r3
 800365a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800365e:	4293      	cmp	r3, r2
 8003660:	d901      	bls.n	8003666 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003662:	2303      	movs	r3, #3
 8003664:	e04f      	b.n	8003706 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003666:	4b2b      	ldr	r3, [pc, #172]	@ (8003714 <HAL_RCC_ClockConfig+0x1bc>)
 8003668:	689b      	ldr	r3, [r3, #8]
 800366a:	f003 020c 	and.w	r2, r3, #12
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	009b      	lsls	r3, r3, #2
 8003674:	429a      	cmp	r2, r3
 8003676:	d1eb      	bne.n	8003650 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003678:	4b25      	ldr	r3, [pc, #148]	@ (8003710 <HAL_RCC_ClockConfig+0x1b8>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f003 0307 	and.w	r3, r3, #7
 8003680:	683a      	ldr	r2, [r7, #0]
 8003682:	429a      	cmp	r2, r3
 8003684:	d20c      	bcs.n	80036a0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003686:	4b22      	ldr	r3, [pc, #136]	@ (8003710 <HAL_RCC_ClockConfig+0x1b8>)
 8003688:	683a      	ldr	r2, [r7, #0]
 800368a:	b2d2      	uxtb	r2, r2
 800368c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800368e:	4b20      	ldr	r3, [pc, #128]	@ (8003710 <HAL_RCC_ClockConfig+0x1b8>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f003 0307 	and.w	r3, r3, #7
 8003696:	683a      	ldr	r2, [r7, #0]
 8003698:	429a      	cmp	r2, r3
 800369a:	d001      	beq.n	80036a0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800369c:	2301      	movs	r3, #1
 800369e:	e032      	b.n	8003706 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f003 0304 	and.w	r3, r3, #4
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d008      	beq.n	80036be <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036ac:	4b19      	ldr	r3, [pc, #100]	@ (8003714 <HAL_RCC_ClockConfig+0x1bc>)
 80036ae:	689b      	ldr	r3, [r3, #8]
 80036b0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	68db      	ldr	r3, [r3, #12]
 80036b8:	4916      	ldr	r1, [pc, #88]	@ (8003714 <HAL_RCC_ClockConfig+0x1bc>)
 80036ba:	4313      	orrs	r3, r2
 80036bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f003 0308 	and.w	r3, r3, #8
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d009      	beq.n	80036de <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80036ca:	4b12      	ldr	r3, [pc, #72]	@ (8003714 <HAL_RCC_ClockConfig+0x1bc>)
 80036cc:	689b      	ldr	r3, [r3, #8]
 80036ce:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	691b      	ldr	r3, [r3, #16]
 80036d6:	00db      	lsls	r3, r3, #3
 80036d8:	490e      	ldr	r1, [pc, #56]	@ (8003714 <HAL_RCC_ClockConfig+0x1bc>)
 80036da:	4313      	orrs	r3, r2
 80036dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80036de:	f000 f821 	bl	8003724 <HAL_RCC_GetSysClockFreq>
 80036e2:	4602      	mov	r2, r0
 80036e4:	4b0b      	ldr	r3, [pc, #44]	@ (8003714 <HAL_RCC_ClockConfig+0x1bc>)
 80036e6:	689b      	ldr	r3, [r3, #8]
 80036e8:	091b      	lsrs	r3, r3, #4
 80036ea:	f003 030f 	and.w	r3, r3, #15
 80036ee:	490a      	ldr	r1, [pc, #40]	@ (8003718 <HAL_RCC_ClockConfig+0x1c0>)
 80036f0:	5ccb      	ldrb	r3, [r1, r3]
 80036f2:	fa22 f303 	lsr.w	r3, r2, r3
 80036f6:	4a09      	ldr	r2, [pc, #36]	@ (800371c <HAL_RCC_ClockConfig+0x1c4>)
 80036f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80036fa:	4b09      	ldr	r3, [pc, #36]	@ (8003720 <HAL_RCC_ClockConfig+0x1c8>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4618      	mov	r0, r3
 8003700:	f7fd fc48 	bl	8000f94 <HAL_InitTick>

  return HAL_OK;
 8003704:	2300      	movs	r3, #0
}
 8003706:	4618      	mov	r0, r3
 8003708:	3710      	adds	r7, #16
 800370a:	46bd      	mov	sp, r7
 800370c:	bd80      	pop	{r7, pc}
 800370e:	bf00      	nop
 8003710:	40023c00 	.word	0x40023c00
 8003714:	40023800 	.word	0x40023800
 8003718:	08007e00 	.word	0x08007e00
 800371c:	20000020 	.word	0x20000020
 8003720:	20000024 	.word	0x20000024

08003724 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003724:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003728:	b094      	sub	sp, #80	@ 0x50
 800372a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800372c:	2300      	movs	r3, #0
 800372e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003730:	2300      	movs	r3, #0
 8003732:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003734:	2300      	movs	r3, #0
 8003736:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003738:	2300      	movs	r3, #0
 800373a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800373c:	4b79      	ldr	r3, [pc, #484]	@ (8003924 <HAL_RCC_GetSysClockFreq+0x200>)
 800373e:	689b      	ldr	r3, [r3, #8]
 8003740:	f003 030c 	and.w	r3, r3, #12
 8003744:	2b08      	cmp	r3, #8
 8003746:	d00d      	beq.n	8003764 <HAL_RCC_GetSysClockFreq+0x40>
 8003748:	2b08      	cmp	r3, #8
 800374a:	f200 80e1 	bhi.w	8003910 <HAL_RCC_GetSysClockFreq+0x1ec>
 800374e:	2b00      	cmp	r3, #0
 8003750:	d002      	beq.n	8003758 <HAL_RCC_GetSysClockFreq+0x34>
 8003752:	2b04      	cmp	r3, #4
 8003754:	d003      	beq.n	800375e <HAL_RCC_GetSysClockFreq+0x3a>
 8003756:	e0db      	b.n	8003910 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003758:	4b73      	ldr	r3, [pc, #460]	@ (8003928 <HAL_RCC_GetSysClockFreq+0x204>)
 800375a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800375c:	e0db      	b.n	8003916 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800375e:	4b73      	ldr	r3, [pc, #460]	@ (800392c <HAL_RCC_GetSysClockFreq+0x208>)
 8003760:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003762:	e0d8      	b.n	8003916 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003764:	4b6f      	ldr	r3, [pc, #444]	@ (8003924 <HAL_RCC_GetSysClockFreq+0x200>)
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800376c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800376e:	4b6d      	ldr	r3, [pc, #436]	@ (8003924 <HAL_RCC_GetSysClockFreq+0x200>)
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003776:	2b00      	cmp	r3, #0
 8003778:	d063      	beq.n	8003842 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800377a:	4b6a      	ldr	r3, [pc, #424]	@ (8003924 <HAL_RCC_GetSysClockFreq+0x200>)
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	099b      	lsrs	r3, r3, #6
 8003780:	2200      	movs	r2, #0
 8003782:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003784:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003786:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003788:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800378c:	633b      	str	r3, [r7, #48]	@ 0x30
 800378e:	2300      	movs	r3, #0
 8003790:	637b      	str	r3, [r7, #52]	@ 0x34
 8003792:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003796:	4622      	mov	r2, r4
 8003798:	462b      	mov	r3, r5
 800379a:	f04f 0000 	mov.w	r0, #0
 800379e:	f04f 0100 	mov.w	r1, #0
 80037a2:	0159      	lsls	r1, r3, #5
 80037a4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80037a8:	0150      	lsls	r0, r2, #5
 80037aa:	4602      	mov	r2, r0
 80037ac:	460b      	mov	r3, r1
 80037ae:	4621      	mov	r1, r4
 80037b0:	1a51      	subs	r1, r2, r1
 80037b2:	6139      	str	r1, [r7, #16]
 80037b4:	4629      	mov	r1, r5
 80037b6:	eb63 0301 	sbc.w	r3, r3, r1
 80037ba:	617b      	str	r3, [r7, #20]
 80037bc:	f04f 0200 	mov.w	r2, #0
 80037c0:	f04f 0300 	mov.w	r3, #0
 80037c4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80037c8:	4659      	mov	r1, fp
 80037ca:	018b      	lsls	r3, r1, #6
 80037cc:	4651      	mov	r1, sl
 80037ce:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80037d2:	4651      	mov	r1, sl
 80037d4:	018a      	lsls	r2, r1, #6
 80037d6:	4651      	mov	r1, sl
 80037d8:	ebb2 0801 	subs.w	r8, r2, r1
 80037dc:	4659      	mov	r1, fp
 80037de:	eb63 0901 	sbc.w	r9, r3, r1
 80037e2:	f04f 0200 	mov.w	r2, #0
 80037e6:	f04f 0300 	mov.w	r3, #0
 80037ea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80037ee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80037f2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80037f6:	4690      	mov	r8, r2
 80037f8:	4699      	mov	r9, r3
 80037fa:	4623      	mov	r3, r4
 80037fc:	eb18 0303 	adds.w	r3, r8, r3
 8003800:	60bb      	str	r3, [r7, #8]
 8003802:	462b      	mov	r3, r5
 8003804:	eb49 0303 	adc.w	r3, r9, r3
 8003808:	60fb      	str	r3, [r7, #12]
 800380a:	f04f 0200 	mov.w	r2, #0
 800380e:	f04f 0300 	mov.w	r3, #0
 8003812:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003816:	4629      	mov	r1, r5
 8003818:	024b      	lsls	r3, r1, #9
 800381a:	4621      	mov	r1, r4
 800381c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003820:	4621      	mov	r1, r4
 8003822:	024a      	lsls	r2, r1, #9
 8003824:	4610      	mov	r0, r2
 8003826:	4619      	mov	r1, r3
 8003828:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800382a:	2200      	movs	r2, #0
 800382c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800382e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003830:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003834:	f7fc fcc8 	bl	80001c8 <__aeabi_uldivmod>
 8003838:	4602      	mov	r2, r0
 800383a:	460b      	mov	r3, r1
 800383c:	4613      	mov	r3, r2
 800383e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003840:	e058      	b.n	80038f4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003842:	4b38      	ldr	r3, [pc, #224]	@ (8003924 <HAL_RCC_GetSysClockFreq+0x200>)
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	099b      	lsrs	r3, r3, #6
 8003848:	2200      	movs	r2, #0
 800384a:	4618      	mov	r0, r3
 800384c:	4611      	mov	r1, r2
 800384e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003852:	623b      	str	r3, [r7, #32]
 8003854:	2300      	movs	r3, #0
 8003856:	627b      	str	r3, [r7, #36]	@ 0x24
 8003858:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800385c:	4642      	mov	r2, r8
 800385e:	464b      	mov	r3, r9
 8003860:	f04f 0000 	mov.w	r0, #0
 8003864:	f04f 0100 	mov.w	r1, #0
 8003868:	0159      	lsls	r1, r3, #5
 800386a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800386e:	0150      	lsls	r0, r2, #5
 8003870:	4602      	mov	r2, r0
 8003872:	460b      	mov	r3, r1
 8003874:	4641      	mov	r1, r8
 8003876:	ebb2 0a01 	subs.w	sl, r2, r1
 800387a:	4649      	mov	r1, r9
 800387c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003880:	f04f 0200 	mov.w	r2, #0
 8003884:	f04f 0300 	mov.w	r3, #0
 8003888:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800388c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003890:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003894:	ebb2 040a 	subs.w	r4, r2, sl
 8003898:	eb63 050b 	sbc.w	r5, r3, fp
 800389c:	f04f 0200 	mov.w	r2, #0
 80038a0:	f04f 0300 	mov.w	r3, #0
 80038a4:	00eb      	lsls	r3, r5, #3
 80038a6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80038aa:	00e2      	lsls	r2, r4, #3
 80038ac:	4614      	mov	r4, r2
 80038ae:	461d      	mov	r5, r3
 80038b0:	4643      	mov	r3, r8
 80038b2:	18e3      	adds	r3, r4, r3
 80038b4:	603b      	str	r3, [r7, #0]
 80038b6:	464b      	mov	r3, r9
 80038b8:	eb45 0303 	adc.w	r3, r5, r3
 80038bc:	607b      	str	r3, [r7, #4]
 80038be:	f04f 0200 	mov.w	r2, #0
 80038c2:	f04f 0300 	mov.w	r3, #0
 80038c6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80038ca:	4629      	mov	r1, r5
 80038cc:	028b      	lsls	r3, r1, #10
 80038ce:	4621      	mov	r1, r4
 80038d0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80038d4:	4621      	mov	r1, r4
 80038d6:	028a      	lsls	r2, r1, #10
 80038d8:	4610      	mov	r0, r2
 80038da:	4619      	mov	r1, r3
 80038dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80038de:	2200      	movs	r2, #0
 80038e0:	61bb      	str	r3, [r7, #24]
 80038e2:	61fa      	str	r2, [r7, #28]
 80038e4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80038e8:	f7fc fc6e 	bl	80001c8 <__aeabi_uldivmod>
 80038ec:	4602      	mov	r2, r0
 80038ee:	460b      	mov	r3, r1
 80038f0:	4613      	mov	r3, r2
 80038f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80038f4:	4b0b      	ldr	r3, [pc, #44]	@ (8003924 <HAL_RCC_GetSysClockFreq+0x200>)
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	0c1b      	lsrs	r3, r3, #16
 80038fa:	f003 0303 	and.w	r3, r3, #3
 80038fe:	3301      	adds	r3, #1
 8003900:	005b      	lsls	r3, r3, #1
 8003902:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003904:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003906:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003908:	fbb2 f3f3 	udiv	r3, r2, r3
 800390c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800390e:	e002      	b.n	8003916 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003910:	4b05      	ldr	r3, [pc, #20]	@ (8003928 <HAL_RCC_GetSysClockFreq+0x204>)
 8003912:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003914:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003916:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003918:	4618      	mov	r0, r3
 800391a:	3750      	adds	r7, #80	@ 0x50
 800391c:	46bd      	mov	sp, r7
 800391e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003922:	bf00      	nop
 8003924:	40023800 	.word	0x40023800
 8003928:	00f42400 	.word	0x00f42400
 800392c:	007a1200 	.word	0x007a1200

08003930 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003930:	b480      	push	{r7}
 8003932:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003934:	4b03      	ldr	r3, [pc, #12]	@ (8003944 <HAL_RCC_GetHCLKFreq+0x14>)
 8003936:	681b      	ldr	r3, [r3, #0]
}
 8003938:	4618      	mov	r0, r3
 800393a:	46bd      	mov	sp, r7
 800393c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003940:	4770      	bx	lr
 8003942:	bf00      	nop
 8003944:	20000020 	.word	0x20000020

08003948 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b082      	sub	sp, #8
 800394c:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 800394e:	f7fd fb51 	bl	8000ff4 <HAL_GetTick>
 8003952:	6078      	str	r0, [r7, #4]

  /* Set HSION bit to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8003954:	4b5d      	ldr	r3, [pc, #372]	@ (8003acc <HAL_RCC_DeInit+0x184>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4a5c      	ldr	r2, [pc, #368]	@ (8003acc <HAL_RCC_DeInit+0x184>)
 800395a:	f043 0301 	orr.w	r3, r3, #1
 800395e:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8003960:	e008      	b.n	8003974 <HAL_RCC_DeInit+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003962:	f7fd fb47 	bl	8000ff4 <HAL_GetTick>
 8003966:	4602      	mov	r2, r0
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	1ad3      	subs	r3, r2, r3
 800396c:	2b02      	cmp	r3, #2
 800396e:	d901      	bls.n	8003974 <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 8003970:	2303      	movs	r3, #3
 8003972:	e0a7      	b.n	8003ac4 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8003974:	4b55      	ldr	r3, [pc, #340]	@ (8003acc <HAL_RCC_DeInit+0x184>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f003 0302 	and.w	r3, r3, #2
 800397c:	2b00      	cmp	r3, #0
 800397e:	d0f0      	beq.n	8003962 <HAL_RCC_DeInit+0x1a>
    }
  }

  /* Set HSITRIM[4:0] bits to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSITRIM_4);
 8003980:	4b52      	ldr	r3, [pc, #328]	@ (8003acc <HAL_RCC_DeInit+0x184>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a51      	ldr	r2, [pc, #324]	@ (8003acc <HAL_RCC_DeInit+0x184>)
 8003986:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800398a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 800398c:	f7fd fb32 	bl	8000ff4 <HAL_GetTick>
 8003990:	6078      	str	r0, [r7, #4]

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 8003992:	4b4e      	ldr	r3, [pc, #312]	@ (8003acc <HAL_RCC_DeInit+0x184>)
 8003994:	2200      	movs	r2, #0
 8003996:	609a      	str	r2, [r3, #8]

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8003998:	e00a      	b.n	80039b0 <HAL_RCC_DeInit+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800399a:	f7fd fb2b 	bl	8000ff4 <HAL_GetTick>
 800399e:	4602      	mov	r2, r0
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	1ad3      	subs	r3, r2, r3
 80039a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d901      	bls.n	80039b0 <HAL_RCC_DeInit+0x68>
    {
      return HAL_TIMEOUT;
 80039ac:	2303      	movs	r3, #3
 80039ae:	e089      	b.n	8003ac4 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 80039b0:	4b46      	ldr	r3, [pc, #280]	@ (8003acc <HAL_RCC_DeInit+0x184>)
 80039b2:	689b      	ldr	r3, [r3, #8]
 80039b4:	f003 030c 	and.w	r3, r3, #12
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d1ee      	bne.n	800399a <HAL_RCC_DeInit+0x52>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80039bc:	f7fd fb1a 	bl	8000ff4 <HAL_GetTick>
 80039c0:	6078      	str	r0, [r7, #4]

  /* Clear HSEON, HSEBYP and CSSON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSEBYP | RCC_CR_CSSON);
 80039c2:	4b42      	ldr	r3, [pc, #264]	@ (8003acc <HAL_RCC_DeInit+0x184>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4a41      	ldr	r2, [pc, #260]	@ (8003acc <HAL_RCC_DeInit+0x184>)
 80039c8:	f423 2350 	bic.w	r3, r3, #851968	@ 0xd0000
 80039cc:	6013      	str	r3, [r2, #0]

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 80039ce:	e008      	b.n	80039e2 <HAL_RCC_DeInit+0x9a>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039d0:	f7fd fb10 	bl	8000ff4 <HAL_GetTick>
 80039d4:	4602      	mov	r2, r0
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	1ad3      	subs	r3, r2, r3
 80039da:	2b64      	cmp	r3, #100	@ 0x64
 80039dc:	d901      	bls.n	80039e2 <HAL_RCC_DeInit+0x9a>
    {
      return HAL_TIMEOUT;
 80039de:	2303      	movs	r3, #3
 80039e0:	e070      	b.n	8003ac4 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 80039e2:	4b3a      	ldr	r3, [pc, #232]	@ (8003acc <HAL_RCC_DeInit+0x184>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d1f0      	bne.n	80039d0 <HAL_RCC_DeInit+0x88>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80039ee:	f7fd fb01 	bl	8000ff4 <HAL_GetTick>
 80039f2:	6078      	str	r0, [r7, #4]

  /* Clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80039f4:	4b35      	ldr	r3, [pc, #212]	@ (8003acc <HAL_RCC_DeInit+0x184>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a34      	ldr	r2, [pc, #208]	@ (8003acc <HAL_RCC_DeInit+0x184>)
 80039fa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80039fe:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8003a00:	e008      	b.n	8003a14 <HAL_RCC_DeInit+0xcc>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a02:	f7fd faf7 	bl	8000ff4 <HAL_GetTick>
 8003a06:	4602      	mov	r2, r0
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	1ad3      	subs	r3, r2, r3
 8003a0c:	2b02      	cmp	r3, #2
 8003a0e:	d901      	bls.n	8003a14 <HAL_RCC_DeInit+0xcc>
    {
      return HAL_TIMEOUT;
 8003a10:	2303      	movs	r3, #3
 8003a12:	e057      	b.n	8003ac4 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8003a14:	4b2d      	ldr	r3, [pc, #180]	@ (8003acc <HAL_RCC_DeInit+0x184>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d1f0      	bne.n	8003a02 <HAL_RCC_DeInit+0xba>
    }
  }

#if defined(RCC_PLLI2S_SUPPORT)
  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8003a20:	f7fd fae8 	bl	8000ff4 <HAL_GetTick>
 8003a24:	6078      	str	r0, [r7, #4]

  /* Reset PLLI2SON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLI2SON);
 8003a26:	4b29      	ldr	r3, [pc, #164]	@ (8003acc <HAL_RCC_DeInit+0x184>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4a28      	ldr	r2, [pc, #160]	@ (8003acc <HAL_RCC_DeInit+0x184>)
 8003a2c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003a30:	6013      	str	r3, [r2, #0]

  /* Wait till PLLI2S is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 8003a32:	e008      	b.n	8003a46 <HAL_RCC_DeInit+0xfe>
  {
    if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003a34:	f7fd fade 	bl	8000ff4 <HAL_GetTick>
 8003a38:	4602      	mov	r2, r0
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	1ad3      	subs	r3, r2, r3
 8003a3e:	2b02      	cmp	r3, #2
 8003a40:	d901      	bls.n	8003a46 <HAL_RCC_DeInit+0xfe>
    {
      return HAL_TIMEOUT;
 8003a42:	2303      	movs	r3, #3
 8003a44:	e03e      	b.n	8003ac4 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 8003a46:	4b21      	ldr	r3, [pc, #132]	@ (8003acc <HAL_RCC_DeInit+0x184>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d1f0      	bne.n	8003a34 <HAL_RCC_DeInit+0xec>
    defined(STM32F423xx) || defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLR_1;
#elif defined(STM32F410Tx) || defined(STM32F410Cx) || defined(STM32F410Rx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLR_0 | RCC_PLLCFGR_PLLR_1 | RCC_PLLCFGR_PLLR_2 | RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_0 | RCC_PLLCFGR_PLLQ_1 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLQ_3;
#else
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2;
 8003a52:	4b1e      	ldr	r3, [pc, #120]	@ (8003acc <HAL_RCC_DeInit+0x184>)
 8003a54:	4a1e      	ldr	r2, [pc, #120]	@ (8003ad0 <HAL_RCC_DeInit+0x188>)
 8003a56:	605a      	str	r2, [r3, #4]
  /* Reset PLLI2SCFGR register to default value */
#if defined(STM32F412Cx) || defined(STM32F412Rx) || defined(STM32F412Vx) || defined(STM32F412Zx) || defined(STM32F413xx) || \
    defined(STM32F423xx) || defined(STM32F446xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SM_4 | RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SQ_2 | RCC_PLLI2SCFGR_PLLI2SR_1;
#elif defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SR_1;
 8003a58:	4b1c      	ldr	r3, [pc, #112]	@ (8003acc <HAL_RCC_DeInit+0x184>)
 8003a5a:	4a1e      	ldr	r2, [pc, #120]	@ (8003ad4 <HAL_RCC_DeInit+0x18c>)
 8003a5c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#elif defined(STM32F446xx)
  RCC->PLLSAICFGR = RCC_PLLSAICFGR_PLLSAIM_4 | RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 | RCC_PLLSAICFGR_PLLSAIQ_2;
#endif /* STM32F427xx || STM32F429xx || STM32F437xx || STM32F439xx || STM32F469xx || STM32F479xx */

  /* Disable all interrupts */
  CLEAR_BIT(RCC->CIR, RCC_CIR_LSIRDYIE | RCC_CIR_LSERDYIE | RCC_CIR_HSIRDYIE | RCC_CIR_HSERDYIE | RCC_CIR_PLLRDYIE);
 8003a60:	4b1a      	ldr	r3, [pc, #104]	@ (8003acc <HAL_RCC_DeInit+0x184>)
 8003a62:	68db      	ldr	r3, [r3, #12]
 8003a64:	4a19      	ldr	r2, [pc, #100]	@ (8003acc <HAL_RCC_DeInit+0x184>)
 8003a66:	f423 53f8 	bic.w	r3, r3, #7936	@ 0x1f00
 8003a6a:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYIE);
 8003a6c:	4b17      	ldr	r3, [pc, #92]	@ (8003acc <HAL_RCC_DeInit+0x184>)
 8003a6e:	68db      	ldr	r3, [r3, #12]
 8003a70:	4a16      	ldr	r2, [pc, #88]	@ (8003acc <HAL_RCC_DeInit+0x184>)
 8003a72:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003a76:	60d3      	str	r3, [r2, #12]
#if defined(RCC_CIR_PLLSAIRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYIE);
#endif /* RCC_CIR_PLLSAIRDYIE */

  /* Clear all interrupt flags */
  SET_BIT(RCC->CIR, RCC_CIR_LSIRDYC | RCC_CIR_LSERDYC | RCC_CIR_HSIRDYC | RCC_CIR_HSERDYC | RCC_CIR_PLLRDYC |
 8003a78:	4b14      	ldr	r3, [pc, #80]	@ (8003acc <HAL_RCC_DeInit+0x184>)
 8003a7a:	68db      	ldr	r3, [r3, #12]
 8003a7c:	4a13      	ldr	r2, [pc, #76]	@ (8003acc <HAL_RCC_DeInit+0x184>)
 8003a7e:	f443 031f 	orr.w	r3, r3, #10420224	@ 0x9f0000
 8003a82:	60d3      	str	r3, [r2, #12]
          RCC_CIR_CSSC);

#if defined(RCC_CIR_PLLI2SRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYC);
 8003a84:	4b11      	ldr	r3, [pc, #68]	@ (8003acc <HAL_RCC_DeInit+0x184>)
 8003a86:	68db      	ldr	r3, [r3, #12]
 8003a88:	4a10      	ldr	r2, [pc, #64]	@ (8003acc <HAL_RCC_DeInit+0x184>)
 8003a8a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003a8e:	60d3      	str	r3, [r2, #12]
#if defined(RCC_CIR_PLLSAIRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYC);
#endif /* RCC_CIR_PLLSAIRDYC */

  /* Clear LSION bit */
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8003a90:	4b0e      	ldr	r3, [pc, #56]	@ (8003acc <HAL_RCC_DeInit+0x184>)
 8003a92:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a94:	4a0d      	ldr	r2, [pc, #52]	@ (8003acc <HAL_RCC_DeInit+0x184>)
 8003a96:	f023 0301 	bic.w	r3, r3, #1
 8003a9a:	6753      	str	r3, [r2, #116]	@ 0x74

  /* Reset all CSR flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 8003a9c:	4b0b      	ldr	r3, [pc, #44]	@ (8003acc <HAL_RCC_DeInit+0x184>)
 8003a9e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003aa0:	4a0a      	ldr	r2, [pc, #40]	@ (8003acc <HAL_RCC_DeInit+0x184>)
 8003aa2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003aa6:	6753      	str	r3, [r2, #116]	@ 0x74

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 8003aa8:	4b0b      	ldr	r3, [pc, #44]	@ (8003ad8 <HAL_RCC_DeInit+0x190>)
 8003aaa:	4a0c      	ldr	r2, [pc, #48]	@ (8003adc <HAL_RCC_DeInit+0x194>)
 8003aac:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003aae:	4b0c      	ldr	r3, [pc, #48]	@ (8003ae0 <HAL_RCC_DeInit+0x198>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	f7fd fa6e 	bl	8000f94 <HAL_InitTick>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d001      	beq.n	8003ac2 <HAL_RCC_DeInit+0x17a>
  {
    return HAL_ERROR;
 8003abe:	2301      	movs	r3, #1
 8003ac0:	e000      	b.n	8003ac4 <HAL_RCC_DeInit+0x17c>
  }
  else
  {
    return HAL_OK;
 8003ac2:	2300      	movs	r3, #0
  }
}
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	3708      	adds	r7, #8
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	bd80      	pop	{r7, pc}
 8003acc:	40023800 	.word	0x40023800
 8003ad0:	04003010 	.word	0x04003010
 8003ad4:	20003000 	.word	0x20003000
 8003ad8:	20000020 	.word	0x20000020
 8003adc:	00f42400 	.word	0x00f42400
 8003ae0:	20000024 	.word	0x20000024

08003ae4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003ae4:	b084      	sub	sp, #16
 8003ae6:	b580      	push	{r7, lr}
 8003ae8:	b084      	sub	sp, #16
 8003aea:	af00      	add	r7, sp, #0
 8003aec:	6078      	str	r0, [r7, #4]
 8003aee:	f107 001c 	add.w	r0, r7, #28
 8003af2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003af6:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8003afa:	2b01      	cmp	r3, #1
 8003afc:	d123      	bne.n	8003b46 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b02:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	68db      	ldr	r3, [r3, #12]
 8003b0e:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8003b12:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003b16:	687a      	ldr	r2, [r7, #4]
 8003b18:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	68db      	ldr	r3, [r3, #12]
 8003b1e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003b26:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003b2a:	2b01      	cmp	r3, #1
 8003b2c:	d105      	bne.n	8003b3a <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	68db      	ldr	r3, [r3, #12]
 8003b32:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003b3a:	6878      	ldr	r0, [r7, #4]
 8003b3c:	f001 fae8 	bl	8005110 <USB_CoreReset>
 8003b40:	4603      	mov	r3, r0
 8003b42:	73fb      	strb	r3, [r7, #15]
 8003b44:	e01b      	b.n	8003b7e <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	68db      	ldr	r3, [r3, #12]
 8003b4a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003b52:	6878      	ldr	r0, [r7, #4]
 8003b54:	f001 fadc 	bl	8005110 <USB_CoreReset>
 8003b58:	4603      	mov	r3, r0
 8003b5a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003b5c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d106      	bne.n	8003b72 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b68:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	639a      	str	r2, [r3, #56]	@ 0x38
 8003b70:	e005      	b.n	8003b7e <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b76:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003b7e:	7fbb      	ldrb	r3, [r7, #30]
 8003b80:	2b01      	cmp	r3, #1
 8003b82:	d10b      	bne.n	8003b9c <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	689b      	ldr	r3, [r3, #8]
 8003b88:	f043 0206 	orr.w	r2, r3, #6
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	689b      	ldr	r3, [r3, #8]
 8003b94:	f043 0220 	orr.w	r2, r3, #32
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003b9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	3710      	adds	r7, #16
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003ba8:	b004      	add	sp, #16
 8003baa:	4770      	bx	lr

08003bac <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003bac:	b480      	push	{r7}
 8003bae:	b087      	sub	sp, #28
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	60f8      	str	r0, [r7, #12]
 8003bb4:	60b9      	str	r1, [r7, #8]
 8003bb6:	4613      	mov	r3, r2
 8003bb8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8003bba:	79fb      	ldrb	r3, [r7, #7]
 8003bbc:	2b02      	cmp	r3, #2
 8003bbe:	d165      	bne.n	8003c8c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003bc0:	68bb      	ldr	r3, [r7, #8]
 8003bc2:	4a41      	ldr	r2, [pc, #260]	@ (8003cc8 <USB_SetTurnaroundTime+0x11c>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d906      	bls.n	8003bd6 <USB_SetTurnaroundTime+0x2a>
 8003bc8:	68bb      	ldr	r3, [r7, #8]
 8003bca:	4a40      	ldr	r2, [pc, #256]	@ (8003ccc <USB_SetTurnaroundTime+0x120>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d202      	bcs.n	8003bd6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003bd0:	230f      	movs	r3, #15
 8003bd2:	617b      	str	r3, [r7, #20]
 8003bd4:	e062      	b.n	8003c9c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003bd6:	68bb      	ldr	r3, [r7, #8]
 8003bd8:	4a3c      	ldr	r2, [pc, #240]	@ (8003ccc <USB_SetTurnaroundTime+0x120>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d306      	bcc.n	8003bec <USB_SetTurnaroundTime+0x40>
 8003bde:	68bb      	ldr	r3, [r7, #8]
 8003be0:	4a3b      	ldr	r2, [pc, #236]	@ (8003cd0 <USB_SetTurnaroundTime+0x124>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d202      	bcs.n	8003bec <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8003be6:	230e      	movs	r3, #14
 8003be8:	617b      	str	r3, [r7, #20]
 8003bea:	e057      	b.n	8003c9c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003bec:	68bb      	ldr	r3, [r7, #8]
 8003bee:	4a38      	ldr	r2, [pc, #224]	@ (8003cd0 <USB_SetTurnaroundTime+0x124>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d306      	bcc.n	8003c02 <USB_SetTurnaroundTime+0x56>
 8003bf4:	68bb      	ldr	r3, [r7, #8]
 8003bf6:	4a37      	ldr	r2, [pc, #220]	@ (8003cd4 <USB_SetTurnaroundTime+0x128>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d202      	bcs.n	8003c02 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003bfc:	230d      	movs	r3, #13
 8003bfe:	617b      	str	r3, [r7, #20]
 8003c00:	e04c      	b.n	8003c9c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003c02:	68bb      	ldr	r3, [r7, #8]
 8003c04:	4a33      	ldr	r2, [pc, #204]	@ (8003cd4 <USB_SetTurnaroundTime+0x128>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d306      	bcc.n	8003c18 <USB_SetTurnaroundTime+0x6c>
 8003c0a:	68bb      	ldr	r3, [r7, #8]
 8003c0c:	4a32      	ldr	r2, [pc, #200]	@ (8003cd8 <USB_SetTurnaroundTime+0x12c>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d802      	bhi.n	8003c18 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8003c12:	230c      	movs	r3, #12
 8003c14:	617b      	str	r3, [r7, #20]
 8003c16:	e041      	b.n	8003c9c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003c18:	68bb      	ldr	r3, [r7, #8]
 8003c1a:	4a2f      	ldr	r2, [pc, #188]	@ (8003cd8 <USB_SetTurnaroundTime+0x12c>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d906      	bls.n	8003c2e <USB_SetTurnaroundTime+0x82>
 8003c20:	68bb      	ldr	r3, [r7, #8]
 8003c22:	4a2e      	ldr	r2, [pc, #184]	@ (8003cdc <USB_SetTurnaroundTime+0x130>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d802      	bhi.n	8003c2e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003c28:	230b      	movs	r3, #11
 8003c2a:	617b      	str	r3, [r7, #20]
 8003c2c:	e036      	b.n	8003c9c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8003c2e:	68bb      	ldr	r3, [r7, #8]
 8003c30:	4a2a      	ldr	r2, [pc, #168]	@ (8003cdc <USB_SetTurnaroundTime+0x130>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d906      	bls.n	8003c44 <USB_SetTurnaroundTime+0x98>
 8003c36:	68bb      	ldr	r3, [r7, #8]
 8003c38:	4a29      	ldr	r2, [pc, #164]	@ (8003ce0 <USB_SetTurnaroundTime+0x134>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d802      	bhi.n	8003c44 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8003c3e:	230a      	movs	r3, #10
 8003c40:	617b      	str	r3, [r7, #20]
 8003c42:	e02b      	b.n	8003c9c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003c44:	68bb      	ldr	r3, [r7, #8]
 8003c46:	4a26      	ldr	r2, [pc, #152]	@ (8003ce0 <USB_SetTurnaroundTime+0x134>)
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d906      	bls.n	8003c5a <USB_SetTurnaroundTime+0xae>
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	4a25      	ldr	r2, [pc, #148]	@ (8003ce4 <USB_SetTurnaroundTime+0x138>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d202      	bcs.n	8003c5a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003c54:	2309      	movs	r3, #9
 8003c56:	617b      	str	r3, [r7, #20]
 8003c58:	e020      	b.n	8003c9c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8003c5a:	68bb      	ldr	r3, [r7, #8]
 8003c5c:	4a21      	ldr	r2, [pc, #132]	@ (8003ce4 <USB_SetTurnaroundTime+0x138>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d306      	bcc.n	8003c70 <USB_SetTurnaroundTime+0xc4>
 8003c62:	68bb      	ldr	r3, [r7, #8]
 8003c64:	4a20      	ldr	r2, [pc, #128]	@ (8003ce8 <USB_SetTurnaroundTime+0x13c>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d802      	bhi.n	8003c70 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8003c6a:	2308      	movs	r3, #8
 8003c6c:	617b      	str	r3, [r7, #20]
 8003c6e:	e015      	b.n	8003c9c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003c70:	68bb      	ldr	r3, [r7, #8]
 8003c72:	4a1d      	ldr	r2, [pc, #116]	@ (8003ce8 <USB_SetTurnaroundTime+0x13c>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d906      	bls.n	8003c86 <USB_SetTurnaroundTime+0xda>
 8003c78:	68bb      	ldr	r3, [r7, #8]
 8003c7a:	4a1c      	ldr	r2, [pc, #112]	@ (8003cec <USB_SetTurnaroundTime+0x140>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d202      	bcs.n	8003c86 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003c80:	2307      	movs	r3, #7
 8003c82:	617b      	str	r3, [r7, #20]
 8003c84:	e00a      	b.n	8003c9c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8003c86:	2306      	movs	r3, #6
 8003c88:	617b      	str	r3, [r7, #20]
 8003c8a:	e007      	b.n	8003c9c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8003c8c:	79fb      	ldrb	r3, [r7, #7]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d102      	bne.n	8003c98 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8003c92:	2309      	movs	r3, #9
 8003c94:	617b      	str	r3, [r7, #20]
 8003c96:	e001      	b.n	8003c9c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003c98:	2309      	movs	r3, #9
 8003c9a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	68db      	ldr	r3, [r3, #12]
 8003ca0:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	68da      	ldr	r2, [r3, #12]
 8003cac:	697b      	ldr	r3, [r7, #20]
 8003cae:	029b      	lsls	r3, r3, #10
 8003cb0:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8003cb4:	431a      	orrs	r2, r3
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003cba:	2300      	movs	r3, #0
}
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	371c      	adds	r7, #28
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc6:	4770      	bx	lr
 8003cc8:	00d8acbf 	.word	0x00d8acbf
 8003ccc:	00e4e1c0 	.word	0x00e4e1c0
 8003cd0:	00f42400 	.word	0x00f42400
 8003cd4:	01067380 	.word	0x01067380
 8003cd8:	011a499f 	.word	0x011a499f
 8003cdc:	01312cff 	.word	0x01312cff
 8003ce0:	014ca43f 	.word	0x014ca43f
 8003ce4:	016e3600 	.word	0x016e3600
 8003ce8:	01a6ab1f 	.word	0x01a6ab1f
 8003cec:	01e84800 	.word	0x01e84800

08003cf0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	b083      	sub	sp, #12
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	689b      	ldr	r3, [r3, #8]
 8003cfc:	f043 0201 	orr.w	r2, r3, #1
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003d04:	2300      	movs	r3, #0
}
 8003d06:	4618      	mov	r0, r3
 8003d08:	370c      	adds	r7, #12
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d10:	4770      	bx	lr

08003d12 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003d12:	b480      	push	{r7}
 8003d14:	b083      	sub	sp, #12
 8003d16:	af00      	add	r7, sp, #0
 8003d18:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	689b      	ldr	r3, [r3, #8]
 8003d1e:	f023 0201 	bic.w	r2, r3, #1
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003d26:	2300      	movs	r3, #0
}
 8003d28:	4618      	mov	r0, r3
 8003d2a:	370c      	adds	r7, #12
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d32:	4770      	bx	lr

08003d34 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b084      	sub	sp, #16
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
 8003d3c:	460b      	mov	r3, r1
 8003d3e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003d40:	2300      	movs	r3, #0
 8003d42:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	68db      	ldr	r3, [r3, #12]
 8003d48:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003d50:	78fb      	ldrb	r3, [r7, #3]
 8003d52:	2b01      	cmp	r3, #1
 8003d54:	d115      	bne.n	8003d82 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	68db      	ldr	r3, [r3, #12]
 8003d5a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003d62:	200a      	movs	r0, #10
 8003d64:	f7fd f952 	bl	800100c <HAL_Delay>
      ms += 10U;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	330a      	adds	r3, #10
 8003d6c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003d6e:	6878      	ldr	r0, [r7, #4]
 8003d70:	f001 f93f 	bl	8004ff2 <USB_GetMode>
 8003d74:	4603      	mov	r3, r0
 8003d76:	2b01      	cmp	r3, #1
 8003d78:	d01e      	beq.n	8003db8 <USB_SetCurrentMode+0x84>
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	2bc7      	cmp	r3, #199	@ 0xc7
 8003d7e:	d9f0      	bls.n	8003d62 <USB_SetCurrentMode+0x2e>
 8003d80:	e01a      	b.n	8003db8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003d82:	78fb      	ldrb	r3, [r7, #3]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d115      	bne.n	8003db4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	68db      	ldr	r3, [r3, #12]
 8003d8c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003d94:	200a      	movs	r0, #10
 8003d96:	f7fd f939 	bl	800100c <HAL_Delay>
      ms += 10U;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	330a      	adds	r3, #10
 8003d9e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003da0:	6878      	ldr	r0, [r7, #4]
 8003da2:	f001 f926 	bl	8004ff2 <USB_GetMode>
 8003da6:	4603      	mov	r3, r0
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d005      	beq.n	8003db8 <USB_SetCurrentMode+0x84>
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	2bc7      	cmp	r3, #199	@ 0xc7
 8003db0:	d9f0      	bls.n	8003d94 <USB_SetCurrentMode+0x60>
 8003db2:	e001      	b.n	8003db8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003db4:	2301      	movs	r3, #1
 8003db6:	e005      	b.n	8003dc4 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	2bc8      	cmp	r3, #200	@ 0xc8
 8003dbc:	d101      	bne.n	8003dc2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	e000      	b.n	8003dc4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003dc2:	2300      	movs	r3, #0
}
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	3710      	adds	r7, #16
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	bd80      	pop	{r7, pc}

08003dcc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003dcc:	b084      	sub	sp, #16
 8003dce:	b580      	push	{r7, lr}
 8003dd0:	b086      	sub	sp, #24
 8003dd2:	af00      	add	r7, sp, #0
 8003dd4:	6078      	str	r0, [r7, #4]
 8003dd6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8003dda:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003dde:	2300      	movs	r3, #0
 8003de0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003de6:	2300      	movs	r3, #0
 8003de8:	613b      	str	r3, [r7, #16]
 8003dea:	e009      	b.n	8003e00 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003dec:	687a      	ldr	r2, [r7, #4]
 8003dee:	693b      	ldr	r3, [r7, #16]
 8003df0:	3340      	adds	r3, #64	@ 0x40
 8003df2:	009b      	lsls	r3, r3, #2
 8003df4:	4413      	add	r3, r2
 8003df6:	2200      	movs	r2, #0
 8003df8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003dfa:	693b      	ldr	r3, [r7, #16]
 8003dfc:	3301      	adds	r3, #1
 8003dfe:	613b      	str	r3, [r7, #16]
 8003e00:	693b      	ldr	r3, [r7, #16]
 8003e02:	2b0e      	cmp	r3, #14
 8003e04:	d9f2      	bls.n	8003dec <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003e06:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d11c      	bne.n	8003e48 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	68fa      	ldr	r2, [r7, #12]
 8003e18:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003e1c:	f043 0302 	orr.w	r3, r3, #2
 8003e20:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e26:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e32:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e3e:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	639a      	str	r2, [r3, #56]	@ 0x38
 8003e46:	e00b      	b.n	8003e60 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e4c:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e58:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8003e66:	461a      	mov	r2, r3
 8003e68:	2300      	movs	r3, #0
 8003e6a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003e6c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8003e70:	2b01      	cmp	r3, #1
 8003e72:	d10d      	bne.n	8003e90 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003e74:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d104      	bne.n	8003e86 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003e7c:	2100      	movs	r1, #0
 8003e7e:	6878      	ldr	r0, [r7, #4]
 8003e80:	f000 f968 	bl	8004154 <USB_SetDevSpeed>
 8003e84:	e008      	b.n	8003e98 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003e86:	2101      	movs	r1, #1
 8003e88:	6878      	ldr	r0, [r7, #4]
 8003e8a:	f000 f963 	bl	8004154 <USB_SetDevSpeed>
 8003e8e:	e003      	b.n	8003e98 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003e90:	2103      	movs	r1, #3
 8003e92:	6878      	ldr	r0, [r7, #4]
 8003e94:	f000 f95e 	bl	8004154 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003e98:	2110      	movs	r1, #16
 8003e9a:	6878      	ldr	r0, [r7, #4]
 8003e9c:	f000 f8fa 	bl	8004094 <USB_FlushTxFifo>
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d001      	beq.n	8003eaa <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003eaa:	6878      	ldr	r0, [r7, #4]
 8003eac:	f000 f924 	bl	80040f8 <USB_FlushRxFifo>
 8003eb0:	4603      	mov	r3, r0
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d001      	beq.n	8003eba <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003ec0:	461a      	mov	r2, r3
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003ecc:	461a      	mov	r2, r3
 8003ece:	2300      	movs	r3, #0
 8003ed0:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003ed8:	461a      	mov	r2, r3
 8003eda:	2300      	movs	r3, #0
 8003edc:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003ede:	2300      	movs	r3, #0
 8003ee0:	613b      	str	r3, [r7, #16]
 8003ee2:	e043      	b.n	8003f6c <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003ee4:	693b      	ldr	r3, [r7, #16]
 8003ee6:	015a      	lsls	r2, r3, #5
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	4413      	add	r3, r2
 8003eec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003ef6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003efa:	d118      	bne.n	8003f2e <USB_DevInit+0x162>
    {
      if (i == 0U)
 8003efc:	693b      	ldr	r3, [r7, #16]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d10a      	bne.n	8003f18 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003f02:	693b      	ldr	r3, [r7, #16]
 8003f04:	015a      	lsls	r2, r3, #5
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	4413      	add	r3, r2
 8003f0a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003f0e:	461a      	mov	r2, r3
 8003f10:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8003f14:	6013      	str	r3, [r2, #0]
 8003f16:	e013      	b.n	8003f40 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003f18:	693b      	ldr	r3, [r7, #16]
 8003f1a:	015a      	lsls	r2, r3, #5
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	4413      	add	r3, r2
 8003f20:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003f24:	461a      	mov	r2, r3
 8003f26:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8003f2a:	6013      	str	r3, [r2, #0]
 8003f2c:	e008      	b.n	8003f40 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003f2e:	693b      	ldr	r3, [r7, #16]
 8003f30:	015a      	lsls	r2, r3, #5
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	4413      	add	r3, r2
 8003f36:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003f3a:	461a      	mov	r2, r3
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003f40:	693b      	ldr	r3, [r7, #16]
 8003f42:	015a      	lsls	r2, r3, #5
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	4413      	add	r3, r2
 8003f48:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003f4c:	461a      	mov	r2, r3
 8003f4e:	2300      	movs	r3, #0
 8003f50:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003f52:	693b      	ldr	r3, [r7, #16]
 8003f54:	015a      	lsls	r2, r3, #5
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	4413      	add	r3, r2
 8003f5a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003f5e:	461a      	mov	r2, r3
 8003f60:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003f64:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003f66:	693b      	ldr	r3, [r7, #16]
 8003f68:	3301      	adds	r3, #1
 8003f6a:	613b      	str	r3, [r7, #16]
 8003f6c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003f70:	461a      	mov	r2, r3
 8003f72:	693b      	ldr	r3, [r7, #16]
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d3b5      	bcc.n	8003ee4 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003f78:	2300      	movs	r3, #0
 8003f7a:	613b      	str	r3, [r7, #16]
 8003f7c:	e043      	b.n	8004006 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003f7e:	693b      	ldr	r3, [r7, #16]
 8003f80:	015a      	lsls	r2, r3, #5
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	4413      	add	r3, r2
 8003f86:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003f90:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003f94:	d118      	bne.n	8003fc8 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8003f96:	693b      	ldr	r3, [r7, #16]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d10a      	bne.n	8003fb2 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003f9c:	693b      	ldr	r3, [r7, #16]
 8003f9e:	015a      	lsls	r2, r3, #5
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	4413      	add	r3, r2
 8003fa4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003fa8:	461a      	mov	r2, r3
 8003faa:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8003fae:	6013      	str	r3, [r2, #0]
 8003fb0:	e013      	b.n	8003fda <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003fb2:	693b      	ldr	r3, [r7, #16]
 8003fb4:	015a      	lsls	r2, r3, #5
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	4413      	add	r3, r2
 8003fba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003fbe:	461a      	mov	r2, r3
 8003fc0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8003fc4:	6013      	str	r3, [r2, #0]
 8003fc6:	e008      	b.n	8003fda <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003fc8:	693b      	ldr	r3, [r7, #16]
 8003fca:	015a      	lsls	r2, r3, #5
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	4413      	add	r3, r2
 8003fd0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003fd4:	461a      	mov	r2, r3
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003fda:	693b      	ldr	r3, [r7, #16]
 8003fdc:	015a      	lsls	r2, r3, #5
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	4413      	add	r3, r2
 8003fe2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003fe6:	461a      	mov	r2, r3
 8003fe8:	2300      	movs	r3, #0
 8003fea:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003fec:	693b      	ldr	r3, [r7, #16]
 8003fee:	015a      	lsls	r2, r3, #5
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	4413      	add	r3, r2
 8003ff4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ff8:	461a      	mov	r2, r3
 8003ffa:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003ffe:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004000:	693b      	ldr	r3, [r7, #16]
 8004002:	3301      	adds	r3, #1
 8004004:	613b      	str	r3, [r7, #16]
 8004006:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800400a:	461a      	mov	r2, r3
 800400c:	693b      	ldr	r3, [r7, #16]
 800400e:	4293      	cmp	r3, r2
 8004010:	d3b5      	bcc.n	8003f7e <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004018:	691b      	ldr	r3, [r3, #16]
 800401a:	68fa      	ldr	r2, [r7, #12]
 800401c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004020:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004024:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2200      	movs	r2, #0
 800402a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8004032:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004034:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004038:	2b00      	cmp	r3, #0
 800403a:	d105      	bne.n	8004048 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	699b      	ldr	r3, [r3, #24]
 8004040:	f043 0210 	orr.w	r2, r3, #16
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	699a      	ldr	r2, [r3, #24]
 800404c:	4b10      	ldr	r3, [pc, #64]	@ (8004090 <USB_DevInit+0x2c4>)
 800404e:	4313      	orrs	r3, r2
 8004050:	687a      	ldr	r2, [r7, #4]
 8004052:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004054:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8004058:	2b00      	cmp	r3, #0
 800405a:	d005      	beq.n	8004068 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	699b      	ldr	r3, [r3, #24]
 8004060:	f043 0208 	orr.w	r2, r3, #8
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004068:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800406c:	2b01      	cmp	r3, #1
 800406e:	d107      	bne.n	8004080 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	699b      	ldr	r3, [r3, #24]
 8004074:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004078:	f043 0304 	orr.w	r3, r3, #4
 800407c:	687a      	ldr	r2, [r7, #4]
 800407e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004080:	7dfb      	ldrb	r3, [r7, #23]
}
 8004082:	4618      	mov	r0, r3
 8004084:	3718      	adds	r7, #24
 8004086:	46bd      	mov	sp, r7
 8004088:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800408c:	b004      	add	sp, #16
 800408e:	4770      	bx	lr
 8004090:	803c3800 	.word	0x803c3800

08004094 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004094:	b480      	push	{r7}
 8004096:	b085      	sub	sp, #20
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
 800409c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800409e:	2300      	movs	r3, #0
 80040a0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	3301      	adds	r3, #1
 80040a6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80040ae:	d901      	bls.n	80040b4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80040b0:	2303      	movs	r3, #3
 80040b2:	e01b      	b.n	80040ec <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	691b      	ldr	r3, [r3, #16]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	daf2      	bge.n	80040a2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80040bc:	2300      	movs	r3, #0
 80040be:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	019b      	lsls	r3, r3, #6
 80040c4:	f043 0220 	orr.w	r2, r3, #32
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	3301      	adds	r3, #1
 80040d0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80040d8:	d901      	bls.n	80040de <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80040da:	2303      	movs	r3, #3
 80040dc:	e006      	b.n	80040ec <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	691b      	ldr	r3, [r3, #16]
 80040e2:	f003 0320 	and.w	r3, r3, #32
 80040e6:	2b20      	cmp	r3, #32
 80040e8:	d0f0      	beq.n	80040cc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80040ea:	2300      	movs	r3, #0
}
 80040ec:	4618      	mov	r0, r3
 80040ee:	3714      	adds	r7, #20
 80040f0:	46bd      	mov	sp, r7
 80040f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f6:	4770      	bx	lr

080040f8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80040f8:	b480      	push	{r7}
 80040fa:	b085      	sub	sp, #20
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004100:	2300      	movs	r3, #0
 8004102:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	3301      	adds	r3, #1
 8004108:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004110:	d901      	bls.n	8004116 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004112:	2303      	movs	r3, #3
 8004114:	e018      	b.n	8004148 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	691b      	ldr	r3, [r3, #16]
 800411a:	2b00      	cmp	r3, #0
 800411c:	daf2      	bge.n	8004104 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800411e:	2300      	movs	r3, #0
 8004120:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2210      	movs	r2, #16
 8004126:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	3301      	adds	r3, #1
 800412c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004134:	d901      	bls.n	800413a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004136:	2303      	movs	r3, #3
 8004138:	e006      	b.n	8004148 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	691b      	ldr	r3, [r3, #16]
 800413e:	f003 0310 	and.w	r3, r3, #16
 8004142:	2b10      	cmp	r3, #16
 8004144:	d0f0      	beq.n	8004128 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004146:	2300      	movs	r3, #0
}
 8004148:	4618      	mov	r0, r3
 800414a:	3714      	adds	r7, #20
 800414c:	46bd      	mov	sp, r7
 800414e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004152:	4770      	bx	lr

08004154 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004154:	b480      	push	{r7}
 8004156:	b085      	sub	sp, #20
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
 800415c:	460b      	mov	r3, r1
 800415e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800416a:	681a      	ldr	r2, [r3, #0]
 800416c:	78fb      	ldrb	r3, [r7, #3]
 800416e:	68f9      	ldr	r1, [r7, #12]
 8004170:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004174:	4313      	orrs	r3, r2
 8004176:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004178:	2300      	movs	r3, #0
}
 800417a:	4618      	mov	r0, r3
 800417c:	3714      	adds	r7, #20
 800417e:	46bd      	mov	sp, r7
 8004180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004184:	4770      	bx	lr

08004186 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8004186:	b480      	push	{r7}
 8004188:	b087      	sub	sp, #28
 800418a:	af00      	add	r7, sp, #0
 800418c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004192:	693b      	ldr	r3, [r7, #16]
 8004194:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004198:	689b      	ldr	r3, [r3, #8]
 800419a:	f003 0306 	and.w	r3, r3, #6
 800419e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d102      	bne.n	80041ac <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80041a6:	2300      	movs	r3, #0
 80041a8:	75fb      	strb	r3, [r7, #23]
 80041aa:	e00a      	b.n	80041c2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	2b02      	cmp	r3, #2
 80041b0:	d002      	beq.n	80041b8 <USB_GetDevSpeed+0x32>
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	2b06      	cmp	r3, #6
 80041b6:	d102      	bne.n	80041be <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80041b8:	2302      	movs	r3, #2
 80041ba:	75fb      	strb	r3, [r7, #23]
 80041bc:	e001      	b.n	80041c2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80041be:	230f      	movs	r3, #15
 80041c0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80041c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80041c4:	4618      	mov	r0, r3
 80041c6:	371c      	adds	r7, #28
 80041c8:	46bd      	mov	sp, r7
 80041ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ce:	4770      	bx	lr

080041d0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80041d0:	b480      	push	{r7}
 80041d2:	b085      	sub	sp, #20
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
 80041d8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	781b      	ldrb	r3, [r3, #0]
 80041e2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	785b      	ldrb	r3, [r3, #1]
 80041e8:	2b01      	cmp	r3, #1
 80041ea:	d13a      	bne.n	8004262 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80041f2:	69da      	ldr	r2, [r3, #28]
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	781b      	ldrb	r3, [r3, #0]
 80041f8:	f003 030f 	and.w	r3, r3, #15
 80041fc:	2101      	movs	r1, #1
 80041fe:	fa01 f303 	lsl.w	r3, r1, r3
 8004202:	b29b      	uxth	r3, r3
 8004204:	68f9      	ldr	r1, [r7, #12]
 8004206:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800420a:	4313      	orrs	r3, r2
 800420c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800420e:	68bb      	ldr	r3, [r7, #8]
 8004210:	015a      	lsls	r2, r3, #5
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	4413      	add	r3, r2
 8004216:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004220:	2b00      	cmp	r3, #0
 8004222:	d155      	bne.n	80042d0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004224:	68bb      	ldr	r3, [r7, #8]
 8004226:	015a      	lsls	r2, r3, #5
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	4413      	add	r3, r2
 800422c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004230:	681a      	ldr	r2, [r3, #0]
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	689b      	ldr	r3, [r3, #8]
 8004236:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	791b      	ldrb	r3, [r3, #4]
 800423e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004240:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004242:	68bb      	ldr	r3, [r7, #8]
 8004244:	059b      	lsls	r3, r3, #22
 8004246:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004248:	4313      	orrs	r3, r2
 800424a:	68ba      	ldr	r2, [r7, #8]
 800424c:	0151      	lsls	r1, r2, #5
 800424e:	68fa      	ldr	r2, [r7, #12]
 8004250:	440a      	add	r2, r1
 8004252:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004256:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800425a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800425e:	6013      	str	r3, [r2, #0]
 8004260:	e036      	b.n	80042d0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004268:	69da      	ldr	r2, [r3, #28]
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	781b      	ldrb	r3, [r3, #0]
 800426e:	f003 030f 	and.w	r3, r3, #15
 8004272:	2101      	movs	r1, #1
 8004274:	fa01 f303 	lsl.w	r3, r1, r3
 8004278:	041b      	lsls	r3, r3, #16
 800427a:	68f9      	ldr	r1, [r7, #12]
 800427c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004280:	4313      	orrs	r3, r2
 8004282:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004284:	68bb      	ldr	r3, [r7, #8]
 8004286:	015a      	lsls	r2, r3, #5
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	4413      	add	r3, r2
 800428c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004296:	2b00      	cmp	r3, #0
 8004298:	d11a      	bne.n	80042d0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800429a:	68bb      	ldr	r3, [r7, #8]
 800429c:	015a      	lsls	r2, r3, #5
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	4413      	add	r3, r2
 80042a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80042a6:	681a      	ldr	r2, [r3, #0]
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	689b      	ldr	r3, [r3, #8]
 80042ac:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	791b      	ldrb	r3, [r3, #4]
 80042b4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80042b6:	430b      	orrs	r3, r1
 80042b8:	4313      	orrs	r3, r2
 80042ba:	68ba      	ldr	r2, [r7, #8]
 80042bc:	0151      	lsls	r1, r2, #5
 80042be:	68fa      	ldr	r2, [r7, #12]
 80042c0:	440a      	add	r2, r1
 80042c2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80042c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80042ca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80042ce:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80042d0:	2300      	movs	r3, #0
}
 80042d2:	4618      	mov	r0, r3
 80042d4:	3714      	adds	r7, #20
 80042d6:	46bd      	mov	sp, r7
 80042d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042dc:	4770      	bx	lr
	...

080042e0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80042e0:	b480      	push	{r7}
 80042e2:	b085      	sub	sp, #20
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
 80042e8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	781b      	ldrb	r3, [r3, #0]
 80042f2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	785b      	ldrb	r3, [r3, #1]
 80042f8:	2b01      	cmp	r3, #1
 80042fa:	d161      	bne.n	80043c0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80042fc:	68bb      	ldr	r3, [r7, #8]
 80042fe:	015a      	lsls	r2, r3, #5
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	4413      	add	r3, r2
 8004304:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800430e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004312:	d11f      	bne.n	8004354 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004314:	68bb      	ldr	r3, [r7, #8]
 8004316:	015a      	lsls	r2, r3, #5
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	4413      	add	r3, r2
 800431c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	68ba      	ldr	r2, [r7, #8]
 8004324:	0151      	lsls	r1, r2, #5
 8004326:	68fa      	ldr	r2, [r7, #12]
 8004328:	440a      	add	r2, r1
 800432a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800432e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004332:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004334:	68bb      	ldr	r3, [r7, #8]
 8004336:	015a      	lsls	r2, r3, #5
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	4413      	add	r3, r2
 800433c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	68ba      	ldr	r2, [r7, #8]
 8004344:	0151      	lsls	r1, r2, #5
 8004346:	68fa      	ldr	r2, [r7, #12]
 8004348:	440a      	add	r2, r1
 800434a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800434e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004352:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800435a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	781b      	ldrb	r3, [r3, #0]
 8004360:	f003 030f 	and.w	r3, r3, #15
 8004364:	2101      	movs	r1, #1
 8004366:	fa01 f303 	lsl.w	r3, r1, r3
 800436a:	b29b      	uxth	r3, r3
 800436c:	43db      	mvns	r3, r3
 800436e:	68f9      	ldr	r1, [r7, #12]
 8004370:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004374:	4013      	ands	r3, r2
 8004376:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800437e:	69da      	ldr	r2, [r3, #28]
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	781b      	ldrb	r3, [r3, #0]
 8004384:	f003 030f 	and.w	r3, r3, #15
 8004388:	2101      	movs	r1, #1
 800438a:	fa01 f303 	lsl.w	r3, r1, r3
 800438e:	b29b      	uxth	r3, r3
 8004390:	43db      	mvns	r3, r3
 8004392:	68f9      	ldr	r1, [r7, #12]
 8004394:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004398:	4013      	ands	r3, r2
 800439a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800439c:	68bb      	ldr	r3, [r7, #8]
 800439e:	015a      	lsls	r2, r3, #5
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	4413      	add	r3, r2
 80043a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80043a8:	681a      	ldr	r2, [r3, #0]
 80043aa:	68bb      	ldr	r3, [r7, #8]
 80043ac:	0159      	lsls	r1, r3, #5
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	440b      	add	r3, r1
 80043b2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80043b6:	4619      	mov	r1, r3
 80043b8:	4b35      	ldr	r3, [pc, #212]	@ (8004490 <USB_DeactivateEndpoint+0x1b0>)
 80043ba:	4013      	ands	r3, r2
 80043bc:	600b      	str	r3, [r1, #0]
 80043be:	e060      	b.n	8004482 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80043c0:	68bb      	ldr	r3, [r7, #8]
 80043c2:	015a      	lsls	r2, r3, #5
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	4413      	add	r3, r2
 80043c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80043d2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80043d6:	d11f      	bne.n	8004418 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80043d8:	68bb      	ldr	r3, [r7, #8]
 80043da:	015a      	lsls	r2, r3, #5
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	4413      	add	r3, r2
 80043e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	68ba      	ldr	r2, [r7, #8]
 80043e8:	0151      	lsls	r1, r2, #5
 80043ea:	68fa      	ldr	r2, [r7, #12]
 80043ec:	440a      	add	r2, r1
 80043ee:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80043f2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80043f6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	015a      	lsls	r2, r3, #5
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	4413      	add	r3, r2
 8004400:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	68ba      	ldr	r2, [r7, #8]
 8004408:	0151      	lsls	r1, r2, #5
 800440a:	68fa      	ldr	r2, [r7, #12]
 800440c:	440a      	add	r2, r1
 800440e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004412:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004416:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800441e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	781b      	ldrb	r3, [r3, #0]
 8004424:	f003 030f 	and.w	r3, r3, #15
 8004428:	2101      	movs	r1, #1
 800442a:	fa01 f303 	lsl.w	r3, r1, r3
 800442e:	041b      	lsls	r3, r3, #16
 8004430:	43db      	mvns	r3, r3
 8004432:	68f9      	ldr	r1, [r7, #12]
 8004434:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004438:	4013      	ands	r3, r2
 800443a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004442:	69da      	ldr	r2, [r3, #28]
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	781b      	ldrb	r3, [r3, #0]
 8004448:	f003 030f 	and.w	r3, r3, #15
 800444c:	2101      	movs	r1, #1
 800444e:	fa01 f303 	lsl.w	r3, r1, r3
 8004452:	041b      	lsls	r3, r3, #16
 8004454:	43db      	mvns	r3, r3
 8004456:	68f9      	ldr	r1, [r7, #12]
 8004458:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800445c:	4013      	ands	r3, r2
 800445e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	015a      	lsls	r2, r3, #5
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	4413      	add	r3, r2
 8004468:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800446c:	681a      	ldr	r2, [r3, #0]
 800446e:	68bb      	ldr	r3, [r7, #8]
 8004470:	0159      	lsls	r1, r3, #5
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	440b      	add	r3, r1
 8004476:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800447a:	4619      	mov	r1, r3
 800447c:	4b05      	ldr	r3, [pc, #20]	@ (8004494 <USB_DeactivateEndpoint+0x1b4>)
 800447e:	4013      	ands	r3, r2
 8004480:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004482:	2300      	movs	r3, #0
}
 8004484:	4618      	mov	r0, r3
 8004486:	3714      	adds	r7, #20
 8004488:	46bd      	mov	sp, r7
 800448a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448e:	4770      	bx	lr
 8004490:	ec337800 	.word	0xec337800
 8004494:	eff37800 	.word	0xeff37800

08004498 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b08a      	sub	sp, #40	@ 0x28
 800449c:	af02      	add	r7, sp, #8
 800449e:	60f8      	str	r0, [r7, #12]
 80044a0:	60b9      	str	r1, [r7, #8]
 80044a2:	4613      	mov	r3, r2
 80044a4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80044aa:	68bb      	ldr	r3, [r7, #8]
 80044ac:	781b      	ldrb	r3, [r3, #0]
 80044ae:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80044b0:	68bb      	ldr	r3, [r7, #8]
 80044b2:	785b      	ldrb	r3, [r3, #1]
 80044b4:	2b01      	cmp	r3, #1
 80044b6:	f040 817f 	bne.w	80047b8 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80044ba:	68bb      	ldr	r3, [r7, #8]
 80044bc:	691b      	ldr	r3, [r3, #16]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d132      	bne.n	8004528 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80044c2:	69bb      	ldr	r3, [r7, #24]
 80044c4:	015a      	lsls	r2, r3, #5
 80044c6:	69fb      	ldr	r3, [r7, #28]
 80044c8:	4413      	add	r3, r2
 80044ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80044ce:	691b      	ldr	r3, [r3, #16]
 80044d0:	69ba      	ldr	r2, [r7, #24]
 80044d2:	0151      	lsls	r1, r2, #5
 80044d4:	69fa      	ldr	r2, [r7, #28]
 80044d6:	440a      	add	r2, r1
 80044d8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80044dc:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80044e0:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80044e4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80044e6:	69bb      	ldr	r3, [r7, #24]
 80044e8:	015a      	lsls	r2, r3, #5
 80044ea:	69fb      	ldr	r3, [r7, #28]
 80044ec:	4413      	add	r3, r2
 80044ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80044f2:	691b      	ldr	r3, [r3, #16]
 80044f4:	69ba      	ldr	r2, [r7, #24]
 80044f6:	0151      	lsls	r1, r2, #5
 80044f8:	69fa      	ldr	r2, [r7, #28]
 80044fa:	440a      	add	r2, r1
 80044fc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004500:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004504:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004506:	69bb      	ldr	r3, [r7, #24]
 8004508:	015a      	lsls	r2, r3, #5
 800450a:	69fb      	ldr	r3, [r7, #28]
 800450c:	4413      	add	r3, r2
 800450e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004512:	691b      	ldr	r3, [r3, #16]
 8004514:	69ba      	ldr	r2, [r7, #24]
 8004516:	0151      	lsls	r1, r2, #5
 8004518:	69fa      	ldr	r2, [r7, #28]
 800451a:	440a      	add	r2, r1
 800451c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004520:	0cdb      	lsrs	r3, r3, #19
 8004522:	04db      	lsls	r3, r3, #19
 8004524:	6113      	str	r3, [r2, #16]
 8004526:	e097      	b.n	8004658 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004528:	69bb      	ldr	r3, [r7, #24]
 800452a:	015a      	lsls	r2, r3, #5
 800452c:	69fb      	ldr	r3, [r7, #28]
 800452e:	4413      	add	r3, r2
 8004530:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004534:	691b      	ldr	r3, [r3, #16]
 8004536:	69ba      	ldr	r2, [r7, #24]
 8004538:	0151      	lsls	r1, r2, #5
 800453a:	69fa      	ldr	r2, [r7, #28]
 800453c:	440a      	add	r2, r1
 800453e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004542:	0cdb      	lsrs	r3, r3, #19
 8004544:	04db      	lsls	r3, r3, #19
 8004546:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004548:	69bb      	ldr	r3, [r7, #24]
 800454a:	015a      	lsls	r2, r3, #5
 800454c:	69fb      	ldr	r3, [r7, #28]
 800454e:	4413      	add	r3, r2
 8004550:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004554:	691b      	ldr	r3, [r3, #16]
 8004556:	69ba      	ldr	r2, [r7, #24]
 8004558:	0151      	lsls	r1, r2, #5
 800455a:	69fa      	ldr	r2, [r7, #28]
 800455c:	440a      	add	r2, r1
 800455e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004562:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8004566:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800456a:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 800456c:	69bb      	ldr	r3, [r7, #24]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d11a      	bne.n	80045a8 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8004572:	68bb      	ldr	r3, [r7, #8]
 8004574:	691a      	ldr	r2, [r3, #16]
 8004576:	68bb      	ldr	r3, [r7, #8]
 8004578:	689b      	ldr	r3, [r3, #8]
 800457a:	429a      	cmp	r2, r3
 800457c:	d903      	bls.n	8004586 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800457e:	68bb      	ldr	r3, [r7, #8]
 8004580:	689a      	ldr	r2, [r3, #8]
 8004582:	68bb      	ldr	r3, [r7, #8]
 8004584:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004586:	69bb      	ldr	r3, [r7, #24]
 8004588:	015a      	lsls	r2, r3, #5
 800458a:	69fb      	ldr	r3, [r7, #28]
 800458c:	4413      	add	r3, r2
 800458e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004592:	691b      	ldr	r3, [r3, #16]
 8004594:	69ba      	ldr	r2, [r7, #24]
 8004596:	0151      	lsls	r1, r2, #5
 8004598:	69fa      	ldr	r2, [r7, #28]
 800459a:	440a      	add	r2, r1
 800459c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80045a0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80045a4:	6113      	str	r3, [r2, #16]
 80045a6:	e044      	b.n	8004632 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80045a8:	68bb      	ldr	r3, [r7, #8]
 80045aa:	691a      	ldr	r2, [r3, #16]
 80045ac:	68bb      	ldr	r3, [r7, #8]
 80045ae:	689b      	ldr	r3, [r3, #8]
 80045b0:	4413      	add	r3, r2
 80045b2:	1e5a      	subs	r2, r3, #1
 80045b4:	68bb      	ldr	r3, [r7, #8]
 80045b6:	689b      	ldr	r3, [r3, #8]
 80045b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80045bc:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 80045be:	69bb      	ldr	r3, [r7, #24]
 80045c0:	015a      	lsls	r2, r3, #5
 80045c2:	69fb      	ldr	r3, [r7, #28]
 80045c4:	4413      	add	r3, r2
 80045c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80045ca:	691a      	ldr	r2, [r3, #16]
 80045cc:	8afb      	ldrh	r3, [r7, #22]
 80045ce:	04d9      	lsls	r1, r3, #19
 80045d0:	4ba4      	ldr	r3, [pc, #656]	@ (8004864 <USB_EPStartXfer+0x3cc>)
 80045d2:	400b      	ands	r3, r1
 80045d4:	69b9      	ldr	r1, [r7, #24]
 80045d6:	0148      	lsls	r0, r1, #5
 80045d8:	69f9      	ldr	r1, [r7, #28]
 80045da:	4401      	add	r1, r0
 80045dc:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80045e0:	4313      	orrs	r3, r2
 80045e2:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	791b      	ldrb	r3, [r3, #4]
 80045e8:	2b01      	cmp	r3, #1
 80045ea:	d122      	bne.n	8004632 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80045ec:	69bb      	ldr	r3, [r7, #24]
 80045ee:	015a      	lsls	r2, r3, #5
 80045f0:	69fb      	ldr	r3, [r7, #28]
 80045f2:	4413      	add	r3, r2
 80045f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80045f8:	691b      	ldr	r3, [r3, #16]
 80045fa:	69ba      	ldr	r2, [r7, #24]
 80045fc:	0151      	lsls	r1, r2, #5
 80045fe:	69fa      	ldr	r2, [r7, #28]
 8004600:	440a      	add	r2, r1
 8004602:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004606:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800460a:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 800460c:	69bb      	ldr	r3, [r7, #24]
 800460e:	015a      	lsls	r2, r3, #5
 8004610:	69fb      	ldr	r3, [r7, #28]
 8004612:	4413      	add	r3, r2
 8004614:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004618:	691a      	ldr	r2, [r3, #16]
 800461a:	8afb      	ldrh	r3, [r7, #22]
 800461c:	075b      	lsls	r3, r3, #29
 800461e:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8004622:	69b9      	ldr	r1, [r7, #24]
 8004624:	0148      	lsls	r0, r1, #5
 8004626:	69f9      	ldr	r1, [r7, #28]
 8004628:	4401      	add	r1, r0
 800462a:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800462e:	4313      	orrs	r3, r2
 8004630:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004632:	69bb      	ldr	r3, [r7, #24]
 8004634:	015a      	lsls	r2, r3, #5
 8004636:	69fb      	ldr	r3, [r7, #28]
 8004638:	4413      	add	r3, r2
 800463a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800463e:	691a      	ldr	r2, [r3, #16]
 8004640:	68bb      	ldr	r3, [r7, #8]
 8004642:	691b      	ldr	r3, [r3, #16]
 8004644:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004648:	69b9      	ldr	r1, [r7, #24]
 800464a:	0148      	lsls	r0, r1, #5
 800464c:	69f9      	ldr	r1, [r7, #28]
 800464e:	4401      	add	r1, r0
 8004650:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8004654:	4313      	orrs	r3, r2
 8004656:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004658:	79fb      	ldrb	r3, [r7, #7]
 800465a:	2b01      	cmp	r3, #1
 800465c:	d14b      	bne.n	80046f6 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800465e:	68bb      	ldr	r3, [r7, #8]
 8004660:	69db      	ldr	r3, [r3, #28]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d009      	beq.n	800467a <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004666:	69bb      	ldr	r3, [r7, #24]
 8004668:	015a      	lsls	r2, r3, #5
 800466a:	69fb      	ldr	r3, [r7, #28]
 800466c:	4413      	add	r3, r2
 800466e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004672:	461a      	mov	r2, r3
 8004674:	68bb      	ldr	r3, [r7, #8]
 8004676:	69db      	ldr	r3, [r3, #28]
 8004678:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800467a:	68bb      	ldr	r3, [r7, #8]
 800467c:	791b      	ldrb	r3, [r3, #4]
 800467e:	2b01      	cmp	r3, #1
 8004680:	d128      	bne.n	80046d4 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004682:	69fb      	ldr	r3, [r7, #28]
 8004684:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004688:	689b      	ldr	r3, [r3, #8]
 800468a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800468e:	2b00      	cmp	r3, #0
 8004690:	d110      	bne.n	80046b4 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004692:	69bb      	ldr	r3, [r7, #24]
 8004694:	015a      	lsls	r2, r3, #5
 8004696:	69fb      	ldr	r3, [r7, #28]
 8004698:	4413      	add	r3, r2
 800469a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	69ba      	ldr	r2, [r7, #24]
 80046a2:	0151      	lsls	r1, r2, #5
 80046a4:	69fa      	ldr	r2, [r7, #28]
 80046a6:	440a      	add	r2, r1
 80046a8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80046ac:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80046b0:	6013      	str	r3, [r2, #0]
 80046b2:	e00f      	b.n	80046d4 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80046b4:	69bb      	ldr	r3, [r7, #24]
 80046b6:	015a      	lsls	r2, r3, #5
 80046b8:	69fb      	ldr	r3, [r7, #28]
 80046ba:	4413      	add	r3, r2
 80046bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	69ba      	ldr	r2, [r7, #24]
 80046c4:	0151      	lsls	r1, r2, #5
 80046c6:	69fa      	ldr	r2, [r7, #28]
 80046c8:	440a      	add	r2, r1
 80046ca:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80046ce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80046d2:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80046d4:	69bb      	ldr	r3, [r7, #24]
 80046d6:	015a      	lsls	r2, r3, #5
 80046d8:	69fb      	ldr	r3, [r7, #28]
 80046da:	4413      	add	r3, r2
 80046dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	69ba      	ldr	r2, [r7, #24]
 80046e4:	0151      	lsls	r1, r2, #5
 80046e6:	69fa      	ldr	r2, [r7, #28]
 80046e8:	440a      	add	r2, r1
 80046ea:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80046ee:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80046f2:	6013      	str	r3, [r2, #0]
 80046f4:	e166      	b.n	80049c4 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80046f6:	69bb      	ldr	r3, [r7, #24]
 80046f8:	015a      	lsls	r2, r3, #5
 80046fa:	69fb      	ldr	r3, [r7, #28]
 80046fc:	4413      	add	r3, r2
 80046fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	69ba      	ldr	r2, [r7, #24]
 8004706:	0151      	lsls	r1, r2, #5
 8004708:	69fa      	ldr	r2, [r7, #28]
 800470a:	440a      	add	r2, r1
 800470c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004710:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8004714:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004716:	68bb      	ldr	r3, [r7, #8]
 8004718:	791b      	ldrb	r3, [r3, #4]
 800471a:	2b01      	cmp	r3, #1
 800471c:	d015      	beq.n	800474a <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800471e:	68bb      	ldr	r3, [r7, #8]
 8004720:	691b      	ldr	r3, [r3, #16]
 8004722:	2b00      	cmp	r3, #0
 8004724:	f000 814e 	beq.w	80049c4 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004728:	69fb      	ldr	r3, [r7, #28]
 800472a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800472e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004730:	68bb      	ldr	r3, [r7, #8]
 8004732:	781b      	ldrb	r3, [r3, #0]
 8004734:	f003 030f 	and.w	r3, r3, #15
 8004738:	2101      	movs	r1, #1
 800473a:	fa01 f303 	lsl.w	r3, r1, r3
 800473e:	69f9      	ldr	r1, [r7, #28]
 8004740:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004744:	4313      	orrs	r3, r2
 8004746:	634b      	str	r3, [r1, #52]	@ 0x34
 8004748:	e13c      	b.n	80049c4 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800474a:	69fb      	ldr	r3, [r7, #28]
 800474c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004750:	689b      	ldr	r3, [r3, #8]
 8004752:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004756:	2b00      	cmp	r3, #0
 8004758:	d110      	bne.n	800477c <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800475a:	69bb      	ldr	r3, [r7, #24]
 800475c:	015a      	lsls	r2, r3, #5
 800475e:	69fb      	ldr	r3, [r7, #28]
 8004760:	4413      	add	r3, r2
 8004762:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	69ba      	ldr	r2, [r7, #24]
 800476a:	0151      	lsls	r1, r2, #5
 800476c:	69fa      	ldr	r2, [r7, #28]
 800476e:	440a      	add	r2, r1
 8004770:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004774:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004778:	6013      	str	r3, [r2, #0]
 800477a:	e00f      	b.n	800479c <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800477c:	69bb      	ldr	r3, [r7, #24]
 800477e:	015a      	lsls	r2, r3, #5
 8004780:	69fb      	ldr	r3, [r7, #28]
 8004782:	4413      	add	r3, r2
 8004784:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	69ba      	ldr	r2, [r7, #24]
 800478c:	0151      	lsls	r1, r2, #5
 800478e:	69fa      	ldr	r2, [r7, #28]
 8004790:	440a      	add	r2, r1
 8004792:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004796:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800479a:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800479c:	68bb      	ldr	r3, [r7, #8]
 800479e:	68d9      	ldr	r1, [r3, #12]
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	781a      	ldrb	r2, [r3, #0]
 80047a4:	68bb      	ldr	r3, [r7, #8]
 80047a6:	691b      	ldr	r3, [r3, #16]
 80047a8:	b298      	uxth	r0, r3
 80047aa:	79fb      	ldrb	r3, [r7, #7]
 80047ac:	9300      	str	r3, [sp, #0]
 80047ae:	4603      	mov	r3, r0
 80047b0:	68f8      	ldr	r0, [r7, #12]
 80047b2:	f000 f9b9 	bl	8004b28 <USB_WritePacket>
 80047b6:	e105      	b.n	80049c4 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80047b8:	69bb      	ldr	r3, [r7, #24]
 80047ba:	015a      	lsls	r2, r3, #5
 80047bc:	69fb      	ldr	r3, [r7, #28]
 80047be:	4413      	add	r3, r2
 80047c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80047c4:	691b      	ldr	r3, [r3, #16]
 80047c6:	69ba      	ldr	r2, [r7, #24]
 80047c8:	0151      	lsls	r1, r2, #5
 80047ca:	69fa      	ldr	r2, [r7, #28]
 80047cc:	440a      	add	r2, r1
 80047ce:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80047d2:	0cdb      	lsrs	r3, r3, #19
 80047d4:	04db      	lsls	r3, r3, #19
 80047d6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80047d8:	69bb      	ldr	r3, [r7, #24]
 80047da:	015a      	lsls	r2, r3, #5
 80047dc:	69fb      	ldr	r3, [r7, #28]
 80047de:	4413      	add	r3, r2
 80047e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80047e4:	691b      	ldr	r3, [r3, #16]
 80047e6:	69ba      	ldr	r2, [r7, #24]
 80047e8:	0151      	lsls	r1, r2, #5
 80047ea:	69fa      	ldr	r2, [r7, #28]
 80047ec:	440a      	add	r2, r1
 80047ee:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80047f2:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80047f6:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80047fa:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 80047fc:	69bb      	ldr	r3, [r7, #24]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d132      	bne.n	8004868 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8004802:	68bb      	ldr	r3, [r7, #8]
 8004804:	691b      	ldr	r3, [r3, #16]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d003      	beq.n	8004812 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 800480a:	68bb      	ldr	r3, [r7, #8]
 800480c:	689a      	ldr	r2, [r3, #8]
 800480e:	68bb      	ldr	r3, [r7, #8]
 8004810:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8004812:	68bb      	ldr	r3, [r7, #8]
 8004814:	689a      	ldr	r2, [r3, #8]
 8004816:	68bb      	ldr	r3, [r7, #8]
 8004818:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800481a:	69bb      	ldr	r3, [r7, #24]
 800481c:	015a      	lsls	r2, r3, #5
 800481e:	69fb      	ldr	r3, [r7, #28]
 8004820:	4413      	add	r3, r2
 8004822:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004826:	691a      	ldr	r2, [r3, #16]
 8004828:	68bb      	ldr	r3, [r7, #8]
 800482a:	6a1b      	ldr	r3, [r3, #32]
 800482c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004830:	69b9      	ldr	r1, [r7, #24]
 8004832:	0148      	lsls	r0, r1, #5
 8004834:	69f9      	ldr	r1, [r7, #28]
 8004836:	4401      	add	r1, r0
 8004838:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800483c:	4313      	orrs	r3, r2
 800483e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004840:	69bb      	ldr	r3, [r7, #24]
 8004842:	015a      	lsls	r2, r3, #5
 8004844:	69fb      	ldr	r3, [r7, #28]
 8004846:	4413      	add	r3, r2
 8004848:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800484c:	691b      	ldr	r3, [r3, #16]
 800484e:	69ba      	ldr	r2, [r7, #24]
 8004850:	0151      	lsls	r1, r2, #5
 8004852:	69fa      	ldr	r2, [r7, #28]
 8004854:	440a      	add	r2, r1
 8004856:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800485a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800485e:	6113      	str	r3, [r2, #16]
 8004860:	e062      	b.n	8004928 <USB_EPStartXfer+0x490>
 8004862:	bf00      	nop
 8004864:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8004868:	68bb      	ldr	r3, [r7, #8]
 800486a:	691b      	ldr	r3, [r3, #16]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d123      	bne.n	80048b8 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004870:	69bb      	ldr	r3, [r7, #24]
 8004872:	015a      	lsls	r2, r3, #5
 8004874:	69fb      	ldr	r3, [r7, #28]
 8004876:	4413      	add	r3, r2
 8004878:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800487c:	691a      	ldr	r2, [r3, #16]
 800487e:	68bb      	ldr	r3, [r7, #8]
 8004880:	689b      	ldr	r3, [r3, #8]
 8004882:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004886:	69b9      	ldr	r1, [r7, #24]
 8004888:	0148      	lsls	r0, r1, #5
 800488a:	69f9      	ldr	r1, [r7, #28]
 800488c:	4401      	add	r1, r0
 800488e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004892:	4313      	orrs	r3, r2
 8004894:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004896:	69bb      	ldr	r3, [r7, #24]
 8004898:	015a      	lsls	r2, r3, #5
 800489a:	69fb      	ldr	r3, [r7, #28]
 800489c:	4413      	add	r3, r2
 800489e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80048a2:	691b      	ldr	r3, [r3, #16]
 80048a4:	69ba      	ldr	r2, [r7, #24]
 80048a6:	0151      	lsls	r1, r2, #5
 80048a8:	69fa      	ldr	r2, [r7, #28]
 80048aa:	440a      	add	r2, r1
 80048ac:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80048b0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80048b4:	6113      	str	r3, [r2, #16]
 80048b6:	e037      	b.n	8004928 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80048b8:	68bb      	ldr	r3, [r7, #8]
 80048ba:	691a      	ldr	r2, [r3, #16]
 80048bc:	68bb      	ldr	r3, [r7, #8]
 80048be:	689b      	ldr	r3, [r3, #8]
 80048c0:	4413      	add	r3, r2
 80048c2:	1e5a      	subs	r2, r3, #1
 80048c4:	68bb      	ldr	r3, [r7, #8]
 80048c6:	689b      	ldr	r3, [r3, #8]
 80048c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80048cc:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80048ce:	68bb      	ldr	r3, [r7, #8]
 80048d0:	689b      	ldr	r3, [r3, #8]
 80048d2:	8afa      	ldrh	r2, [r7, #22]
 80048d4:	fb03 f202 	mul.w	r2, r3, r2
 80048d8:	68bb      	ldr	r3, [r7, #8]
 80048da:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80048dc:	69bb      	ldr	r3, [r7, #24]
 80048de:	015a      	lsls	r2, r3, #5
 80048e0:	69fb      	ldr	r3, [r7, #28]
 80048e2:	4413      	add	r3, r2
 80048e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80048e8:	691a      	ldr	r2, [r3, #16]
 80048ea:	8afb      	ldrh	r3, [r7, #22]
 80048ec:	04d9      	lsls	r1, r3, #19
 80048ee:	4b38      	ldr	r3, [pc, #224]	@ (80049d0 <USB_EPStartXfer+0x538>)
 80048f0:	400b      	ands	r3, r1
 80048f2:	69b9      	ldr	r1, [r7, #24]
 80048f4:	0148      	lsls	r0, r1, #5
 80048f6:	69f9      	ldr	r1, [r7, #28]
 80048f8:	4401      	add	r1, r0
 80048fa:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80048fe:	4313      	orrs	r3, r2
 8004900:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8004902:	69bb      	ldr	r3, [r7, #24]
 8004904:	015a      	lsls	r2, r3, #5
 8004906:	69fb      	ldr	r3, [r7, #28]
 8004908:	4413      	add	r3, r2
 800490a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800490e:	691a      	ldr	r2, [r3, #16]
 8004910:	68bb      	ldr	r3, [r7, #8]
 8004912:	6a1b      	ldr	r3, [r3, #32]
 8004914:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004918:	69b9      	ldr	r1, [r7, #24]
 800491a:	0148      	lsls	r0, r1, #5
 800491c:	69f9      	ldr	r1, [r7, #28]
 800491e:	4401      	add	r1, r0
 8004920:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004924:	4313      	orrs	r3, r2
 8004926:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8004928:	79fb      	ldrb	r3, [r7, #7]
 800492a:	2b01      	cmp	r3, #1
 800492c:	d10d      	bne.n	800494a <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800492e:	68bb      	ldr	r3, [r7, #8]
 8004930:	68db      	ldr	r3, [r3, #12]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d009      	beq.n	800494a <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004936:	68bb      	ldr	r3, [r7, #8]
 8004938:	68d9      	ldr	r1, [r3, #12]
 800493a:	69bb      	ldr	r3, [r7, #24]
 800493c:	015a      	lsls	r2, r3, #5
 800493e:	69fb      	ldr	r3, [r7, #28]
 8004940:	4413      	add	r3, r2
 8004942:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004946:	460a      	mov	r2, r1
 8004948:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800494a:	68bb      	ldr	r3, [r7, #8]
 800494c:	791b      	ldrb	r3, [r3, #4]
 800494e:	2b01      	cmp	r3, #1
 8004950:	d128      	bne.n	80049a4 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004952:	69fb      	ldr	r3, [r7, #28]
 8004954:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004958:	689b      	ldr	r3, [r3, #8]
 800495a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800495e:	2b00      	cmp	r3, #0
 8004960:	d110      	bne.n	8004984 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004962:	69bb      	ldr	r3, [r7, #24]
 8004964:	015a      	lsls	r2, r3, #5
 8004966:	69fb      	ldr	r3, [r7, #28]
 8004968:	4413      	add	r3, r2
 800496a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	69ba      	ldr	r2, [r7, #24]
 8004972:	0151      	lsls	r1, r2, #5
 8004974:	69fa      	ldr	r2, [r7, #28]
 8004976:	440a      	add	r2, r1
 8004978:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800497c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004980:	6013      	str	r3, [r2, #0]
 8004982:	e00f      	b.n	80049a4 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004984:	69bb      	ldr	r3, [r7, #24]
 8004986:	015a      	lsls	r2, r3, #5
 8004988:	69fb      	ldr	r3, [r7, #28]
 800498a:	4413      	add	r3, r2
 800498c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	69ba      	ldr	r2, [r7, #24]
 8004994:	0151      	lsls	r1, r2, #5
 8004996:	69fa      	ldr	r2, [r7, #28]
 8004998:	440a      	add	r2, r1
 800499a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800499e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80049a2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80049a4:	69bb      	ldr	r3, [r7, #24]
 80049a6:	015a      	lsls	r2, r3, #5
 80049a8:	69fb      	ldr	r3, [r7, #28]
 80049aa:	4413      	add	r3, r2
 80049ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	69ba      	ldr	r2, [r7, #24]
 80049b4:	0151      	lsls	r1, r2, #5
 80049b6:	69fa      	ldr	r2, [r7, #28]
 80049b8:	440a      	add	r2, r1
 80049ba:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80049be:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80049c2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80049c4:	2300      	movs	r3, #0
}
 80049c6:	4618      	mov	r0, r3
 80049c8:	3720      	adds	r7, #32
 80049ca:	46bd      	mov	sp, r7
 80049cc:	bd80      	pop	{r7, pc}
 80049ce:	bf00      	nop
 80049d0:	1ff80000 	.word	0x1ff80000

080049d4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80049d4:	b480      	push	{r7}
 80049d6:	b087      	sub	sp, #28
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
 80049dc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80049de:	2300      	movs	r3, #0
 80049e0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80049e2:	2300      	movs	r3, #0
 80049e4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	785b      	ldrb	r3, [r3, #1]
 80049ee:	2b01      	cmp	r3, #1
 80049f0:	d14a      	bne.n	8004a88 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	781b      	ldrb	r3, [r3, #0]
 80049f6:	015a      	lsls	r2, r3, #5
 80049f8:	693b      	ldr	r3, [r7, #16]
 80049fa:	4413      	add	r3, r2
 80049fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004a06:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004a0a:	f040 8086 	bne.w	8004b1a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	781b      	ldrb	r3, [r3, #0]
 8004a12:	015a      	lsls	r2, r3, #5
 8004a14:	693b      	ldr	r3, [r7, #16]
 8004a16:	4413      	add	r3, r2
 8004a18:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	683a      	ldr	r2, [r7, #0]
 8004a20:	7812      	ldrb	r2, [r2, #0]
 8004a22:	0151      	lsls	r1, r2, #5
 8004a24:	693a      	ldr	r2, [r7, #16]
 8004a26:	440a      	add	r2, r1
 8004a28:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004a2c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004a30:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	781b      	ldrb	r3, [r3, #0]
 8004a36:	015a      	lsls	r2, r3, #5
 8004a38:	693b      	ldr	r3, [r7, #16]
 8004a3a:	4413      	add	r3, r2
 8004a3c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	683a      	ldr	r2, [r7, #0]
 8004a44:	7812      	ldrb	r2, [r2, #0]
 8004a46:	0151      	lsls	r1, r2, #5
 8004a48:	693a      	ldr	r2, [r7, #16]
 8004a4a:	440a      	add	r2, r1
 8004a4c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004a50:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004a54:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	3301      	adds	r3, #1
 8004a5a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d902      	bls.n	8004a6c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8004a66:	2301      	movs	r3, #1
 8004a68:	75fb      	strb	r3, [r7, #23]
          break;
 8004a6a:	e056      	b.n	8004b1a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	781b      	ldrb	r3, [r3, #0]
 8004a70:	015a      	lsls	r2, r3, #5
 8004a72:	693b      	ldr	r3, [r7, #16]
 8004a74:	4413      	add	r3, r2
 8004a76:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004a80:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004a84:	d0e7      	beq.n	8004a56 <USB_EPStopXfer+0x82>
 8004a86:	e048      	b.n	8004b1a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	781b      	ldrb	r3, [r3, #0]
 8004a8c:	015a      	lsls	r2, r3, #5
 8004a8e:	693b      	ldr	r3, [r7, #16]
 8004a90:	4413      	add	r3, r2
 8004a92:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004a9c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004aa0:	d13b      	bne.n	8004b1a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	781b      	ldrb	r3, [r3, #0]
 8004aa6:	015a      	lsls	r2, r3, #5
 8004aa8:	693b      	ldr	r3, [r7, #16]
 8004aaa:	4413      	add	r3, r2
 8004aac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	683a      	ldr	r2, [r7, #0]
 8004ab4:	7812      	ldrb	r2, [r2, #0]
 8004ab6:	0151      	lsls	r1, r2, #5
 8004ab8:	693a      	ldr	r2, [r7, #16]
 8004aba:	440a      	add	r2, r1
 8004abc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004ac0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004ac4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	781b      	ldrb	r3, [r3, #0]
 8004aca:	015a      	lsls	r2, r3, #5
 8004acc:	693b      	ldr	r3, [r7, #16]
 8004ace:	4413      	add	r3, r2
 8004ad0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	683a      	ldr	r2, [r7, #0]
 8004ad8:	7812      	ldrb	r2, [r2, #0]
 8004ada:	0151      	lsls	r1, r2, #5
 8004adc:	693a      	ldr	r2, [r7, #16]
 8004ade:	440a      	add	r2, r1
 8004ae0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004ae4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004ae8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	3301      	adds	r3, #1
 8004aee:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	f242 7210 	movw	r2, #10000	@ 0x2710
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d902      	bls.n	8004b00 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8004afa:	2301      	movs	r3, #1
 8004afc:	75fb      	strb	r3, [r7, #23]
          break;
 8004afe:	e00c      	b.n	8004b1a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	781b      	ldrb	r3, [r3, #0]
 8004b04:	015a      	lsls	r2, r3, #5
 8004b06:	693b      	ldr	r3, [r7, #16]
 8004b08:	4413      	add	r3, r2
 8004b0a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004b14:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004b18:	d0e7      	beq.n	8004aea <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8004b1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	371c      	adds	r7, #28
 8004b20:	46bd      	mov	sp, r7
 8004b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b26:	4770      	bx	lr

08004b28 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004b28:	b480      	push	{r7}
 8004b2a:	b089      	sub	sp, #36	@ 0x24
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	60f8      	str	r0, [r7, #12]
 8004b30:	60b9      	str	r1, [r7, #8]
 8004b32:	4611      	mov	r1, r2
 8004b34:	461a      	mov	r2, r3
 8004b36:	460b      	mov	r3, r1
 8004b38:	71fb      	strb	r3, [r7, #7]
 8004b3a:	4613      	mov	r3, r2
 8004b3c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004b42:	68bb      	ldr	r3, [r7, #8]
 8004b44:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004b46:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d123      	bne.n	8004b96 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004b4e:	88bb      	ldrh	r3, [r7, #4]
 8004b50:	3303      	adds	r3, #3
 8004b52:	089b      	lsrs	r3, r3, #2
 8004b54:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004b56:	2300      	movs	r3, #0
 8004b58:	61bb      	str	r3, [r7, #24]
 8004b5a:	e018      	b.n	8004b8e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004b5c:	79fb      	ldrb	r3, [r7, #7]
 8004b5e:	031a      	lsls	r2, r3, #12
 8004b60:	697b      	ldr	r3, [r7, #20]
 8004b62:	4413      	add	r3, r2
 8004b64:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004b68:	461a      	mov	r2, r3
 8004b6a:	69fb      	ldr	r3, [r7, #28]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004b70:	69fb      	ldr	r3, [r7, #28]
 8004b72:	3301      	adds	r3, #1
 8004b74:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004b76:	69fb      	ldr	r3, [r7, #28]
 8004b78:	3301      	adds	r3, #1
 8004b7a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004b7c:	69fb      	ldr	r3, [r7, #28]
 8004b7e:	3301      	adds	r3, #1
 8004b80:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004b82:	69fb      	ldr	r3, [r7, #28]
 8004b84:	3301      	adds	r3, #1
 8004b86:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004b88:	69bb      	ldr	r3, [r7, #24]
 8004b8a:	3301      	adds	r3, #1
 8004b8c:	61bb      	str	r3, [r7, #24]
 8004b8e:	69ba      	ldr	r2, [r7, #24]
 8004b90:	693b      	ldr	r3, [r7, #16]
 8004b92:	429a      	cmp	r2, r3
 8004b94:	d3e2      	bcc.n	8004b5c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004b96:	2300      	movs	r3, #0
}
 8004b98:	4618      	mov	r0, r3
 8004b9a:	3724      	adds	r7, #36	@ 0x24
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba2:	4770      	bx	lr

08004ba4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004ba4:	b480      	push	{r7}
 8004ba6:	b08b      	sub	sp, #44	@ 0x2c
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	60f8      	str	r0, [r7, #12]
 8004bac:	60b9      	str	r1, [r7, #8]
 8004bae:	4613      	mov	r3, r2
 8004bb0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004bb6:	68bb      	ldr	r3, [r7, #8]
 8004bb8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004bba:	88fb      	ldrh	r3, [r7, #6]
 8004bbc:	089b      	lsrs	r3, r3, #2
 8004bbe:	b29b      	uxth	r3, r3
 8004bc0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004bc2:	88fb      	ldrh	r3, [r7, #6]
 8004bc4:	f003 0303 	and.w	r3, r3, #3
 8004bc8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004bca:	2300      	movs	r3, #0
 8004bcc:	623b      	str	r3, [r7, #32]
 8004bce:	e014      	b.n	8004bfa <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004bd0:	69bb      	ldr	r3, [r7, #24]
 8004bd2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004bd6:	681a      	ldr	r2, [r3, #0]
 8004bd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bda:	601a      	str	r2, [r3, #0]
    pDest++;
 8004bdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bde:	3301      	adds	r3, #1
 8004be0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8004be2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004be4:	3301      	adds	r3, #1
 8004be6:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8004be8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bea:	3301      	adds	r3, #1
 8004bec:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8004bee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bf0:	3301      	adds	r3, #1
 8004bf2:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8004bf4:	6a3b      	ldr	r3, [r7, #32]
 8004bf6:	3301      	adds	r3, #1
 8004bf8:	623b      	str	r3, [r7, #32]
 8004bfa:	6a3a      	ldr	r2, [r7, #32]
 8004bfc:	697b      	ldr	r3, [r7, #20]
 8004bfe:	429a      	cmp	r2, r3
 8004c00:	d3e6      	bcc.n	8004bd0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004c02:	8bfb      	ldrh	r3, [r7, #30]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d01e      	beq.n	8004c46 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004c08:	2300      	movs	r3, #0
 8004c0a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004c0c:	69bb      	ldr	r3, [r7, #24]
 8004c0e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004c12:	461a      	mov	r2, r3
 8004c14:	f107 0310 	add.w	r3, r7, #16
 8004c18:	6812      	ldr	r2, [r2, #0]
 8004c1a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004c1c:	693a      	ldr	r2, [r7, #16]
 8004c1e:	6a3b      	ldr	r3, [r7, #32]
 8004c20:	b2db      	uxtb	r3, r3
 8004c22:	00db      	lsls	r3, r3, #3
 8004c24:	fa22 f303 	lsr.w	r3, r2, r3
 8004c28:	b2da      	uxtb	r2, r3
 8004c2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c2c:	701a      	strb	r2, [r3, #0]
      i++;
 8004c2e:	6a3b      	ldr	r3, [r7, #32]
 8004c30:	3301      	adds	r3, #1
 8004c32:	623b      	str	r3, [r7, #32]
      pDest++;
 8004c34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c36:	3301      	adds	r3, #1
 8004c38:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8004c3a:	8bfb      	ldrh	r3, [r7, #30]
 8004c3c:	3b01      	subs	r3, #1
 8004c3e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004c40:	8bfb      	ldrh	r3, [r7, #30]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d1ea      	bne.n	8004c1c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004c46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004c48:	4618      	mov	r0, r3
 8004c4a:	372c      	adds	r7, #44	@ 0x2c
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c52:	4770      	bx	lr

08004c54 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004c54:	b480      	push	{r7}
 8004c56:	b085      	sub	sp, #20
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
 8004c5c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	781b      	ldrb	r3, [r3, #0]
 8004c66:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	785b      	ldrb	r3, [r3, #1]
 8004c6c:	2b01      	cmp	r3, #1
 8004c6e:	d12c      	bne.n	8004cca <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004c70:	68bb      	ldr	r3, [r7, #8]
 8004c72:	015a      	lsls	r2, r3, #5
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	4413      	add	r3, r2
 8004c78:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	db12      	blt.n	8004ca8 <USB_EPSetStall+0x54>
 8004c82:	68bb      	ldr	r3, [r7, #8]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d00f      	beq.n	8004ca8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004c88:	68bb      	ldr	r3, [r7, #8]
 8004c8a:	015a      	lsls	r2, r3, #5
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	4413      	add	r3, r2
 8004c90:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	68ba      	ldr	r2, [r7, #8]
 8004c98:	0151      	lsls	r1, r2, #5
 8004c9a:	68fa      	ldr	r2, [r7, #12]
 8004c9c:	440a      	add	r2, r1
 8004c9e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004ca2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004ca6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004ca8:	68bb      	ldr	r3, [r7, #8]
 8004caa:	015a      	lsls	r2, r3, #5
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	4413      	add	r3, r2
 8004cb0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	68ba      	ldr	r2, [r7, #8]
 8004cb8:	0151      	lsls	r1, r2, #5
 8004cba:	68fa      	ldr	r2, [r7, #12]
 8004cbc:	440a      	add	r2, r1
 8004cbe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004cc2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004cc6:	6013      	str	r3, [r2, #0]
 8004cc8:	e02b      	b.n	8004d22 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004cca:	68bb      	ldr	r3, [r7, #8]
 8004ccc:	015a      	lsls	r2, r3, #5
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	4413      	add	r3, r2
 8004cd2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	db12      	blt.n	8004d02 <USB_EPSetStall+0xae>
 8004cdc:	68bb      	ldr	r3, [r7, #8]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d00f      	beq.n	8004d02 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004ce2:	68bb      	ldr	r3, [r7, #8]
 8004ce4:	015a      	lsls	r2, r3, #5
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	4413      	add	r3, r2
 8004cea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	68ba      	ldr	r2, [r7, #8]
 8004cf2:	0151      	lsls	r1, r2, #5
 8004cf4:	68fa      	ldr	r2, [r7, #12]
 8004cf6:	440a      	add	r2, r1
 8004cf8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004cfc:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004d00:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004d02:	68bb      	ldr	r3, [r7, #8]
 8004d04:	015a      	lsls	r2, r3, #5
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	4413      	add	r3, r2
 8004d0a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	68ba      	ldr	r2, [r7, #8]
 8004d12:	0151      	lsls	r1, r2, #5
 8004d14:	68fa      	ldr	r2, [r7, #12]
 8004d16:	440a      	add	r2, r1
 8004d18:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004d1c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004d20:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004d22:	2300      	movs	r3, #0
}
 8004d24:	4618      	mov	r0, r3
 8004d26:	3714      	adds	r7, #20
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2e:	4770      	bx	lr

08004d30 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004d30:	b480      	push	{r7}
 8004d32:	b085      	sub	sp, #20
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
 8004d38:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	781b      	ldrb	r3, [r3, #0]
 8004d42:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	785b      	ldrb	r3, [r3, #1]
 8004d48:	2b01      	cmp	r3, #1
 8004d4a:	d128      	bne.n	8004d9e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004d4c:	68bb      	ldr	r3, [r7, #8]
 8004d4e:	015a      	lsls	r2, r3, #5
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	4413      	add	r3, r2
 8004d54:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	68ba      	ldr	r2, [r7, #8]
 8004d5c:	0151      	lsls	r1, r2, #5
 8004d5e:	68fa      	ldr	r2, [r7, #12]
 8004d60:	440a      	add	r2, r1
 8004d62:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004d66:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004d6a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	791b      	ldrb	r3, [r3, #4]
 8004d70:	2b03      	cmp	r3, #3
 8004d72:	d003      	beq.n	8004d7c <USB_EPClearStall+0x4c>
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	791b      	ldrb	r3, [r3, #4]
 8004d78:	2b02      	cmp	r3, #2
 8004d7a:	d138      	bne.n	8004dee <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004d7c:	68bb      	ldr	r3, [r7, #8]
 8004d7e:	015a      	lsls	r2, r3, #5
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	4413      	add	r3, r2
 8004d84:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	68ba      	ldr	r2, [r7, #8]
 8004d8c:	0151      	lsls	r1, r2, #5
 8004d8e:	68fa      	ldr	r2, [r7, #12]
 8004d90:	440a      	add	r2, r1
 8004d92:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004d96:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004d9a:	6013      	str	r3, [r2, #0]
 8004d9c:	e027      	b.n	8004dee <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004d9e:	68bb      	ldr	r3, [r7, #8]
 8004da0:	015a      	lsls	r2, r3, #5
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	4413      	add	r3, r2
 8004da6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	68ba      	ldr	r2, [r7, #8]
 8004dae:	0151      	lsls	r1, r2, #5
 8004db0:	68fa      	ldr	r2, [r7, #12]
 8004db2:	440a      	add	r2, r1
 8004db4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004db8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004dbc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	791b      	ldrb	r3, [r3, #4]
 8004dc2:	2b03      	cmp	r3, #3
 8004dc4:	d003      	beq.n	8004dce <USB_EPClearStall+0x9e>
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	791b      	ldrb	r3, [r3, #4]
 8004dca:	2b02      	cmp	r3, #2
 8004dcc:	d10f      	bne.n	8004dee <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004dce:	68bb      	ldr	r3, [r7, #8]
 8004dd0:	015a      	lsls	r2, r3, #5
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	4413      	add	r3, r2
 8004dd6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	68ba      	ldr	r2, [r7, #8]
 8004dde:	0151      	lsls	r1, r2, #5
 8004de0:	68fa      	ldr	r2, [r7, #12]
 8004de2:	440a      	add	r2, r1
 8004de4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004de8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004dec:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004dee:	2300      	movs	r3, #0
}
 8004df0:	4618      	mov	r0, r3
 8004df2:	3714      	adds	r7, #20
 8004df4:	46bd      	mov	sp, r7
 8004df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfa:	4770      	bx	lr

08004dfc <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004dfc:	b480      	push	{r7}
 8004dfe:	b085      	sub	sp, #20
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
 8004e04:	460b      	mov	r3, r1
 8004e06:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	68fa      	ldr	r2, [r7, #12]
 8004e16:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004e1a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8004e1e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e26:	681a      	ldr	r2, [r3, #0]
 8004e28:	78fb      	ldrb	r3, [r7, #3]
 8004e2a:	011b      	lsls	r3, r3, #4
 8004e2c:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8004e30:	68f9      	ldr	r1, [r7, #12]
 8004e32:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004e36:	4313      	orrs	r3, r2
 8004e38:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8004e3a:	2300      	movs	r3, #0
}
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	3714      	adds	r7, #20
 8004e40:	46bd      	mov	sp, r7
 8004e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e46:	4770      	bx	lr

08004e48 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8004e48:	b480      	push	{r7}
 8004e4a:	b085      	sub	sp, #20
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	68fa      	ldr	r2, [r7, #12]
 8004e5e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8004e62:	f023 0303 	bic.w	r3, r3, #3
 8004e66:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e6e:	685b      	ldr	r3, [r3, #4]
 8004e70:	68fa      	ldr	r2, [r7, #12]
 8004e72:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004e76:	f023 0302 	bic.w	r3, r3, #2
 8004e7a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004e7c:	2300      	movs	r3, #0
}
 8004e7e:	4618      	mov	r0, r3
 8004e80:	3714      	adds	r7, #20
 8004e82:	46bd      	mov	sp, r7
 8004e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e88:	4770      	bx	lr

08004e8a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8004e8a:	b480      	push	{r7}
 8004e8c:	b085      	sub	sp, #20
 8004e8e:	af00      	add	r7, sp, #0
 8004e90:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	68fa      	ldr	r2, [r7, #12]
 8004ea0:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8004ea4:	f023 0303 	bic.w	r3, r3, #3
 8004ea8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004eb0:	685b      	ldr	r3, [r3, #4]
 8004eb2:	68fa      	ldr	r2, [r7, #12]
 8004eb4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004eb8:	f043 0302 	orr.w	r3, r3, #2
 8004ebc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004ebe:	2300      	movs	r3, #0
}
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	3714      	adds	r7, #20
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eca:	4770      	bx	lr

08004ecc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8004ecc:	b480      	push	{r7}
 8004ece:	b085      	sub	sp, #20
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	695b      	ldr	r3, [r3, #20]
 8004ed8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	699b      	ldr	r3, [r3, #24]
 8004ede:	68fa      	ldr	r2, [r7, #12]
 8004ee0:	4013      	ands	r3, r2
 8004ee2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
}
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	3714      	adds	r7, #20
 8004eea:	46bd      	mov	sp, r7
 8004eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef0:	4770      	bx	lr

08004ef2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8004ef2:	b480      	push	{r7}
 8004ef4:	b085      	sub	sp, #20
 8004ef6:	af00      	add	r7, sp, #0
 8004ef8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004f04:	699b      	ldr	r3, [r3, #24]
 8004f06:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004f0e:	69db      	ldr	r3, [r3, #28]
 8004f10:	68ba      	ldr	r2, [r7, #8]
 8004f12:	4013      	ands	r3, r2
 8004f14:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8004f16:	68bb      	ldr	r3, [r7, #8]
 8004f18:	0c1b      	lsrs	r3, r3, #16
}
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	3714      	adds	r7, #20
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f24:	4770      	bx	lr

08004f26 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8004f26:	b480      	push	{r7}
 8004f28:	b085      	sub	sp, #20
 8004f2a:	af00      	add	r7, sp, #0
 8004f2c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004f38:	699b      	ldr	r3, [r3, #24]
 8004f3a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004f42:	69db      	ldr	r3, [r3, #28]
 8004f44:	68ba      	ldr	r2, [r7, #8]
 8004f46:	4013      	ands	r3, r2
 8004f48:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8004f4a:	68bb      	ldr	r3, [r7, #8]
 8004f4c:	b29b      	uxth	r3, r3
}
 8004f4e:	4618      	mov	r0, r3
 8004f50:	3714      	adds	r7, #20
 8004f52:	46bd      	mov	sp, r7
 8004f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f58:	4770      	bx	lr

08004f5a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004f5a:	b480      	push	{r7}
 8004f5c:	b085      	sub	sp, #20
 8004f5e:	af00      	add	r7, sp, #0
 8004f60:	6078      	str	r0, [r7, #4]
 8004f62:	460b      	mov	r3, r1
 8004f64:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004f6a:	78fb      	ldrb	r3, [r7, #3]
 8004f6c:	015a      	lsls	r2, r3, #5
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	4413      	add	r3, r2
 8004f72:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f76:	689b      	ldr	r3, [r3, #8]
 8004f78:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004f80:	695b      	ldr	r3, [r3, #20]
 8004f82:	68ba      	ldr	r2, [r7, #8]
 8004f84:	4013      	ands	r3, r2
 8004f86:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004f88:	68bb      	ldr	r3, [r7, #8]
}
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	3714      	adds	r7, #20
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f94:	4770      	bx	lr

08004f96 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004f96:	b480      	push	{r7}
 8004f98:	b087      	sub	sp, #28
 8004f9a:	af00      	add	r7, sp, #0
 8004f9c:	6078      	str	r0, [r7, #4]
 8004f9e:	460b      	mov	r3, r1
 8004fa0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8004fa6:	697b      	ldr	r3, [r7, #20]
 8004fa8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004fac:	691b      	ldr	r3, [r3, #16]
 8004fae:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004fb0:	697b      	ldr	r3, [r7, #20]
 8004fb2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004fb6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004fb8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004fba:	78fb      	ldrb	r3, [r7, #3]
 8004fbc:	f003 030f 	and.w	r3, r3, #15
 8004fc0:	68fa      	ldr	r2, [r7, #12]
 8004fc2:	fa22 f303 	lsr.w	r3, r2, r3
 8004fc6:	01db      	lsls	r3, r3, #7
 8004fc8:	b2db      	uxtb	r3, r3
 8004fca:	693a      	ldr	r2, [r7, #16]
 8004fcc:	4313      	orrs	r3, r2
 8004fce:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004fd0:	78fb      	ldrb	r3, [r7, #3]
 8004fd2:	015a      	lsls	r2, r3, #5
 8004fd4:	697b      	ldr	r3, [r7, #20]
 8004fd6:	4413      	add	r3, r2
 8004fd8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004fdc:	689b      	ldr	r3, [r3, #8]
 8004fde:	693a      	ldr	r2, [r7, #16]
 8004fe0:	4013      	ands	r3, r2
 8004fe2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004fe4:	68bb      	ldr	r3, [r7, #8]
}
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	371c      	adds	r7, #28
 8004fea:	46bd      	mov	sp, r7
 8004fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff0:	4770      	bx	lr

08004ff2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8004ff2:	b480      	push	{r7}
 8004ff4:	b083      	sub	sp, #12
 8004ff6:	af00      	add	r7, sp, #0
 8004ff8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	695b      	ldr	r3, [r3, #20]
 8004ffe:	f003 0301 	and.w	r3, r3, #1
}
 8005002:	4618      	mov	r0, r3
 8005004:	370c      	adds	r7, #12
 8005006:	46bd      	mov	sp, r7
 8005008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500c:	4770      	bx	lr

0800500e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800500e:	b480      	push	{r7}
 8005010:	b085      	sub	sp, #20
 8005012:	af00      	add	r7, sp, #0
 8005014:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	68fa      	ldr	r2, [r7, #12]
 8005024:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005028:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800502c:	f023 0307 	bic.w	r3, r3, #7
 8005030:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005038:	685b      	ldr	r3, [r3, #4]
 800503a:	68fa      	ldr	r2, [r7, #12]
 800503c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005040:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005044:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005046:	2300      	movs	r3, #0
}
 8005048:	4618      	mov	r0, r3
 800504a:	3714      	adds	r7, #20
 800504c:	46bd      	mov	sp, r7
 800504e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005052:	4770      	bx	lr

08005054 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8005054:	b480      	push	{r7}
 8005056:	b087      	sub	sp, #28
 8005058:	af00      	add	r7, sp, #0
 800505a:	60f8      	str	r0, [r7, #12]
 800505c:	460b      	mov	r3, r1
 800505e:	607a      	str	r2, [r7, #4]
 8005060:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	333c      	adds	r3, #60	@ 0x3c
 800506a:	3304      	adds	r3, #4
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005070:	693b      	ldr	r3, [r7, #16]
 8005072:	4a26      	ldr	r2, [pc, #152]	@ (800510c <USB_EP0_OutStart+0xb8>)
 8005074:	4293      	cmp	r3, r2
 8005076:	d90a      	bls.n	800508e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005078:	697b      	ldr	r3, [r7, #20]
 800507a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005084:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005088:	d101      	bne.n	800508e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800508a:	2300      	movs	r3, #0
 800508c:	e037      	b.n	80050fe <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800508e:	697b      	ldr	r3, [r7, #20]
 8005090:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005094:	461a      	mov	r2, r3
 8005096:	2300      	movs	r3, #0
 8005098:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800509a:	697b      	ldr	r3, [r7, #20]
 800509c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80050a0:	691b      	ldr	r3, [r3, #16]
 80050a2:	697a      	ldr	r2, [r7, #20]
 80050a4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80050a8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80050ac:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80050ae:	697b      	ldr	r3, [r7, #20]
 80050b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80050b4:	691b      	ldr	r3, [r3, #16]
 80050b6:	697a      	ldr	r2, [r7, #20]
 80050b8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80050bc:	f043 0318 	orr.w	r3, r3, #24
 80050c0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80050c2:	697b      	ldr	r3, [r7, #20]
 80050c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80050c8:	691b      	ldr	r3, [r3, #16]
 80050ca:	697a      	ldr	r2, [r7, #20]
 80050cc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80050d0:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 80050d4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80050d6:	7afb      	ldrb	r3, [r7, #11]
 80050d8:	2b01      	cmp	r3, #1
 80050da:	d10f      	bne.n	80050fc <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80050dc:	697b      	ldr	r3, [r7, #20]
 80050de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80050e2:	461a      	mov	r2, r3
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80050e8:	697b      	ldr	r3, [r7, #20]
 80050ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	697a      	ldr	r2, [r7, #20]
 80050f2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80050f6:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 80050fa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80050fc:	2300      	movs	r3, #0
}
 80050fe:	4618      	mov	r0, r3
 8005100:	371c      	adds	r7, #28
 8005102:	46bd      	mov	sp, r7
 8005104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005108:	4770      	bx	lr
 800510a:	bf00      	nop
 800510c:	4f54300a 	.word	0x4f54300a

08005110 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005110:	b480      	push	{r7}
 8005112:	b085      	sub	sp, #20
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005118:	2300      	movs	r3, #0
 800511a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	3301      	adds	r3, #1
 8005120:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005128:	d901      	bls.n	800512e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800512a:	2303      	movs	r3, #3
 800512c:	e01b      	b.n	8005166 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	691b      	ldr	r3, [r3, #16]
 8005132:	2b00      	cmp	r3, #0
 8005134:	daf2      	bge.n	800511c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005136:	2300      	movs	r3, #0
 8005138:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	691b      	ldr	r3, [r3, #16]
 800513e:	f043 0201 	orr.w	r2, r3, #1
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	3301      	adds	r3, #1
 800514a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005152:	d901      	bls.n	8005158 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005154:	2303      	movs	r3, #3
 8005156:	e006      	b.n	8005166 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	691b      	ldr	r3, [r3, #16]
 800515c:	f003 0301 	and.w	r3, r3, #1
 8005160:	2b01      	cmp	r3, #1
 8005162:	d0f0      	beq.n	8005146 <USB_CoreReset+0x36>

  return HAL_OK;
 8005164:	2300      	movs	r3, #0
}
 8005166:	4618      	mov	r0, r3
 8005168:	3714      	adds	r7, #20
 800516a:	46bd      	mov	sp, r7
 800516c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005170:	4770      	bx	lr
	...

08005174 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005174:	b580      	push	{r7, lr}
 8005176:	b084      	sub	sp, #16
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
 800517c:	460b      	mov	r3, r1
 800517e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005180:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8005184:	f002 fcc2 	bl	8007b0c <USBD_static_malloc>
 8005188:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d109      	bne.n	80051a4 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	32b0      	adds	r2, #176	@ 0xb0
 800519a:	2100      	movs	r1, #0
 800519c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80051a0:	2302      	movs	r3, #2
 80051a2:	e0d4      	b.n	800534e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80051a4:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 80051a8:	2100      	movs	r1, #0
 80051aa:	68f8      	ldr	r0, [r7, #12]
 80051ac:	f002 fdbc 	bl	8007d28 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	32b0      	adds	r2, #176	@ 0xb0
 80051ba:	68f9      	ldr	r1, [r7, #12]
 80051bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	32b0      	adds	r2, #176	@ 0xb0
 80051ca:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	7c1b      	ldrb	r3, [r3, #16]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d138      	bne.n	800524e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80051dc:	4b5e      	ldr	r3, [pc, #376]	@ (8005358 <USBD_CDC_Init+0x1e4>)
 80051de:	7819      	ldrb	r1, [r3, #0]
 80051e0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80051e4:	2202      	movs	r2, #2
 80051e6:	6878      	ldr	r0, [r7, #4]
 80051e8:	f002 fb6d 	bl	80078c6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80051ec:	4b5a      	ldr	r3, [pc, #360]	@ (8005358 <USBD_CDC_Init+0x1e4>)
 80051ee:	781b      	ldrb	r3, [r3, #0]
 80051f0:	f003 020f 	and.w	r2, r3, #15
 80051f4:	6879      	ldr	r1, [r7, #4]
 80051f6:	4613      	mov	r3, r2
 80051f8:	009b      	lsls	r3, r3, #2
 80051fa:	4413      	add	r3, r2
 80051fc:	009b      	lsls	r3, r3, #2
 80051fe:	440b      	add	r3, r1
 8005200:	3324      	adds	r3, #36	@ 0x24
 8005202:	2201      	movs	r2, #1
 8005204:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005206:	4b55      	ldr	r3, [pc, #340]	@ (800535c <USBD_CDC_Init+0x1e8>)
 8005208:	7819      	ldrb	r1, [r3, #0]
 800520a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800520e:	2202      	movs	r2, #2
 8005210:	6878      	ldr	r0, [r7, #4]
 8005212:	f002 fb58 	bl	80078c6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005216:	4b51      	ldr	r3, [pc, #324]	@ (800535c <USBD_CDC_Init+0x1e8>)
 8005218:	781b      	ldrb	r3, [r3, #0]
 800521a:	f003 020f 	and.w	r2, r3, #15
 800521e:	6879      	ldr	r1, [r7, #4]
 8005220:	4613      	mov	r3, r2
 8005222:	009b      	lsls	r3, r3, #2
 8005224:	4413      	add	r3, r2
 8005226:	009b      	lsls	r3, r3, #2
 8005228:	440b      	add	r3, r1
 800522a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800522e:	2201      	movs	r2, #1
 8005230:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8005232:	4b4b      	ldr	r3, [pc, #300]	@ (8005360 <USBD_CDC_Init+0x1ec>)
 8005234:	781b      	ldrb	r3, [r3, #0]
 8005236:	f003 020f 	and.w	r2, r3, #15
 800523a:	6879      	ldr	r1, [r7, #4]
 800523c:	4613      	mov	r3, r2
 800523e:	009b      	lsls	r3, r3, #2
 8005240:	4413      	add	r3, r2
 8005242:	009b      	lsls	r3, r3, #2
 8005244:	440b      	add	r3, r1
 8005246:	3326      	adds	r3, #38	@ 0x26
 8005248:	2210      	movs	r2, #16
 800524a:	801a      	strh	r2, [r3, #0]
 800524c:	e035      	b.n	80052ba <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800524e:	4b42      	ldr	r3, [pc, #264]	@ (8005358 <USBD_CDC_Init+0x1e4>)
 8005250:	7819      	ldrb	r1, [r3, #0]
 8005252:	2340      	movs	r3, #64	@ 0x40
 8005254:	2202      	movs	r2, #2
 8005256:	6878      	ldr	r0, [r7, #4]
 8005258:	f002 fb35 	bl	80078c6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800525c:	4b3e      	ldr	r3, [pc, #248]	@ (8005358 <USBD_CDC_Init+0x1e4>)
 800525e:	781b      	ldrb	r3, [r3, #0]
 8005260:	f003 020f 	and.w	r2, r3, #15
 8005264:	6879      	ldr	r1, [r7, #4]
 8005266:	4613      	mov	r3, r2
 8005268:	009b      	lsls	r3, r3, #2
 800526a:	4413      	add	r3, r2
 800526c:	009b      	lsls	r3, r3, #2
 800526e:	440b      	add	r3, r1
 8005270:	3324      	adds	r3, #36	@ 0x24
 8005272:	2201      	movs	r2, #1
 8005274:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005276:	4b39      	ldr	r3, [pc, #228]	@ (800535c <USBD_CDC_Init+0x1e8>)
 8005278:	7819      	ldrb	r1, [r3, #0]
 800527a:	2340      	movs	r3, #64	@ 0x40
 800527c:	2202      	movs	r2, #2
 800527e:	6878      	ldr	r0, [r7, #4]
 8005280:	f002 fb21 	bl	80078c6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005284:	4b35      	ldr	r3, [pc, #212]	@ (800535c <USBD_CDC_Init+0x1e8>)
 8005286:	781b      	ldrb	r3, [r3, #0]
 8005288:	f003 020f 	and.w	r2, r3, #15
 800528c:	6879      	ldr	r1, [r7, #4]
 800528e:	4613      	mov	r3, r2
 8005290:	009b      	lsls	r3, r3, #2
 8005292:	4413      	add	r3, r2
 8005294:	009b      	lsls	r3, r3, #2
 8005296:	440b      	add	r3, r1
 8005298:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800529c:	2201      	movs	r2, #1
 800529e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80052a0:	4b2f      	ldr	r3, [pc, #188]	@ (8005360 <USBD_CDC_Init+0x1ec>)
 80052a2:	781b      	ldrb	r3, [r3, #0]
 80052a4:	f003 020f 	and.w	r2, r3, #15
 80052a8:	6879      	ldr	r1, [r7, #4]
 80052aa:	4613      	mov	r3, r2
 80052ac:	009b      	lsls	r3, r3, #2
 80052ae:	4413      	add	r3, r2
 80052b0:	009b      	lsls	r3, r3, #2
 80052b2:	440b      	add	r3, r1
 80052b4:	3326      	adds	r3, #38	@ 0x26
 80052b6:	2210      	movs	r2, #16
 80052b8:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80052ba:	4b29      	ldr	r3, [pc, #164]	@ (8005360 <USBD_CDC_Init+0x1ec>)
 80052bc:	7819      	ldrb	r1, [r3, #0]
 80052be:	2308      	movs	r3, #8
 80052c0:	2203      	movs	r2, #3
 80052c2:	6878      	ldr	r0, [r7, #4]
 80052c4:	f002 faff 	bl	80078c6 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80052c8:	4b25      	ldr	r3, [pc, #148]	@ (8005360 <USBD_CDC_Init+0x1ec>)
 80052ca:	781b      	ldrb	r3, [r3, #0]
 80052cc:	f003 020f 	and.w	r2, r3, #15
 80052d0:	6879      	ldr	r1, [r7, #4]
 80052d2:	4613      	mov	r3, r2
 80052d4:	009b      	lsls	r3, r3, #2
 80052d6:	4413      	add	r3, r2
 80052d8:	009b      	lsls	r3, r3, #2
 80052da:	440b      	add	r3, r1
 80052dc:	3324      	adds	r3, #36	@ 0x24
 80052de:	2201      	movs	r2, #1
 80052e0:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	2200      	movs	r2, #0
 80052e6:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80052f0:	687a      	ldr	r2, [r7, #4]
 80052f2:	33b0      	adds	r3, #176	@ 0xb0
 80052f4:	009b      	lsls	r3, r3, #2
 80052f6:	4413      	add	r3, r2
 80052f8:	685b      	ldr	r3, [r3, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	2200      	movs	r2, #0
 8005302:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	2200      	movs	r2, #0
 800530a:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8005314:	2b00      	cmp	r3, #0
 8005316:	d101      	bne.n	800531c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8005318:	2302      	movs	r3, #2
 800531a:	e018      	b.n	800534e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	7c1b      	ldrb	r3, [r3, #16]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d10a      	bne.n	800533a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005324:	4b0d      	ldr	r3, [pc, #52]	@ (800535c <USBD_CDC_Init+0x1e8>)
 8005326:	7819      	ldrb	r1, [r3, #0]
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800532e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005332:	6878      	ldr	r0, [r7, #4]
 8005334:	f002 fbb6 	bl	8007aa4 <USBD_LL_PrepareReceive>
 8005338:	e008      	b.n	800534c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800533a:	4b08      	ldr	r3, [pc, #32]	@ (800535c <USBD_CDC_Init+0x1e8>)
 800533c:	7819      	ldrb	r1, [r3, #0]
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005344:	2340      	movs	r3, #64	@ 0x40
 8005346:	6878      	ldr	r0, [r7, #4]
 8005348:	f002 fbac 	bl	8007aa4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800534c:	2300      	movs	r3, #0
}
 800534e:	4618      	mov	r0, r3
 8005350:	3710      	adds	r7, #16
 8005352:	46bd      	mov	sp, r7
 8005354:	bd80      	pop	{r7, pc}
 8005356:	bf00      	nop
 8005358:	200000b3 	.word	0x200000b3
 800535c:	200000b4 	.word	0x200000b4
 8005360:	200000b5 	.word	0x200000b5

08005364 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005364:	b580      	push	{r7, lr}
 8005366:	b082      	sub	sp, #8
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
 800536c:	460b      	mov	r3, r1
 800536e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8005370:	4b3a      	ldr	r3, [pc, #232]	@ (800545c <USBD_CDC_DeInit+0xf8>)
 8005372:	781b      	ldrb	r3, [r3, #0]
 8005374:	4619      	mov	r1, r3
 8005376:	6878      	ldr	r0, [r7, #4]
 8005378:	f002 facb 	bl	8007912 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800537c:	4b37      	ldr	r3, [pc, #220]	@ (800545c <USBD_CDC_DeInit+0xf8>)
 800537e:	781b      	ldrb	r3, [r3, #0]
 8005380:	f003 020f 	and.w	r2, r3, #15
 8005384:	6879      	ldr	r1, [r7, #4]
 8005386:	4613      	mov	r3, r2
 8005388:	009b      	lsls	r3, r3, #2
 800538a:	4413      	add	r3, r2
 800538c:	009b      	lsls	r3, r3, #2
 800538e:	440b      	add	r3, r1
 8005390:	3324      	adds	r3, #36	@ 0x24
 8005392:	2200      	movs	r2, #0
 8005394:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8005396:	4b32      	ldr	r3, [pc, #200]	@ (8005460 <USBD_CDC_DeInit+0xfc>)
 8005398:	781b      	ldrb	r3, [r3, #0]
 800539a:	4619      	mov	r1, r3
 800539c:	6878      	ldr	r0, [r7, #4]
 800539e:	f002 fab8 	bl	8007912 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80053a2:	4b2f      	ldr	r3, [pc, #188]	@ (8005460 <USBD_CDC_DeInit+0xfc>)
 80053a4:	781b      	ldrb	r3, [r3, #0]
 80053a6:	f003 020f 	and.w	r2, r3, #15
 80053aa:	6879      	ldr	r1, [r7, #4]
 80053ac:	4613      	mov	r3, r2
 80053ae:	009b      	lsls	r3, r3, #2
 80053b0:	4413      	add	r3, r2
 80053b2:	009b      	lsls	r3, r3, #2
 80053b4:	440b      	add	r3, r1
 80053b6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80053ba:	2200      	movs	r2, #0
 80053bc:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80053be:	4b29      	ldr	r3, [pc, #164]	@ (8005464 <USBD_CDC_DeInit+0x100>)
 80053c0:	781b      	ldrb	r3, [r3, #0]
 80053c2:	4619      	mov	r1, r3
 80053c4:	6878      	ldr	r0, [r7, #4]
 80053c6:	f002 faa4 	bl	8007912 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80053ca:	4b26      	ldr	r3, [pc, #152]	@ (8005464 <USBD_CDC_DeInit+0x100>)
 80053cc:	781b      	ldrb	r3, [r3, #0]
 80053ce:	f003 020f 	and.w	r2, r3, #15
 80053d2:	6879      	ldr	r1, [r7, #4]
 80053d4:	4613      	mov	r3, r2
 80053d6:	009b      	lsls	r3, r3, #2
 80053d8:	4413      	add	r3, r2
 80053da:	009b      	lsls	r3, r3, #2
 80053dc:	440b      	add	r3, r1
 80053de:	3324      	adds	r3, #36	@ 0x24
 80053e0:	2200      	movs	r2, #0
 80053e2:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80053e4:	4b1f      	ldr	r3, [pc, #124]	@ (8005464 <USBD_CDC_DeInit+0x100>)
 80053e6:	781b      	ldrb	r3, [r3, #0]
 80053e8:	f003 020f 	and.w	r2, r3, #15
 80053ec:	6879      	ldr	r1, [r7, #4]
 80053ee:	4613      	mov	r3, r2
 80053f0:	009b      	lsls	r3, r3, #2
 80053f2:	4413      	add	r3, r2
 80053f4:	009b      	lsls	r3, r3, #2
 80053f6:	440b      	add	r3, r1
 80053f8:	3326      	adds	r3, #38	@ 0x26
 80053fa:	2200      	movs	r2, #0
 80053fc:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	32b0      	adds	r2, #176	@ 0xb0
 8005408:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d01f      	beq.n	8005450 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005416:	687a      	ldr	r2, [r7, #4]
 8005418:	33b0      	adds	r3, #176	@ 0xb0
 800541a:	009b      	lsls	r3, r3, #2
 800541c:	4413      	add	r3, r2
 800541e:	685b      	ldr	r3, [r3, #4]
 8005420:	685b      	ldr	r3, [r3, #4]
 8005422:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	32b0      	adds	r2, #176	@ 0xb0
 800542e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005432:	4618      	mov	r0, r3
 8005434:	f002 fb78 	bl	8007b28 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	32b0      	adds	r2, #176	@ 0xb0
 8005442:	2100      	movs	r1, #0
 8005444:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2200      	movs	r2, #0
 800544c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005450:	2300      	movs	r3, #0
}
 8005452:	4618      	mov	r0, r3
 8005454:	3708      	adds	r7, #8
 8005456:	46bd      	mov	sp, r7
 8005458:	bd80      	pop	{r7, pc}
 800545a:	bf00      	nop
 800545c:	200000b3 	.word	0x200000b3
 8005460:	200000b4 	.word	0x200000b4
 8005464:	200000b5 	.word	0x200000b5

08005468 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005468:	b580      	push	{r7, lr}
 800546a:	b086      	sub	sp, #24
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
 8005470:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	32b0      	adds	r2, #176	@ 0xb0
 800547c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005480:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8005482:	2300      	movs	r3, #0
 8005484:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8005486:	2300      	movs	r3, #0
 8005488:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800548a:	2300      	movs	r3, #0
 800548c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800548e:	693b      	ldr	r3, [r7, #16]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d101      	bne.n	8005498 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8005494:	2303      	movs	r3, #3
 8005496:	e0bf      	b.n	8005618 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	781b      	ldrb	r3, [r3, #0]
 800549c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d050      	beq.n	8005546 <USBD_CDC_Setup+0xde>
 80054a4:	2b20      	cmp	r3, #32
 80054a6:	f040 80af 	bne.w	8005608 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	88db      	ldrh	r3, [r3, #6]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d03a      	beq.n	8005528 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	781b      	ldrb	r3, [r3, #0]
 80054b6:	b25b      	sxtb	r3, r3
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	da1b      	bge.n	80054f4 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80054c2:	687a      	ldr	r2, [r7, #4]
 80054c4:	33b0      	adds	r3, #176	@ 0xb0
 80054c6:	009b      	lsls	r3, r3, #2
 80054c8:	4413      	add	r3, r2
 80054ca:	685b      	ldr	r3, [r3, #4]
 80054cc:	689b      	ldr	r3, [r3, #8]
 80054ce:	683a      	ldr	r2, [r7, #0]
 80054d0:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80054d2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80054d4:	683a      	ldr	r2, [r7, #0]
 80054d6:	88d2      	ldrh	r2, [r2, #6]
 80054d8:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	88db      	ldrh	r3, [r3, #6]
 80054de:	2b07      	cmp	r3, #7
 80054e0:	bf28      	it	cs
 80054e2:	2307      	movcs	r3, #7
 80054e4:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80054e6:	693b      	ldr	r3, [r7, #16]
 80054e8:	89fa      	ldrh	r2, [r7, #14]
 80054ea:	4619      	mov	r1, r3
 80054ec:	6878      	ldr	r0, [r7, #4]
 80054ee:	f001 fd93 	bl	8007018 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80054f2:	e090      	b.n	8005616 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	785a      	ldrb	r2, [r3, #1]
 80054f8:	693b      	ldr	r3, [r7, #16]
 80054fa:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	88db      	ldrh	r3, [r3, #6]
 8005502:	2b3f      	cmp	r3, #63	@ 0x3f
 8005504:	d803      	bhi.n	800550e <USBD_CDC_Setup+0xa6>
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	88db      	ldrh	r3, [r3, #6]
 800550a:	b2da      	uxtb	r2, r3
 800550c:	e000      	b.n	8005510 <USBD_CDC_Setup+0xa8>
 800550e:	2240      	movs	r2, #64	@ 0x40
 8005510:	693b      	ldr	r3, [r7, #16]
 8005512:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8005516:	6939      	ldr	r1, [r7, #16]
 8005518:	693b      	ldr	r3, [r7, #16]
 800551a:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800551e:	461a      	mov	r2, r3
 8005520:	6878      	ldr	r0, [r7, #4]
 8005522:	f001 fda5 	bl	8007070 <USBD_CtlPrepareRx>
      break;
 8005526:	e076      	b.n	8005616 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800552e:	687a      	ldr	r2, [r7, #4]
 8005530:	33b0      	adds	r3, #176	@ 0xb0
 8005532:	009b      	lsls	r3, r3, #2
 8005534:	4413      	add	r3, r2
 8005536:	685b      	ldr	r3, [r3, #4]
 8005538:	689b      	ldr	r3, [r3, #8]
 800553a:	683a      	ldr	r2, [r7, #0]
 800553c:	7850      	ldrb	r0, [r2, #1]
 800553e:	2200      	movs	r2, #0
 8005540:	6839      	ldr	r1, [r7, #0]
 8005542:	4798      	blx	r3
      break;
 8005544:	e067      	b.n	8005616 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	785b      	ldrb	r3, [r3, #1]
 800554a:	2b0b      	cmp	r3, #11
 800554c:	d851      	bhi.n	80055f2 <USBD_CDC_Setup+0x18a>
 800554e:	a201      	add	r2, pc, #4	@ (adr r2, 8005554 <USBD_CDC_Setup+0xec>)
 8005550:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005554:	08005585 	.word	0x08005585
 8005558:	08005601 	.word	0x08005601
 800555c:	080055f3 	.word	0x080055f3
 8005560:	080055f3 	.word	0x080055f3
 8005564:	080055f3 	.word	0x080055f3
 8005568:	080055f3 	.word	0x080055f3
 800556c:	080055f3 	.word	0x080055f3
 8005570:	080055f3 	.word	0x080055f3
 8005574:	080055f3 	.word	0x080055f3
 8005578:	080055f3 	.word	0x080055f3
 800557c:	080055af 	.word	0x080055af
 8005580:	080055d9 	.word	0x080055d9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800558a:	b2db      	uxtb	r3, r3
 800558c:	2b03      	cmp	r3, #3
 800558e:	d107      	bne.n	80055a0 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005590:	f107 030a 	add.w	r3, r7, #10
 8005594:	2202      	movs	r2, #2
 8005596:	4619      	mov	r1, r3
 8005598:	6878      	ldr	r0, [r7, #4]
 800559a:	f001 fd3d 	bl	8007018 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800559e:	e032      	b.n	8005606 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80055a0:	6839      	ldr	r1, [r7, #0]
 80055a2:	6878      	ldr	r0, [r7, #4]
 80055a4:	f001 fcbb 	bl	8006f1e <USBD_CtlError>
            ret = USBD_FAIL;
 80055a8:	2303      	movs	r3, #3
 80055aa:	75fb      	strb	r3, [r7, #23]
          break;
 80055ac:	e02b      	b.n	8005606 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80055b4:	b2db      	uxtb	r3, r3
 80055b6:	2b03      	cmp	r3, #3
 80055b8:	d107      	bne.n	80055ca <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80055ba:	f107 030d 	add.w	r3, r7, #13
 80055be:	2201      	movs	r2, #1
 80055c0:	4619      	mov	r1, r3
 80055c2:	6878      	ldr	r0, [r7, #4]
 80055c4:	f001 fd28 	bl	8007018 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80055c8:	e01d      	b.n	8005606 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80055ca:	6839      	ldr	r1, [r7, #0]
 80055cc:	6878      	ldr	r0, [r7, #4]
 80055ce:	f001 fca6 	bl	8006f1e <USBD_CtlError>
            ret = USBD_FAIL;
 80055d2:	2303      	movs	r3, #3
 80055d4:	75fb      	strb	r3, [r7, #23]
          break;
 80055d6:	e016      	b.n	8005606 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80055de:	b2db      	uxtb	r3, r3
 80055e0:	2b03      	cmp	r3, #3
 80055e2:	d00f      	beq.n	8005604 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80055e4:	6839      	ldr	r1, [r7, #0]
 80055e6:	6878      	ldr	r0, [r7, #4]
 80055e8:	f001 fc99 	bl	8006f1e <USBD_CtlError>
            ret = USBD_FAIL;
 80055ec:	2303      	movs	r3, #3
 80055ee:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80055f0:	e008      	b.n	8005604 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80055f2:	6839      	ldr	r1, [r7, #0]
 80055f4:	6878      	ldr	r0, [r7, #4]
 80055f6:	f001 fc92 	bl	8006f1e <USBD_CtlError>
          ret = USBD_FAIL;
 80055fa:	2303      	movs	r3, #3
 80055fc:	75fb      	strb	r3, [r7, #23]
          break;
 80055fe:	e002      	b.n	8005606 <USBD_CDC_Setup+0x19e>
          break;
 8005600:	bf00      	nop
 8005602:	e008      	b.n	8005616 <USBD_CDC_Setup+0x1ae>
          break;
 8005604:	bf00      	nop
      }
      break;
 8005606:	e006      	b.n	8005616 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8005608:	6839      	ldr	r1, [r7, #0]
 800560a:	6878      	ldr	r0, [r7, #4]
 800560c:	f001 fc87 	bl	8006f1e <USBD_CtlError>
      ret = USBD_FAIL;
 8005610:	2303      	movs	r3, #3
 8005612:	75fb      	strb	r3, [r7, #23]
      break;
 8005614:	bf00      	nop
  }

  return (uint8_t)ret;
 8005616:	7dfb      	ldrb	r3, [r7, #23]
}
 8005618:	4618      	mov	r0, r3
 800561a:	3718      	adds	r7, #24
 800561c:	46bd      	mov	sp, r7
 800561e:	bd80      	pop	{r7, pc}

08005620 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005620:	b580      	push	{r7, lr}
 8005622:	b084      	sub	sp, #16
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
 8005628:	460b      	mov	r3, r1
 800562a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8005632:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	32b0      	adds	r2, #176	@ 0xb0
 800563e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d101      	bne.n	800564a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8005646:	2303      	movs	r3, #3
 8005648:	e065      	b.n	8005716 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	32b0      	adds	r2, #176	@ 0xb0
 8005654:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005658:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800565a:	78fb      	ldrb	r3, [r7, #3]
 800565c:	f003 020f 	and.w	r2, r3, #15
 8005660:	6879      	ldr	r1, [r7, #4]
 8005662:	4613      	mov	r3, r2
 8005664:	009b      	lsls	r3, r3, #2
 8005666:	4413      	add	r3, r2
 8005668:	009b      	lsls	r3, r3, #2
 800566a:	440b      	add	r3, r1
 800566c:	3318      	adds	r3, #24
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d02f      	beq.n	80056d4 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8005674:	78fb      	ldrb	r3, [r7, #3]
 8005676:	f003 020f 	and.w	r2, r3, #15
 800567a:	6879      	ldr	r1, [r7, #4]
 800567c:	4613      	mov	r3, r2
 800567e:	009b      	lsls	r3, r3, #2
 8005680:	4413      	add	r3, r2
 8005682:	009b      	lsls	r3, r3, #2
 8005684:	440b      	add	r3, r1
 8005686:	3318      	adds	r3, #24
 8005688:	681a      	ldr	r2, [r3, #0]
 800568a:	78fb      	ldrb	r3, [r7, #3]
 800568c:	f003 010f 	and.w	r1, r3, #15
 8005690:	68f8      	ldr	r0, [r7, #12]
 8005692:	460b      	mov	r3, r1
 8005694:	00db      	lsls	r3, r3, #3
 8005696:	440b      	add	r3, r1
 8005698:	009b      	lsls	r3, r3, #2
 800569a:	4403      	add	r3, r0
 800569c:	331c      	adds	r3, #28
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	fbb2 f1f3 	udiv	r1, r2, r3
 80056a4:	fb01 f303 	mul.w	r3, r1, r3
 80056a8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d112      	bne.n	80056d4 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80056ae:	78fb      	ldrb	r3, [r7, #3]
 80056b0:	f003 020f 	and.w	r2, r3, #15
 80056b4:	6879      	ldr	r1, [r7, #4]
 80056b6:	4613      	mov	r3, r2
 80056b8:	009b      	lsls	r3, r3, #2
 80056ba:	4413      	add	r3, r2
 80056bc:	009b      	lsls	r3, r3, #2
 80056be:	440b      	add	r3, r1
 80056c0:	3318      	adds	r3, #24
 80056c2:	2200      	movs	r2, #0
 80056c4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80056c6:	78f9      	ldrb	r1, [r7, #3]
 80056c8:	2300      	movs	r3, #0
 80056ca:	2200      	movs	r2, #0
 80056cc:	6878      	ldr	r0, [r7, #4]
 80056ce:	f002 f9c8 	bl	8007a62 <USBD_LL_Transmit>
 80056d2:	e01f      	b.n	8005714 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80056d4:	68bb      	ldr	r3, [r7, #8]
 80056d6:	2200      	movs	r2, #0
 80056d8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80056e2:	687a      	ldr	r2, [r7, #4]
 80056e4:	33b0      	adds	r3, #176	@ 0xb0
 80056e6:	009b      	lsls	r3, r3, #2
 80056e8:	4413      	add	r3, r2
 80056ea:	685b      	ldr	r3, [r3, #4]
 80056ec:	691b      	ldr	r3, [r3, #16]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d010      	beq.n	8005714 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80056f8:	687a      	ldr	r2, [r7, #4]
 80056fa:	33b0      	adds	r3, #176	@ 0xb0
 80056fc:	009b      	lsls	r3, r3, #2
 80056fe:	4413      	add	r3, r2
 8005700:	685b      	ldr	r3, [r3, #4]
 8005702:	691b      	ldr	r3, [r3, #16]
 8005704:	68ba      	ldr	r2, [r7, #8]
 8005706:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800570a:	68ba      	ldr	r2, [r7, #8]
 800570c:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8005710:	78fa      	ldrb	r2, [r7, #3]
 8005712:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8005714:	2300      	movs	r3, #0
}
 8005716:	4618      	mov	r0, r3
 8005718:	3710      	adds	r7, #16
 800571a:	46bd      	mov	sp, r7
 800571c:	bd80      	pop	{r7, pc}

0800571e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800571e:	b580      	push	{r7, lr}
 8005720:	b084      	sub	sp, #16
 8005722:	af00      	add	r7, sp, #0
 8005724:	6078      	str	r0, [r7, #4]
 8005726:	460b      	mov	r3, r1
 8005728:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	32b0      	adds	r2, #176	@ 0xb0
 8005734:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005738:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	32b0      	adds	r2, #176	@ 0xb0
 8005744:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d101      	bne.n	8005750 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800574c:	2303      	movs	r3, #3
 800574e:	e01a      	b.n	8005786 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005750:	78fb      	ldrb	r3, [r7, #3]
 8005752:	4619      	mov	r1, r3
 8005754:	6878      	ldr	r0, [r7, #4]
 8005756:	f002 f9c6 	bl	8007ae6 <USBD_LL_GetRxDataSize>
 800575a:	4602      	mov	r2, r0
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005768:	687a      	ldr	r2, [r7, #4]
 800576a:	33b0      	adds	r3, #176	@ 0xb0
 800576c:	009b      	lsls	r3, r3, #2
 800576e:	4413      	add	r3, r2
 8005770:	685b      	ldr	r3, [r3, #4]
 8005772:	68db      	ldr	r3, [r3, #12]
 8005774:	68fa      	ldr	r2, [r7, #12]
 8005776:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800577a:	68fa      	ldr	r2, [r7, #12]
 800577c:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8005780:	4611      	mov	r1, r2
 8005782:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005784:	2300      	movs	r3, #0
}
 8005786:	4618      	mov	r0, r3
 8005788:	3710      	adds	r7, #16
 800578a:	46bd      	mov	sp, r7
 800578c:	bd80      	pop	{r7, pc}

0800578e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800578e:	b580      	push	{r7, lr}
 8005790:	b084      	sub	sp, #16
 8005792:	af00      	add	r7, sp, #0
 8005794:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	32b0      	adds	r2, #176	@ 0xb0
 80057a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057a4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d101      	bne.n	80057b0 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80057ac:	2303      	movs	r3, #3
 80057ae:	e024      	b.n	80057fa <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80057b6:	687a      	ldr	r2, [r7, #4]
 80057b8:	33b0      	adds	r3, #176	@ 0xb0
 80057ba:	009b      	lsls	r3, r3, #2
 80057bc:	4413      	add	r3, r2
 80057be:	685b      	ldr	r3, [r3, #4]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d019      	beq.n	80057f8 <USBD_CDC_EP0_RxReady+0x6a>
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80057ca:	2bff      	cmp	r3, #255	@ 0xff
 80057cc:	d014      	beq.n	80057f8 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80057d4:	687a      	ldr	r2, [r7, #4]
 80057d6:	33b0      	adds	r3, #176	@ 0xb0
 80057d8:	009b      	lsls	r3, r3, #2
 80057da:	4413      	add	r3, r2
 80057dc:	685b      	ldr	r3, [r3, #4]
 80057de:	689b      	ldr	r3, [r3, #8]
 80057e0:	68fa      	ldr	r2, [r7, #12]
 80057e2:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 80057e6:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80057e8:	68fa      	ldr	r2, [r7, #12]
 80057ea:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80057ee:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	22ff      	movs	r2, #255	@ 0xff
 80057f4:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 80057f8:	2300      	movs	r3, #0
}
 80057fa:	4618      	mov	r0, r3
 80057fc:	3710      	adds	r7, #16
 80057fe:	46bd      	mov	sp, r7
 8005800:	bd80      	pop	{r7, pc}
	...

08005804 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005804:	b580      	push	{r7, lr}
 8005806:	b086      	sub	sp, #24
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800580c:	2182      	movs	r1, #130	@ 0x82
 800580e:	4818      	ldr	r0, [pc, #96]	@ (8005870 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005810:	f000 fd4f 	bl	80062b2 <USBD_GetEpDesc>
 8005814:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005816:	2101      	movs	r1, #1
 8005818:	4815      	ldr	r0, [pc, #84]	@ (8005870 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800581a:	f000 fd4a 	bl	80062b2 <USBD_GetEpDesc>
 800581e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005820:	2181      	movs	r1, #129	@ 0x81
 8005822:	4813      	ldr	r0, [pc, #76]	@ (8005870 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005824:	f000 fd45 	bl	80062b2 <USBD_GetEpDesc>
 8005828:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800582a:	697b      	ldr	r3, [r7, #20]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d002      	beq.n	8005836 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005830:	697b      	ldr	r3, [r7, #20]
 8005832:	2210      	movs	r2, #16
 8005834:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005836:	693b      	ldr	r3, [r7, #16]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d006      	beq.n	800584a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800583c:	693b      	ldr	r3, [r7, #16]
 800583e:	2200      	movs	r2, #0
 8005840:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005844:	711a      	strb	r2, [r3, #4]
 8005846:	2200      	movs	r2, #0
 8005848:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d006      	beq.n	800585e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	2200      	movs	r2, #0
 8005854:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005858:	711a      	strb	r2, [r3, #4]
 800585a:	2200      	movs	r2, #0
 800585c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2243      	movs	r2, #67	@ 0x43
 8005862:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005864:	4b02      	ldr	r3, [pc, #8]	@ (8005870 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8005866:	4618      	mov	r0, r3
 8005868:	3718      	adds	r7, #24
 800586a:	46bd      	mov	sp, r7
 800586c:	bd80      	pop	{r7, pc}
 800586e:	bf00      	nop
 8005870:	20000070 	.word	0x20000070

08005874 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005874:	b580      	push	{r7, lr}
 8005876:	b086      	sub	sp, #24
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800587c:	2182      	movs	r1, #130	@ 0x82
 800587e:	4818      	ldr	r0, [pc, #96]	@ (80058e0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005880:	f000 fd17 	bl	80062b2 <USBD_GetEpDesc>
 8005884:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005886:	2101      	movs	r1, #1
 8005888:	4815      	ldr	r0, [pc, #84]	@ (80058e0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800588a:	f000 fd12 	bl	80062b2 <USBD_GetEpDesc>
 800588e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005890:	2181      	movs	r1, #129	@ 0x81
 8005892:	4813      	ldr	r0, [pc, #76]	@ (80058e0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005894:	f000 fd0d 	bl	80062b2 <USBD_GetEpDesc>
 8005898:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800589a:	697b      	ldr	r3, [r7, #20]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d002      	beq.n	80058a6 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80058a0:	697b      	ldr	r3, [r7, #20]
 80058a2:	2210      	movs	r2, #16
 80058a4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80058a6:	693b      	ldr	r3, [r7, #16]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d006      	beq.n	80058ba <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80058ac:	693b      	ldr	r3, [r7, #16]
 80058ae:	2200      	movs	r2, #0
 80058b0:	711a      	strb	r2, [r3, #4]
 80058b2:	2200      	movs	r2, #0
 80058b4:	f042 0202 	orr.w	r2, r2, #2
 80058b8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d006      	beq.n	80058ce <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	2200      	movs	r2, #0
 80058c4:	711a      	strb	r2, [r3, #4]
 80058c6:	2200      	movs	r2, #0
 80058c8:	f042 0202 	orr.w	r2, r2, #2
 80058cc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	2243      	movs	r2, #67	@ 0x43
 80058d2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80058d4:	4b02      	ldr	r3, [pc, #8]	@ (80058e0 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80058d6:	4618      	mov	r0, r3
 80058d8:	3718      	adds	r7, #24
 80058da:	46bd      	mov	sp, r7
 80058dc:	bd80      	pop	{r7, pc}
 80058de:	bf00      	nop
 80058e0:	20000070 	.word	0x20000070

080058e4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80058e4:	b580      	push	{r7, lr}
 80058e6:	b086      	sub	sp, #24
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80058ec:	2182      	movs	r1, #130	@ 0x82
 80058ee:	4818      	ldr	r0, [pc, #96]	@ (8005950 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80058f0:	f000 fcdf 	bl	80062b2 <USBD_GetEpDesc>
 80058f4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80058f6:	2101      	movs	r1, #1
 80058f8:	4815      	ldr	r0, [pc, #84]	@ (8005950 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80058fa:	f000 fcda 	bl	80062b2 <USBD_GetEpDesc>
 80058fe:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005900:	2181      	movs	r1, #129	@ 0x81
 8005902:	4813      	ldr	r0, [pc, #76]	@ (8005950 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005904:	f000 fcd5 	bl	80062b2 <USBD_GetEpDesc>
 8005908:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800590a:	697b      	ldr	r3, [r7, #20]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d002      	beq.n	8005916 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005910:	697b      	ldr	r3, [r7, #20]
 8005912:	2210      	movs	r2, #16
 8005914:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005916:	693b      	ldr	r3, [r7, #16]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d006      	beq.n	800592a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800591c:	693b      	ldr	r3, [r7, #16]
 800591e:	2200      	movs	r2, #0
 8005920:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005924:	711a      	strb	r2, [r3, #4]
 8005926:	2200      	movs	r2, #0
 8005928:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	2b00      	cmp	r3, #0
 800592e:	d006      	beq.n	800593e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	2200      	movs	r2, #0
 8005934:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005938:	711a      	strb	r2, [r3, #4]
 800593a:	2200      	movs	r2, #0
 800593c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2243      	movs	r2, #67	@ 0x43
 8005942:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005944:	4b02      	ldr	r3, [pc, #8]	@ (8005950 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8005946:	4618      	mov	r0, r3
 8005948:	3718      	adds	r7, #24
 800594a:	46bd      	mov	sp, r7
 800594c:	bd80      	pop	{r7, pc}
 800594e:	bf00      	nop
 8005950:	20000070 	.word	0x20000070

08005954 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005954:	b480      	push	{r7}
 8005956:	b083      	sub	sp, #12
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	220a      	movs	r2, #10
 8005960:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8005962:	4b03      	ldr	r3, [pc, #12]	@ (8005970 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005964:	4618      	mov	r0, r3
 8005966:	370c      	adds	r7, #12
 8005968:	46bd      	mov	sp, r7
 800596a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596e:	4770      	bx	lr
 8005970:	2000002c 	.word	0x2000002c

08005974 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8005974:	b480      	push	{r7}
 8005976:	b083      	sub	sp, #12
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
 800597c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d101      	bne.n	8005988 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005984:	2303      	movs	r3, #3
 8005986:	e009      	b.n	800599c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800598e:	687a      	ldr	r2, [r7, #4]
 8005990:	33b0      	adds	r3, #176	@ 0xb0
 8005992:	009b      	lsls	r3, r3, #2
 8005994:	4413      	add	r3, r2
 8005996:	683a      	ldr	r2, [r7, #0]
 8005998:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800599a:	2300      	movs	r3, #0
}
 800599c:	4618      	mov	r0, r3
 800599e:	370c      	adds	r7, #12
 80059a0:	46bd      	mov	sp, r7
 80059a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a6:	4770      	bx	lr

080059a8 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80059a8:	b480      	push	{r7}
 80059aa:	b087      	sub	sp, #28
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	60f8      	str	r0, [r7, #12]
 80059b0:	60b9      	str	r1, [r7, #8]
 80059b2:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	32b0      	adds	r2, #176	@ 0xb0
 80059be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059c2:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80059c4:	697b      	ldr	r3, [r7, #20]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d101      	bne.n	80059ce <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80059ca:	2303      	movs	r3, #3
 80059cc:	e008      	b.n	80059e0 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80059ce:	697b      	ldr	r3, [r7, #20]
 80059d0:	68ba      	ldr	r2, [r7, #8]
 80059d2:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 80059d6:	697b      	ldr	r3, [r7, #20]
 80059d8:	687a      	ldr	r2, [r7, #4]
 80059da:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 80059de:	2300      	movs	r3, #0
}
 80059e0:	4618      	mov	r0, r3
 80059e2:	371c      	adds	r7, #28
 80059e4:	46bd      	mov	sp, r7
 80059e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ea:	4770      	bx	lr

080059ec <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80059ec:	b480      	push	{r7}
 80059ee:	b085      	sub	sp, #20
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
 80059f4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	32b0      	adds	r2, #176	@ 0xb0
 8005a00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a04:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d101      	bne.n	8005a10 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8005a0c:	2303      	movs	r3, #3
 8005a0e:	e004      	b.n	8005a1a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	683a      	ldr	r2, [r7, #0]
 8005a14:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8005a18:	2300      	movs	r3, #0
}
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	3714      	adds	r7, #20
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a24:	4770      	bx	lr
	...

08005a28 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b084      	sub	sp, #16
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	32b0      	adds	r2, #176	@ 0xb0
 8005a3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a3e:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8005a40:	2301      	movs	r3, #1
 8005a42:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8005a44:	68bb      	ldr	r3, [r7, #8]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d101      	bne.n	8005a4e <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8005a4a:	2303      	movs	r3, #3
 8005a4c:	e025      	b.n	8005a9a <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8005a4e:	68bb      	ldr	r3, [r7, #8]
 8005a50:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d11f      	bne.n	8005a98 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8005a58:	68bb      	ldr	r3, [r7, #8]
 8005a5a:	2201      	movs	r2, #1
 8005a5c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8005a60:	4b10      	ldr	r3, [pc, #64]	@ (8005aa4 <USBD_CDC_TransmitPacket+0x7c>)
 8005a62:	781b      	ldrb	r3, [r3, #0]
 8005a64:	f003 020f 	and.w	r2, r3, #15
 8005a68:	68bb      	ldr	r3, [r7, #8]
 8005a6a:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8005a6e:	6878      	ldr	r0, [r7, #4]
 8005a70:	4613      	mov	r3, r2
 8005a72:	009b      	lsls	r3, r3, #2
 8005a74:	4413      	add	r3, r2
 8005a76:	009b      	lsls	r3, r3, #2
 8005a78:	4403      	add	r3, r0
 8005a7a:	3318      	adds	r3, #24
 8005a7c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8005a7e:	4b09      	ldr	r3, [pc, #36]	@ (8005aa4 <USBD_CDC_TransmitPacket+0x7c>)
 8005a80:	7819      	ldrb	r1, [r3, #0]
 8005a82:	68bb      	ldr	r3, [r7, #8]
 8005a84:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8005a88:	68bb      	ldr	r3, [r7, #8]
 8005a8a:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8005a8e:	6878      	ldr	r0, [r7, #4]
 8005a90:	f001 ffe7 	bl	8007a62 <USBD_LL_Transmit>

    ret = USBD_OK;
 8005a94:	2300      	movs	r3, #0
 8005a96:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8005a98:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	3710      	adds	r7, #16
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	bd80      	pop	{r7, pc}
 8005aa2:	bf00      	nop
 8005aa4:	200000b3 	.word	0x200000b3

08005aa8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b084      	sub	sp, #16
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	32b0      	adds	r2, #176	@ 0xb0
 8005aba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005abe:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	32b0      	adds	r2, #176	@ 0xb0
 8005aca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d101      	bne.n	8005ad6 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8005ad2:	2303      	movs	r3, #3
 8005ad4:	e018      	b.n	8005b08 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	7c1b      	ldrb	r3, [r3, #16]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d10a      	bne.n	8005af4 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005ade:	4b0c      	ldr	r3, [pc, #48]	@ (8005b10 <USBD_CDC_ReceivePacket+0x68>)
 8005ae0:	7819      	ldrb	r1, [r3, #0]
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005ae8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005aec:	6878      	ldr	r0, [r7, #4]
 8005aee:	f001 ffd9 	bl	8007aa4 <USBD_LL_PrepareReceive>
 8005af2:	e008      	b.n	8005b06 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005af4:	4b06      	ldr	r3, [pc, #24]	@ (8005b10 <USBD_CDC_ReceivePacket+0x68>)
 8005af6:	7819      	ldrb	r1, [r3, #0]
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005afe:	2340      	movs	r3, #64	@ 0x40
 8005b00:	6878      	ldr	r0, [r7, #4]
 8005b02:	f001 ffcf 	bl	8007aa4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005b06:	2300      	movs	r3, #0
}
 8005b08:	4618      	mov	r0, r3
 8005b0a:	3710      	adds	r7, #16
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	bd80      	pop	{r7, pc}
 8005b10:	200000b4 	.word	0x200000b4

08005b14 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b086      	sub	sp, #24
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	60f8      	str	r0, [r7, #12]
 8005b1c:	60b9      	str	r1, [r7, #8]
 8005b1e:	4613      	mov	r3, r2
 8005b20:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d101      	bne.n	8005b2c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005b28:	2303      	movs	r3, #3
 8005b2a:	e01f      	b.n	8005b6c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	2200      	movs	r2, #0
 8005b30:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	2200      	movs	r2, #0
 8005b38:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	2200      	movs	r2, #0
 8005b40:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005b44:	68bb      	ldr	r3, [r7, #8]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d003      	beq.n	8005b52 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	68ba      	ldr	r2, [r7, #8]
 8005b4e:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	2201      	movs	r2, #1
 8005b56:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	79fa      	ldrb	r2, [r7, #7]
 8005b5e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005b60:	68f8      	ldr	r0, [r7, #12]
 8005b62:	f001 fe49 	bl	80077f8 <USBD_LL_Init>
 8005b66:	4603      	mov	r3, r0
 8005b68:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005b6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	3718      	adds	r7, #24
 8005b70:	46bd      	mov	sp, r7
 8005b72:	bd80      	pop	{r7, pc}

08005b74 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005b74:	b580      	push	{r7, lr}
 8005b76:	b084      	sub	sp, #16
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
 8005b7c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005b7e:	2300      	movs	r3, #0
 8005b80:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d101      	bne.n	8005b8c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005b88:	2303      	movs	r3, #3
 8005b8a:	e025      	b.n	8005bd8 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	683a      	ldr	r2, [r7, #0]
 8005b90:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	32ae      	adds	r2, #174	@ 0xae
 8005b9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ba2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d00f      	beq.n	8005bc8 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	32ae      	adds	r2, #174	@ 0xae
 8005bb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005bb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bb8:	f107 020e 	add.w	r2, r7, #14
 8005bbc:	4610      	mov	r0, r2
 8005bbe:	4798      	blx	r3
 8005bc0:	4602      	mov	r2, r0
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8005bce:	1c5a      	adds	r2, r3, #1
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8005bd6:	2300      	movs	r3, #0
}
 8005bd8:	4618      	mov	r0, r3
 8005bda:	3710      	adds	r7, #16
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	bd80      	pop	{r7, pc}

08005be0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b082      	sub	sp, #8
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005be8:	6878      	ldr	r0, [r7, #4]
 8005bea:	f001 fe51 	bl	8007890 <USBD_LL_Start>
 8005bee:	4603      	mov	r3, r0
}
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	3708      	adds	r7, #8
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	bd80      	pop	{r7, pc}

08005bf8 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8005bf8:	b480      	push	{r7}
 8005bfa:	b083      	sub	sp, #12
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005c00:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8005c02:	4618      	mov	r0, r3
 8005c04:	370c      	adds	r7, #12
 8005c06:	46bd      	mov	sp, r7
 8005c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0c:	4770      	bx	lr

08005c0e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005c0e:	b580      	push	{r7, lr}
 8005c10:	b084      	sub	sp, #16
 8005c12:	af00      	add	r7, sp, #0
 8005c14:	6078      	str	r0, [r7, #4]
 8005c16:	460b      	mov	r3, r1
 8005c18:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d009      	beq.n	8005c3c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	78fa      	ldrb	r2, [r7, #3]
 8005c32:	4611      	mov	r1, r2
 8005c34:	6878      	ldr	r0, [r7, #4]
 8005c36:	4798      	blx	r3
 8005c38:	4603      	mov	r3, r0
 8005c3a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005c3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c3e:	4618      	mov	r0, r3
 8005c40:	3710      	adds	r7, #16
 8005c42:	46bd      	mov	sp, r7
 8005c44:	bd80      	pop	{r7, pc}

08005c46 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005c46:	b580      	push	{r7, lr}
 8005c48:	b084      	sub	sp, #16
 8005c4a:	af00      	add	r7, sp, #0
 8005c4c:	6078      	str	r0, [r7, #4]
 8005c4e:	460b      	mov	r3, r1
 8005c50:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005c52:	2300      	movs	r3, #0
 8005c54:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005c5c:	685b      	ldr	r3, [r3, #4]
 8005c5e:	78fa      	ldrb	r2, [r7, #3]
 8005c60:	4611      	mov	r1, r2
 8005c62:	6878      	ldr	r0, [r7, #4]
 8005c64:	4798      	blx	r3
 8005c66:	4603      	mov	r3, r0
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d001      	beq.n	8005c70 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8005c6c:	2303      	movs	r3, #3
 8005c6e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005c70:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c72:	4618      	mov	r0, r3
 8005c74:	3710      	adds	r7, #16
 8005c76:	46bd      	mov	sp, r7
 8005c78:	bd80      	pop	{r7, pc}

08005c7a <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005c7a:	b580      	push	{r7, lr}
 8005c7c:	b084      	sub	sp, #16
 8005c7e:	af00      	add	r7, sp, #0
 8005c80:	6078      	str	r0, [r7, #4]
 8005c82:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8005c8a:	6839      	ldr	r1, [r7, #0]
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	f001 f90c 	bl	8006eaa <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	2201      	movs	r2, #1
 8005c96:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8005ca0:	461a      	mov	r2, r3
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8005cae:	f003 031f 	and.w	r3, r3, #31
 8005cb2:	2b02      	cmp	r3, #2
 8005cb4:	d01a      	beq.n	8005cec <USBD_LL_SetupStage+0x72>
 8005cb6:	2b02      	cmp	r3, #2
 8005cb8:	d822      	bhi.n	8005d00 <USBD_LL_SetupStage+0x86>
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d002      	beq.n	8005cc4 <USBD_LL_SetupStage+0x4a>
 8005cbe:	2b01      	cmp	r3, #1
 8005cc0:	d00a      	beq.n	8005cd8 <USBD_LL_SetupStage+0x5e>
 8005cc2:	e01d      	b.n	8005d00 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8005cca:	4619      	mov	r1, r3
 8005ccc:	6878      	ldr	r0, [r7, #4]
 8005cce:	f000 fb63 	bl	8006398 <USBD_StdDevReq>
 8005cd2:	4603      	mov	r3, r0
 8005cd4:	73fb      	strb	r3, [r7, #15]
      break;
 8005cd6:	e020      	b.n	8005d1a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8005cde:	4619      	mov	r1, r3
 8005ce0:	6878      	ldr	r0, [r7, #4]
 8005ce2:	f000 fbcb 	bl	800647c <USBD_StdItfReq>
 8005ce6:	4603      	mov	r3, r0
 8005ce8:	73fb      	strb	r3, [r7, #15]
      break;
 8005cea:	e016      	b.n	8005d1a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8005cf2:	4619      	mov	r1, r3
 8005cf4:	6878      	ldr	r0, [r7, #4]
 8005cf6:	f000 fc2d 	bl	8006554 <USBD_StdEPReq>
 8005cfa:	4603      	mov	r3, r0
 8005cfc:	73fb      	strb	r3, [r7, #15]
      break;
 8005cfe:	e00c      	b.n	8005d1a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8005d06:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8005d0a:	b2db      	uxtb	r3, r3
 8005d0c:	4619      	mov	r1, r3
 8005d0e:	6878      	ldr	r0, [r7, #4]
 8005d10:	f001 fe1e 	bl	8007950 <USBD_LL_StallEP>
 8005d14:	4603      	mov	r3, r0
 8005d16:	73fb      	strb	r3, [r7, #15]
      break;
 8005d18:	bf00      	nop
  }

  return ret;
 8005d1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	3710      	adds	r7, #16
 8005d20:	46bd      	mov	sp, r7
 8005d22:	bd80      	pop	{r7, pc}

08005d24 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005d24:	b580      	push	{r7, lr}
 8005d26:	b086      	sub	sp, #24
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	60f8      	str	r0, [r7, #12]
 8005d2c:	460b      	mov	r3, r1
 8005d2e:	607a      	str	r2, [r7, #4]
 8005d30:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8005d32:	2300      	movs	r3, #0
 8005d34:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8005d36:	7afb      	ldrb	r3, [r7, #11]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d16e      	bne.n	8005e1a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8005d42:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8005d4a:	2b03      	cmp	r3, #3
 8005d4c:	f040 8098 	bne.w	8005e80 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8005d50:	693b      	ldr	r3, [r7, #16]
 8005d52:	689a      	ldr	r2, [r3, #8]
 8005d54:	693b      	ldr	r3, [r7, #16]
 8005d56:	68db      	ldr	r3, [r3, #12]
 8005d58:	429a      	cmp	r2, r3
 8005d5a:	d913      	bls.n	8005d84 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8005d5c:	693b      	ldr	r3, [r7, #16]
 8005d5e:	689a      	ldr	r2, [r3, #8]
 8005d60:	693b      	ldr	r3, [r7, #16]
 8005d62:	68db      	ldr	r3, [r3, #12]
 8005d64:	1ad2      	subs	r2, r2, r3
 8005d66:	693b      	ldr	r3, [r7, #16]
 8005d68:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005d6a:	693b      	ldr	r3, [r7, #16]
 8005d6c:	68da      	ldr	r2, [r3, #12]
 8005d6e:	693b      	ldr	r3, [r7, #16]
 8005d70:	689b      	ldr	r3, [r3, #8]
 8005d72:	4293      	cmp	r3, r2
 8005d74:	bf28      	it	cs
 8005d76:	4613      	movcs	r3, r2
 8005d78:	461a      	mov	r2, r3
 8005d7a:	6879      	ldr	r1, [r7, #4]
 8005d7c:	68f8      	ldr	r0, [r7, #12]
 8005d7e:	f001 f994 	bl	80070aa <USBD_CtlContinueRx>
 8005d82:	e07d      	b.n	8005e80 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8005d8a:	f003 031f 	and.w	r3, r3, #31
 8005d8e:	2b02      	cmp	r3, #2
 8005d90:	d014      	beq.n	8005dbc <USBD_LL_DataOutStage+0x98>
 8005d92:	2b02      	cmp	r3, #2
 8005d94:	d81d      	bhi.n	8005dd2 <USBD_LL_DataOutStage+0xae>
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d002      	beq.n	8005da0 <USBD_LL_DataOutStage+0x7c>
 8005d9a:	2b01      	cmp	r3, #1
 8005d9c:	d003      	beq.n	8005da6 <USBD_LL_DataOutStage+0x82>
 8005d9e:	e018      	b.n	8005dd2 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8005da0:	2300      	movs	r3, #0
 8005da2:	75bb      	strb	r3, [r7, #22]
            break;
 8005da4:	e018      	b.n	8005dd8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8005dac:	b2db      	uxtb	r3, r3
 8005dae:	4619      	mov	r1, r3
 8005db0:	68f8      	ldr	r0, [r7, #12]
 8005db2:	f000 fa64 	bl	800627e <USBD_CoreFindIF>
 8005db6:	4603      	mov	r3, r0
 8005db8:	75bb      	strb	r3, [r7, #22]
            break;
 8005dba:	e00d      	b.n	8005dd8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8005dc2:	b2db      	uxtb	r3, r3
 8005dc4:	4619      	mov	r1, r3
 8005dc6:	68f8      	ldr	r0, [r7, #12]
 8005dc8:	f000 fa66 	bl	8006298 <USBD_CoreFindEP>
 8005dcc:	4603      	mov	r3, r0
 8005dce:	75bb      	strb	r3, [r7, #22]
            break;
 8005dd0:	e002      	b.n	8005dd8 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	75bb      	strb	r3, [r7, #22]
            break;
 8005dd6:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8005dd8:	7dbb      	ldrb	r3, [r7, #22]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d119      	bne.n	8005e12 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005de4:	b2db      	uxtb	r3, r3
 8005de6:	2b03      	cmp	r3, #3
 8005de8:	d113      	bne.n	8005e12 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8005dea:	7dba      	ldrb	r2, [r7, #22]
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	32ae      	adds	r2, #174	@ 0xae
 8005df0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005df4:	691b      	ldr	r3, [r3, #16]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d00b      	beq.n	8005e12 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8005dfa:	7dba      	ldrb	r2, [r7, #22]
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8005e02:	7dba      	ldrb	r2, [r7, #22]
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	32ae      	adds	r2, #174	@ 0xae
 8005e08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e0c:	691b      	ldr	r3, [r3, #16]
 8005e0e:	68f8      	ldr	r0, [r7, #12]
 8005e10:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8005e12:	68f8      	ldr	r0, [r7, #12]
 8005e14:	f001 f95a 	bl	80070cc <USBD_CtlSendStatus>
 8005e18:	e032      	b.n	8005e80 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8005e1a:	7afb      	ldrb	r3, [r7, #11]
 8005e1c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005e20:	b2db      	uxtb	r3, r3
 8005e22:	4619      	mov	r1, r3
 8005e24:	68f8      	ldr	r0, [r7, #12]
 8005e26:	f000 fa37 	bl	8006298 <USBD_CoreFindEP>
 8005e2a:	4603      	mov	r3, r0
 8005e2c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005e2e:	7dbb      	ldrb	r3, [r7, #22]
 8005e30:	2bff      	cmp	r3, #255	@ 0xff
 8005e32:	d025      	beq.n	8005e80 <USBD_LL_DataOutStage+0x15c>
 8005e34:	7dbb      	ldrb	r3, [r7, #22]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d122      	bne.n	8005e80 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005e40:	b2db      	uxtb	r3, r3
 8005e42:	2b03      	cmp	r3, #3
 8005e44:	d117      	bne.n	8005e76 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8005e46:	7dba      	ldrb	r2, [r7, #22]
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	32ae      	adds	r2, #174	@ 0xae
 8005e4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e50:	699b      	ldr	r3, [r3, #24]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d00f      	beq.n	8005e76 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8005e56:	7dba      	ldrb	r2, [r7, #22]
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8005e5e:	7dba      	ldrb	r2, [r7, #22]
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	32ae      	adds	r2, #174	@ 0xae
 8005e64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e68:	699b      	ldr	r3, [r3, #24]
 8005e6a:	7afa      	ldrb	r2, [r7, #11]
 8005e6c:	4611      	mov	r1, r2
 8005e6e:	68f8      	ldr	r0, [r7, #12]
 8005e70:	4798      	blx	r3
 8005e72:	4603      	mov	r3, r0
 8005e74:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8005e76:	7dfb      	ldrb	r3, [r7, #23]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d001      	beq.n	8005e80 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8005e7c:	7dfb      	ldrb	r3, [r7, #23]
 8005e7e:	e000      	b.n	8005e82 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8005e80:	2300      	movs	r3, #0
}
 8005e82:	4618      	mov	r0, r3
 8005e84:	3718      	adds	r7, #24
 8005e86:	46bd      	mov	sp, r7
 8005e88:	bd80      	pop	{r7, pc}

08005e8a <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005e8a:	b580      	push	{r7, lr}
 8005e8c:	b086      	sub	sp, #24
 8005e8e:	af00      	add	r7, sp, #0
 8005e90:	60f8      	str	r0, [r7, #12]
 8005e92:	460b      	mov	r3, r1
 8005e94:	607a      	str	r2, [r7, #4]
 8005e96:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8005e98:	7afb      	ldrb	r3, [r7, #11]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d16f      	bne.n	8005f7e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	3314      	adds	r3, #20
 8005ea2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8005eaa:	2b02      	cmp	r3, #2
 8005eac:	d15a      	bne.n	8005f64 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8005eae:	693b      	ldr	r3, [r7, #16]
 8005eb0:	689a      	ldr	r2, [r3, #8]
 8005eb2:	693b      	ldr	r3, [r7, #16]
 8005eb4:	68db      	ldr	r3, [r3, #12]
 8005eb6:	429a      	cmp	r2, r3
 8005eb8:	d914      	bls.n	8005ee4 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005eba:	693b      	ldr	r3, [r7, #16]
 8005ebc:	689a      	ldr	r2, [r3, #8]
 8005ebe:	693b      	ldr	r3, [r7, #16]
 8005ec0:	68db      	ldr	r3, [r3, #12]
 8005ec2:	1ad2      	subs	r2, r2, r3
 8005ec4:	693b      	ldr	r3, [r7, #16]
 8005ec6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8005ec8:	693b      	ldr	r3, [r7, #16]
 8005eca:	689b      	ldr	r3, [r3, #8]
 8005ecc:	461a      	mov	r2, r3
 8005ece:	6879      	ldr	r1, [r7, #4]
 8005ed0:	68f8      	ldr	r0, [r7, #12]
 8005ed2:	f001 f8bc 	bl	800704e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	2200      	movs	r2, #0
 8005eda:	2100      	movs	r1, #0
 8005edc:	68f8      	ldr	r0, [r7, #12]
 8005ede:	f001 fde1 	bl	8007aa4 <USBD_LL_PrepareReceive>
 8005ee2:	e03f      	b.n	8005f64 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8005ee4:	693b      	ldr	r3, [r7, #16]
 8005ee6:	68da      	ldr	r2, [r3, #12]
 8005ee8:	693b      	ldr	r3, [r7, #16]
 8005eea:	689b      	ldr	r3, [r3, #8]
 8005eec:	429a      	cmp	r2, r3
 8005eee:	d11c      	bne.n	8005f2a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8005ef0:	693b      	ldr	r3, [r7, #16]
 8005ef2:	685a      	ldr	r2, [r3, #4]
 8005ef4:	693b      	ldr	r3, [r7, #16]
 8005ef6:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005ef8:	429a      	cmp	r2, r3
 8005efa:	d316      	bcc.n	8005f2a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8005efc:	693b      	ldr	r3, [r7, #16]
 8005efe:	685a      	ldr	r2, [r3, #4]
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005f06:	429a      	cmp	r2, r3
 8005f08:	d20f      	bcs.n	8005f2a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	2100      	movs	r1, #0
 8005f0e:	68f8      	ldr	r0, [r7, #12]
 8005f10:	f001 f89d 	bl	800704e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	2200      	movs	r2, #0
 8005f18:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	2200      	movs	r2, #0
 8005f20:	2100      	movs	r1, #0
 8005f22:	68f8      	ldr	r0, [r7, #12]
 8005f24:	f001 fdbe 	bl	8007aa4 <USBD_LL_PrepareReceive>
 8005f28:	e01c      	b.n	8005f64 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005f30:	b2db      	uxtb	r3, r3
 8005f32:	2b03      	cmp	r3, #3
 8005f34:	d10f      	bne.n	8005f56 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005f3c:	68db      	ldr	r3, [r3, #12]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d009      	beq.n	8005f56 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	2200      	movs	r2, #0
 8005f46:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005f50:	68db      	ldr	r3, [r3, #12]
 8005f52:	68f8      	ldr	r0, [r7, #12]
 8005f54:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005f56:	2180      	movs	r1, #128	@ 0x80
 8005f58:	68f8      	ldr	r0, [r7, #12]
 8005f5a:	f001 fcf9 	bl	8007950 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8005f5e:	68f8      	ldr	r0, [r7, #12]
 8005f60:	f001 f8c7 	bl	80070f2 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d03a      	beq.n	8005fe4 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8005f6e:	68f8      	ldr	r0, [r7, #12]
 8005f70:	f7ff fe42 	bl	8005bf8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	2200      	movs	r2, #0
 8005f78:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8005f7c:	e032      	b.n	8005fe4 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8005f7e:	7afb      	ldrb	r3, [r7, #11]
 8005f80:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005f84:	b2db      	uxtb	r3, r3
 8005f86:	4619      	mov	r1, r3
 8005f88:	68f8      	ldr	r0, [r7, #12]
 8005f8a:	f000 f985 	bl	8006298 <USBD_CoreFindEP>
 8005f8e:	4603      	mov	r3, r0
 8005f90:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005f92:	7dfb      	ldrb	r3, [r7, #23]
 8005f94:	2bff      	cmp	r3, #255	@ 0xff
 8005f96:	d025      	beq.n	8005fe4 <USBD_LL_DataInStage+0x15a>
 8005f98:	7dfb      	ldrb	r3, [r7, #23]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d122      	bne.n	8005fe4 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005fa4:	b2db      	uxtb	r3, r3
 8005fa6:	2b03      	cmp	r3, #3
 8005fa8:	d11c      	bne.n	8005fe4 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8005faa:	7dfa      	ldrb	r2, [r7, #23]
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	32ae      	adds	r2, #174	@ 0xae
 8005fb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005fb4:	695b      	ldr	r3, [r3, #20]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d014      	beq.n	8005fe4 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8005fba:	7dfa      	ldrb	r2, [r7, #23]
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8005fc2:	7dfa      	ldrb	r2, [r7, #23]
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	32ae      	adds	r2, #174	@ 0xae
 8005fc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005fcc:	695b      	ldr	r3, [r3, #20]
 8005fce:	7afa      	ldrb	r2, [r7, #11]
 8005fd0:	4611      	mov	r1, r2
 8005fd2:	68f8      	ldr	r0, [r7, #12]
 8005fd4:	4798      	blx	r3
 8005fd6:	4603      	mov	r3, r0
 8005fd8:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8005fda:	7dbb      	ldrb	r3, [r7, #22]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d001      	beq.n	8005fe4 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8005fe0:	7dbb      	ldrb	r3, [r7, #22]
 8005fe2:	e000      	b.n	8005fe6 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8005fe4:	2300      	movs	r3, #0
}
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	3718      	adds	r7, #24
 8005fea:	46bd      	mov	sp, r7
 8005fec:	bd80      	pop	{r7, pc}

08005fee <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005fee:	b580      	push	{r7, lr}
 8005ff0:	b084      	sub	sp, #16
 8005ff2:	af00      	add	r7, sp, #0
 8005ff4:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	2201      	movs	r2, #1
 8005ffe:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	2200      	movs	r2, #0
 8006006:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	2200      	movs	r2, #0
 800600e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2200      	movs	r2, #0
 8006014:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2200      	movs	r2, #0
 800601c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006026:	2b00      	cmp	r3, #0
 8006028:	d014      	beq.n	8006054 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006030:	685b      	ldr	r3, [r3, #4]
 8006032:	2b00      	cmp	r3, #0
 8006034:	d00e      	beq.n	8006054 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800603c:	685b      	ldr	r3, [r3, #4]
 800603e:	687a      	ldr	r2, [r7, #4]
 8006040:	6852      	ldr	r2, [r2, #4]
 8006042:	b2d2      	uxtb	r2, r2
 8006044:	4611      	mov	r1, r2
 8006046:	6878      	ldr	r0, [r7, #4]
 8006048:	4798      	blx	r3
 800604a:	4603      	mov	r3, r0
 800604c:	2b00      	cmp	r3, #0
 800604e:	d001      	beq.n	8006054 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8006050:	2303      	movs	r3, #3
 8006052:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006054:	2340      	movs	r3, #64	@ 0x40
 8006056:	2200      	movs	r2, #0
 8006058:	2100      	movs	r1, #0
 800605a:	6878      	ldr	r0, [r7, #4]
 800605c:	f001 fc33 	bl	80078c6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2201      	movs	r2, #1
 8006064:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2240      	movs	r2, #64	@ 0x40
 800606c:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006070:	2340      	movs	r3, #64	@ 0x40
 8006072:	2200      	movs	r2, #0
 8006074:	2180      	movs	r1, #128	@ 0x80
 8006076:	6878      	ldr	r0, [r7, #4]
 8006078:	f001 fc25 	bl	80078c6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2201      	movs	r2, #1
 8006080:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	2240      	movs	r2, #64	@ 0x40
 8006086:	621a      	str	r2, [r3, #32]

  return ret;
 8006088:	7bfb      	ldrb	r3, [r7, #15]
}
 800608a:	4618      	mov	r0, r3
 800608c:	3710      	adds	r7, #16
 800608e:	46bd      	mov	sp, r7
 8006090:	bd80      	pop	{r7, pc}

08006092 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006092:	b480      	push	{r7}
 8006094:	b083      	sub	sp, #12
 8006096:	af00      	add	r7, sp, #0
 8006098:	6078      	str	r0, [r7, #4]
 800609a:	460b      	mov	r3, r1
 800609c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	78fa      	ldrb	r2, [r7, #3]
 80060a2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80060a4:	2300      	movs	r3, #0
}
 80060a6:	4618      	mov	r0, r3
 80060a8:	370c      	adds	r7, #12
 80060aa:	46bd      	mov	sp, r7
 80060ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b0:	4770      	bx	lr

080060b2 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80060b2:	b480      	push	{r7}
 80060b4:	b083      	sub	sp, #12
 80060b6:	af00      	add	r7, sp, #0
 80060b8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80060c0:	b2db      	uxtb	r3, r3
 80060c2:	2b04      	cmp	r3, #4
 80060c4:	d006      	beq.n	80060d4 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80060cc:	b2da      	uxtb	r2, r3
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2204      	movs	r2, #4
 80060d8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 80060dc:	2300      	movs	r3, #0
}
 80060de:	4618      	mov	r0, r3
 80060e0:	370c      	adds	r7, #12
 80060e2:	46bd      	mov	sp, r7
 80060e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e8:	4770      	bx	lr

080060ea <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80060ea:	b480      	push	{r7}
 80060ec:	b083      	sub	sp, #12
 80060ee:	af00      	add	r7, sp, #0
 80060f0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80060f8:	b2db      	uxtb	r3, r3
 80060fa:	2b04      	cmp	r3, #4
 80060fc:	d106      	bne.n	800610c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8006104:	b2da      	uxtb	r2, r3
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800610c:	2300      	movs	r3, #0
}
 800610e:	4618      	mov	r0, r3
 8006110:	370c      	adds	r7, #12
 8006112:	46bd      	mov	sp, r7
 8006114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006118:	4770      	bx	lr

0800611a <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800611a:	b580      	push	{r7, lr}
 800611c:	b082      	sub	sp, #8
 800611e:	af00      	add	r7, sp, #0
 8006120:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006128:	b2db      	uxtb	r3, r3
 800612a:	2b03      	cmp	r3, #3
 800612c:	d110      	bne.n	8006150 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006134:	2b00      	cmp	r3, #0
 8006136:	d00b      	beq.n	8006150 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800613e:	69db      	ldr	r3, [r3, #28]
 8006140:	2b00      	cmp	r3, #0
 8006142:	d005      	beq.n	8006150 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800614a:	69db      	ldr	r3, [r3, #28]
 800614c:	6878      	ldr	r0, [r7, #4]
 800614e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8006150:	2300      	movs	r3, #0
}
 8006152:	4618      	mov	r0, r3
 8006154:	3708      	adds	r7, #8
 8006156:	46bd      	mov	sp, r7
 8006158:	bd80      	pop	{r7, pc}

0800615a <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800615a:	b580      	push	{r7, lr}
 800615c:	b082      	sub	sp, #8
 800615e:	af00      	add	r7, sp, #0
 8006160:	6078      	str	r0, [r7, #4]
 8006162:	460b      	mov	r3, r1
 8006164:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	32ae      	adds	r2, #174	@ 0xae
 8006170:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006174:	2b00      	cmp	r3, #0
 8006176:	d101      	bne.n	800617c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8006178:	2303      	movs	r3, #3
 800617a:	e01c      	b.n	80061b6 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006182:	b2db      	uxtb	r3, r3
 8006184:	2b03      	cmp	r3, #3
 8006186:	d115      	bne.n	80061b4 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	32ae      	adds	r2, #174	@ 0xae
 8006192:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006196:	6a1b      	ldr	r3, [r3, #32]
 8006198:	2b00      	cmp	r3, #0
 800619a:	d00b      	beq.n	80061b4 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	32ae      	adds	r2, #174	@ 0xae
 80061a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061aa:	6a1b      	ldr	r3, [r3, #32]
 80061ac:	78fa      	ldrb	r2, [r7, #3]
 80061ae:	4611      	mov	r1, r2
 80061b0:	6878      	ldr	r0, [r7, #4]
 80061b2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80061b4:	2300      	movs	r3, #0
}
 80061b6:	4618      	mov	r0, r3
 80061b8:	3708      	adds	r7, #8
 80061ba:	46bd      	mov	sp, r7
 80061bc:	bd80      	pop	{r7, pc}

080061be <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80061be:	b580      	push	{r7, lr}
 80061c0:	b082      	sub	sp, #8
 80061c2:	af00      	add	r7, sp, #0
 80061c4:	6078      	str	r0, [r7, #4]
 80061c6:	460b      	mov	r3, r1
 80061c8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	32ae      	adds	r2, #174	@ 0xae
 80061d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d101      	bne.n	80061e0 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80061dc:	2303      	movs	r3, #3
 80061de:	e01c      	b.n	800621a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80061e6:	b2db      	uxtb	r3, r3
 80061e8:	2b03      	cmp	r3, #3
 80061ea:	d115      	bne.n	8006218 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	32ae      	adds	r2, #174	@ 0xae
 80061f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d00b      	beq.n	8006218 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	32ae      	adds	r2, #174	@ 0xae
 800620a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800620e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006210:	78fa      	ldrb	r2, [r7, #3]
 8006212:	4611      	mov	r1, r2
 8006214:	6878      	ldr	r0, [r7, #4]
 8006216:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006218:	2300      	movs	r3, #0
}
 800621a:	4618      	mov	r0, r3
 800621c:	3708      	adds	r7, #8
 800621e:	46bd      	mov	sp, r7
 8006220:	bd80      	pop	{r7, pc}

08006222 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006222:	b480      	push	{r7}
 8006224:	b083      	sub	sp, #12
 8006226:	af00      	add	r7, sp, #0
 8006228:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800622a:	2300      	movs	r3, #0
}
 800622c:	4618      	mov	r0, r3
 800622e:	370c      	adds	r7, #12
 8006230:	46bd      	mov	sp, r7
 8006232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006236:	4770      	bx	lr

08006238 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006238:	b580      	push	{r7, lr}
 800623a:	b084      	sub	sp, #16
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8006240:	2300      	movs	r3, #0
 8006242:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2201      	movs	r2, #1
 8006248:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006252:	2b00      	cmp	r3, #0
 8006254:	d00e      	beq.n	8006274 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800625c:	685b      	ldr	r3, [r3, #4]
 800625e:	687a      	ldr	r2, [r7, #4]
 8006260:	6852      	ldr	r2, [r2, #4]
 8006262:	b2d2      	uxtb	r2, r2
 8006264:	4611      	mov	r1, r2
 8006266:	6878      	ldr	r0, [r7, #4]
 8006268:	4798      	blx	r3
 800626a:	4603      	mov	r3, r0
 800626c:	2b00      	cmp	r3, #0
 800626e:	d001      	beq.n	8006274 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8006270:	2303      	movs	r3, #3
 8006272:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006274:	7bfb      	ldrb	r3, [r7, #15]
}
 8006276:	4618      	mov	r0, r3
 8006278:	3710      	adds	r7, #16
 800627a:	46bd      	mov	sp, r7
 800627c:	bd80      	pop	{r7, pc}

0800627e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800627e:	b480      	push	{r7}
 8006280:	b083      	sub	sp, #12
 8006282:	af00      	add	r7, sp, #0
 8006284:	6078      	str	r0, [r7, #4]
 8006286:	460b      	mov	r3, r1
 8006288:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800628a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800628c:	4618      	mov	r0, r3
 800628e:	370c      	adds	r7, #12
 8006290:	46bd      	mov	sp, r7
 8006292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006296:	4770      	bx	lr

08006298 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006298:	b480      	push	{r7}
 800629a:	b083      	sub	sp, #12
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
 80062a0:	460b      	mov	r3, r1
 80062a2:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80062a4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80062a6:	4618      	mov	r0, r3
 80062a8:	370c      	adds	r7, #12
 80062aa:	46bd      	mov	sp, r7
 80062ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b0:	4770      	bx	lr

080062b2 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80062b2:	b580      	push	{r7, lr}
 80062b4:	b086      	sub	sp, #24
 80062b6:	af00      	add	r7, sp, #0
 80062b8:	6078      	str	r0, [r7, #4]
 80062ba:	460b      	mov	r3, r1
 80062bc:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80062c6:	2300      	movs	r3, #0
 80062c8:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	885b      	ldrh	r3, [r3, #2]
 80062ce:	b29b      	uxth	r3, r3
 80062d0:	68fa      	ldr	r2, [r7, #12]
 80062d2:	7812      	ldrb	r2, [r2, #0]
 80062d4:	4293      	cmp	r3, r2
 80062d6:	d91f      	bls.n	8006318 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	781b      	ldrb	r3, [r3, #0]
 80062dc:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80062de:	e013      	b.n	8006308 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80062e0:	f107 030a 	add.w	r3, r7, #10
 80062e4:	4619      	mov	r1, r3
 80062e6:	6978      	ldr	r0, [r7, #20]
 80062e8:	f000 f81b 	bl	8006322 <USBD_GetNextDesc>
 80062ec:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80062ee:	697b      	ldr	r3, [r7, #20]
 80062f0:	785b      	ldrb	r3, [r3, #1]
 80062f2:	2b05      	cmp	r3, #5
 80062f4:	d108      	bne.n	8006308 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80062f6:	697b      	ldr	r3, [r7, #20]
 80062f8:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80062fa:	693b      	ldr	r3, [r7, #16]
 80062fc:	789b      	ldrb	r3, [r3, #2]
 80062fe:	78fa      	ldrb	r2, [r7, #3]
 8006300:	429a      	cmp	r2, r3
 8006302:	d008      	beq.n	8006316 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8006304:	2300      	movs	r3, #0
 8006306:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	885b      	ldrh	r3, [r3, #2]
 800630c:	b29a      	uxth	r2, r3
 800630e:	897b      	ldrh	r3, [r7, #10]
 8006310:	429a      	cmp	r2, r3
 8006312:	d8e5      	bhi.n	80062e0 <USBD_GetEpDesc+0x2e>
 8006314:	e000      	b.n	8006318 <USBD_GetEpDesc+0x66>
          break;
 8006316:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8006318:	693b      	ldr	r3, [r7, #16]
}
 800631a:	4618      	mov	r0, r3
 800631c:	3718      	adds	r7, #24
 800631e:	46bd      	mov	sp, r7
 8006320:	bd80      	pop	{r7, pc}

08006322 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8006322:	b480      	push	{r7}
 8006324:	b085      	sub	sp, #20
 8006326:	af00      	add	r7, sp, #0
 8006328:	6078      	str	r0, [r7, #4]
 800632a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	881b      	ldrh	r3, [r3, #0]
 8006334:	68fa      	ldr	r2, [r7, #12]
 8006336:	7812      	ldrb	r2, [r2, #0]
 8006338:	4413      	add	r3, r2
 800633a:	b29a      	uxth	r2, r3
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	781b      	ldrb	r3, [r3, #0]
 8006344:	461a      	mov	r2, r3
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	4413      	add	r3, r2
 800634a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800634c:	68fb      	ldr	r3, [r7, #12]
}
 800634e:	4618      	mov	r0, r3
 8006350:	3714      	adds	r7, #20
 8006352:	46bd      	mov	sp, r7
 8006354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006358:	4770      	bx	lr

0800635a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800635a:	b480      	push	{r7}
 800635c:	b087      	sub	sp, #28
 800635e:	af00      	add	r7, sp, #0
 8006360:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006366:	697b      	ldr	r3, [r7, #20]
 8006368:	781b      	ldrb	r3, [r3, #0]
 800636a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800636c:	697b      	ldr	r3, [r7, #20]
 800636e:	3301      	adds	r3, #1
 8006370:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006372:	697b      	ldr	r3, [r7, #20]
 8006374:	781b      	ldrb	r3, [r3, #0]
 8006376:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006378:	8a3b      	ldrh	r3, [r7, #16]
 800637a:	021b      	lsls	r3, r3, #8
 800637c:	b21a      	sxth	r2, r3
 800637e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006382:	4313      	orrs	r3, r2
 8006384:	b21b      	sxth	r3, r3
 8006386:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006388:	89fb      	ldrh	r3, [r7, #14]
}
 800638a:	4618      	mov	r0, r3
 800638c:	371c      	adds	r7, #28
 800638e:	46bd      	mov	sp, r7
 8006390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006394:	4770      	bx	lr
	...

08006398 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006398:	b580      	push	{r7, lr}
 800639a:	b084      	sub	sp, #16
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
 80063a0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80063a2:	2300      	movs	r3, #0
 80063a4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80063a6:	683b      	ldr	r3, [r7, #0]
 80063a8:	781b      	ldrb	r3, [r3, #0]
 80063aa:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80063ae:	2b40      	cmp	r3, #64	@ 0x40
 80063b0:	d005      	beq.n	80063be <USBD_StdDevReq+0x26>
 80063b2:	2b40      	cmp	r3, #64	@ 0x40
 80063b4:	d857      	bhi.n	8006466 <USBD_StdDevReq+0xce>
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d00f      	beq.n	80063da <USBD_StdDevReq+0x42>
 80063ba:	2b20      	cmp	r3, #32
 80063bc:	d153      	bne.n	8006466 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	32ae      	adds	r2, #174	@ 0xae
 80063c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063cc:	689b      	ldr	r3, [r3, #8]
 80063ce:	6839      	ldr	r1, [r7, #0]
 80063d0:	6878      	ldr	r0, [r7, #4]
 80063d2:	4798      	blx	r3
 80063d4:	4603      	mov	r3, r0
 80063d6:	73fb      	strb	r3, [r7, #15]
      break;
 80063d8:	e04a      	b.n	8006470 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80063da:	683b      	ldr	r3, [r7, #0]
 80063dc:	785b      	ldrb	r3, [r3, #1]
 80063de:	2b09      	cmp	r3, #9
 80063e0:	d83b      	bhi.n	800645a <USBD_StdDevReq+0xc2>
 80063e2:	a201      	add	r2, pc, #4	@ (adr r2, 80063e8 <USBD_StdDevReq+0x50>)
 80063e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063e8:	0800643d 	.word	0x0800643d
 80063ec:	08006451 	.word	0x08006451
 80063f0:	0800645b 	.word	0x0800645b
 80063f4:	08006447 	.word	0x08006447
 80063f8:	0800645b 	.word	0x0800645b
 80063fc:	0800641b 	.word	0x0800641b
 8006400:	08006411 	.word	0x08006411
 8006404:	0800645b 	.word	0x0800645b
 8006408:	08006433 	.word	0x08006433
 800640c:	08006425 	.word	0x08006425
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006410:	6839      	ldr	r1, [r7, #0]
 8006412:	6878      	ldr	r0, [r7, #4]
 8006414:	f000 fa3c 	bl	8006890 <USBD_GetDescriptor>
          break;
 8006418:	e024      	b.n	8006464 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800641a:	6839      	ldr	r1, [r7, #0]
 800641c:	6878      	ldr	r0, [r7, #4]
 800641e:	f000 fba1 	bl	8006b64 <USBD_SetAddress>
          break;
 8006422:	e01f      	b.n	8006464 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006424:	6839      	ldr	r1, [r7, #0]
 8006426:	6878      	ldr	r0, [r7, #4]
 8006428:	f000 fbe0 	bl	8006bec <USBD_SetConfig>
 800642c:	4603      	mov	r3, r0
 800642e:	73fb      	strb	r3, [r7, #15]
          break;
 8006430:	e018      	b.n	8006464 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006432:	6839      	ldr	r1, [r7, #0]
 8006434:	6878      	ldr	r0, [r7, #4]
 8006436:	f000 fc83 	bl	8006d40 <USBD_GetConfig>
          break;
 800643a:	e013      	b.n	8006464 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800643c:	6839      	ldr	r1, [r7, #0]
 800643e:	6878      	ldr	r0, [r7, #4]
 8006440:	f000 fcb4 	bl	8006dac <USBD_GetStatus>
          break;
 8006444:	e00e      	b.n	8006464 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006446:	6839      	ldr	r1, [r7, #0]
 8006448:	6878      	ldr	r0, [r7, #4]
 800644a:	f000 fce3 	bl	8006e14 <USBD_SetFeature>
          break;
 800644e:	e009      	b.n	8006464 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006450:	6839      	ldr	r1, [r7, #0]
 8006452:	6878      	ldr	r0, [r7, #4]
 8006454:	f000 fd07 	bl	8006e66 <USBD_ClrFeature>
          break;
 8006458:	e004      	b.n	8006464 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800645a:	6839      	ldr	r1, [r7, #0]
 800645c:	6878      	ldr	r0, [r7, #4]
 800645e:	f000 fd5e 	bl	8006f1e <USBD_CtlError>
          break;
 8006462:	bf00      	nop
      }
      break;
 8006464:	e004      	b.n	8006470 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8006466:	6839      	ldr	r1, [r7, #0]
 8006468:	6878      	ldr	r0, [r7, #4]
 800646a:	f000 fd58 	bl	8006f1e <USBD_CtlError>
      break;
 800646e:	bf00      	nop
  }

  return ret;
 8006470:	7bfb      	ldrb	r3, [r7, #15]
}
 8006472:	4618      	mov	r0, r3
 8006474:	3710      	adds	r7, #16
 8006476:	46bd      	mov	sp, r7
 8006478:	bd80      	pop	{r7, pc}
 800647a:	bf00      	nop

0800647c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800647c:	b580      	push	{r7, lr}
 800647e:	b084      	sub	sp, #16
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
 8006484:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006486:	2300      	movs	r3, #0
 8006488:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800648a:	683b      	ldr	r3, [r7, #0]
 800648c:	781b      	ldrb	r3, [r3, #0]
 800648e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006492:	2b40      	cmp	r3, #64	@ 0x40
 8006494:	d005      	beq.n	80064a2 <USBD_StdItfReq+0x26>
 8006496:	2b40      	cmp	r3, #64	@ 0x40
 8006498:	d852      	bhi.n	8006540 <USBD_StdItfReq+0xc4>
 800649a:	2b00      	cmp	r3, #0
 800649c:	d001      	beq.n	80064a2 <USBD_StdItfReq+0x26>
 800649e:	2b20      	cmp	r3, #32
 80064a0:	d14e      	bne.n	8006540 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80064a8:	b2db      	uxtb	r3, r3
 80064aa:	3b01      	subs	r3, #1
 80064ac:	2b02      	cmp	r3, #2
 80064ae:	d840      	bhi.n	8006532 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	889b      	ldrh	r3, [r3, #4]
 80064b4:	b2db      	uxtb	r3, r3
 80064b6:	2b01      	cmp	r3, #1
 80064b8:	d836      	bhi.n	8006528 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	889b      	ldrh	r3, [r3, #4]
 80064be:	b2db      	uxtb	r3, r3
 80064c0:	4619      	mov	r1, r3
 80064c2:	6878      	ldr	r0, [r7, #4]
 80064c4:	f7ff fedb 	bl	800627e <USBD_CoreFindIF>
 80064c8:	4603      	mov	r3, r0
 80064ca:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80064cc:	7bbb      	ldrb	r3, [r7, #14]
 80064ce:	2bff      	cmp	r3, #255	@ 0xff
 80064d0:	d01d      	beq.n	800650e <USBD_StdItfReq+0x92>
 80064d2:	7bbb      	ldrb	r3, [r7, #14]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d11a      	bne.n	800650e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80064d8:	7bba      	ldrb	r2, [r7, #14]
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	32ae      	adds	r2, #174	@ 0xae
 80064de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064e2:	689b      	ldr	r3, [r3, #8]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d00f      	beq.n	8006508 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80064e8:	7bba      	ldrb	r2, [r7, #14]
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80064f0:	7bba      	ldrb	r2, [r7, #14]
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	32ae      	adds	r2, #174	@ 0xae
 80064f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064fa:	689b      	ldr	r3, [r3, #8]
 80064fc:	6839      	ldr	r1, [r7, #0]
 80064fe:	6878      	ldr	r0, [r7, #4]
 8006500:	4798      	blx	r3
 8006502:	4603      	mov	r3, r0
 8006504:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006506:	e004      	b.n	8006512 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8006508:	2303      	movs	r3, #3
 800650a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800650c:	e001      	b.n	8006512 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800650e:	2303      	movs	r3, #3
 8006510:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	88db      	ldrh	r3, [r3, #6]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d110      	bne.n	800653c <USBD_StdItfReq+0xc0>
 800651a:	7bfb      	ldrb	r3, [r7, #15]
 800651c:	2b00      	cmp	r3, #0
 800651e:	d10d      	bne.n	800653c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006520:	6878      	ldr	r0, [r7, #4]
 8006522:	f000 fdd3 	bl	80070cc <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006526:	e009      	b.n	800653c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8006528:	6839      	ldr	r1, [r7, #0]
 800652a:	6878      	ldr	r0, [r7, #4]
 800652c:	f000 fcf7 	bl	8006f1e <USBD_CtlError>
          break;
 8006530:	e004      	b.n	800653c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8006532:	6839      	ldr	r1, [r7, #0]
 8006534:	6878      	ldr	r0, [r7, #4]
 8006536:	f000 fcf2 	bl	8006f1e <USBD_CtlError>
          break;
 800653a:	e000      	b.n	800653e <USBD_StdItfReq+0xc2>
          break;
 800653c:	bf00      	nop
      }
      break;
 800653e:	e004      	b.n	800654a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8006540:	6839      	ldr	r1, [r7, #0]
 8006542:	6878      	ldr	r0, [r7, #4]
 8006544:	f000 fceb 	bl	8006f1e <USBD_CtlError>
      break;
 8006548:	bf00      	nop
  }

  return ret;
 800654a:	7bfb      	ldrb	r3, [r7, #15]
}
 800654c:	4618      	mov	r0, r3
 800654e:	3710      	adds	r7, #16
 8006550:	46bd      	mov	sp, r7
 8006552:	bd80      	pop	{r7, pc}

08006554 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006554:	b580      	push	{r7, lr}
 8006556:	b084      	sub	sp, #16
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
 800655c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800655e:	2300      	movs	r3, #0
 8006560:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8006562:	683b      	ldr	r3, [r7, #0]
 8006564:	889b      	ldrh	r3, [r3, #4]
 8006566:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	781b      	ldrb	r3, [r3, #0]
 800656c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006570:	2b40      	cmp	r3, #64	@ 0x40
 8006572:	d007      	beq.n	8006584 <USBD_StdEPReq+0x30>
 8006574:	2b40      	cmp	r3, #64	@ 0x40
 8006576:	f200 817f 	bhi.w	8006878 <USBD_StdEPReq+0x324>
 800657a:	2b00      	cmp	r3, #0
 800657c:	d02a      	beq.n	80065d4 <USBD_StdEPReq+0x80>
 800657e:	2b20      	cmp	r3, #32
 8006580:	f040 817a 	bne.w	8006878 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8006584:	7bbb      	ldrb	r3, [r7, #14]
 8006586:	4619      	mov	r1, r3
 8006588:	6878      	ldr	r0, [r7, #4]
 800658a:	f7ff fe85 	bl	8006298 <USBD_CoreFindEP>
 800658e:	4603      	mov	r3, r0
 8006590:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006592:	7b7b      	ldrb	r3, [r7, #13]
 8006594:	2bff      	cmp	r3, #255	@ 0xff
 8006596:	f000 8174 	beq.w	8006882 <USBD_StdEPReq+0x32e>
 800659a:	7b7b      	ldrb	r3, [r7, #13]
 800659c:	2b00      	cmp	r3, #0
 800659e:	f040 8170 	bne.w	8006882 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80065a2:	7b7a      	ldrb	r2, [r7, #13]
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80065aa:	7b7a      	ldrb	r2, [r7, #13]
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	32ae      	adds	r2, #174	@ 0xae
 80065b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065b4:	689b      	ldr	r3, [r3, #8]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	f000 8163 	beq.w	8006882 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80065bc:	7b7a      	ldrb	r2, [r7, #13]
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	32ae      	adds	r2, #174	@ 0xae
 80065c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065c6:	689b      	ldr	r3, [r3, #8]
 80065c8:	6839      	ldr	r1, [r7, #0]
 80065ca:	6878      	ldr	r0, [r7, #4]
 80065cc:	4798      	blx	r3
 80065ce:	4603      	mov	r3, r0
 80065d0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80065d2:	e156      	b.n	8006882 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	785b      	ldrb	r3, [r3, #1]
 80065d8:	2b03      	cmp	r3, #3
 80065da:	d008      	beq.n	80065ee <USBD_StdEPReq+0x9a>
 80065dc:	2b03      	cmp	r3, #3
 80065de:	f300 8145 	bgt.w	800686c <USBD_StdEPReq+0x318>
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	f000 809b 	beq.w	800671e <USBD_StdEPReq+0x1ca>
 80065e8:	2b01      	cmp	r3, #1
 80065ea:	d03c      	beq.n	8006666 <USBD_StdEPReq+0x112>
 80065ec:	e13e      	b.n	800686c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80065f4:	b2db      	uxtb	r3, r3
 80065f6:	2b02      	cmp	r3, #2
 80065f8:	d002      	beq.n	8006600 <USBD_StdEPReq+0xac>
 80065fa:	2b03      	cmp	r3, #3
 80065fc:	d016      	beq.n	800662c <USBD_StdEPReq+0xd8>
 80065fe:	e02c      	b.n	800665a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006600:	7bbb      	ldrb	r3, [r7, #14]
 8006602:	2b00      	cmp	r3, #0
 8006604:	d00d      	beq.n	8006622 <USBD_StdEPReq+0xce>
 8006606:	7bbb      	ldrb	r3, [r7, #14]
 8006608:	2b80      	cmp	r3, #128	@ 0x80
 800660a:	d00a      	beq.n	8006622 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800660c:	7bbb      	ldrb	r3, [r7, #14]
 800660e:	4619      	mov	r1, r3
 8006610:	6878      	ldr	r0, [r7, #4]
 8006612:	f001 f99d 	bl	8007950 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006616:	2180      	movs	r1, #128	@ 0x80
 8006618:	6878      	ldr	r0, [r7, #4]
 800661a:	f001 f999 	bl	8007950 <USBD_LL_StallEP>
 800661e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006620:	e020      	b.n	8006664 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8006622:	6839      	ldr	r1, [r7, #0]
 8006624:	6878      	ldr	r0, [r7, #4]
 8006626:	f000 fc7a 	bl	8006f1e <USBD_CtlError>
              break;
 800662a:	e01b      	b.n	8006664 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800662c:	683b      	ldr	r3, [r7, #0]
 800662e:	885b      	ldrh	r3, [r3, #2]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d10e      	bne.n	8006652 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006634:	7bbb      	ldrb	r3, [r7, #14]
 8006636:	2b00      	cmp	r3, #0
 8006638:	d00b      	beq.n	8006652 <USBD_StdEPReq+0xfe>
 800663a:	7bbb      	ldrb	r3, [r7, #14]
 800663c:	2b80      	cmp	r3, #128	@ 0x80
 800663e:	d008      	beq.n	8006652 <USBD_StdEPReq+0xfe>
 8006640:	683b      	ldr	r3, [r7, #0]
 8006642:	88db      	ldrh	r3, [r3, #6]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d104      	bne.n	8006652 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006648:	7bbb      	ldrb	r3, [r7, #14]
 800664a:	4619      	mov	r1, r3
 800664c:	6878      	ldr	r0, [r7, #4]
 800664e:	f001 f97f 	bl	8007950 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006652:	6878      	ldr	r0, [r7, #4]
 8006654:	f000 fd3a 	bl	80070cc <USBD_CtlSendStatus>

              break;
 8006658:	e004      	b.n	8006664 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800665a:	6839      	ldr	r1, [r7, #0]
 800665c:	6878      	ldr	r0, [r7, #4]
 800665e:	f000 fc5e 	bl	8006f1e <USBD_CtlError>
              break;
 8006662:	bf00      	nop
          }
          break;
 8006664:	e107      	b.n	8006876 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800666c:	b2db      	uxtb	r3, r3
 800666e:	2b02      	cmp	r3, #2
 8006670:	d002      	beq.n	8006678 <USBD_StdEPReq+0x124>
 8006672:	2b03      	cmp	r3, #3
 8006674:	d016      	beq.n	80066a4 <USBD_StdEPReq+0x150>
 8006676:	e04b      	b.n	8006710 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006678:	7bbb      	ldrb	r3, [r7, #14]
 800667a:	2b00      	cmp	r3, #0
 800667c:	d00d      	beq.n	800669a <USBD_StdEPReq+0x146>
 800667e:	7bbb      	ldrb	r3, [r7, #14]
 8006680:	2b80      	cmp	r3, #128	@ 0x80
 8006682:	d00a      	beq.n	800669a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006684:	7bbb      	ldrb	r3, [r7, #14]
 8006686:	4619      	mov	r1, r3
 8006688:	6878      	ldr	r0, [r7, #4]
 800668a:	f001 f961 	bl	8007950 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800668e:	2180      	movs	r1, #128	@ 0x80
 8006690:	6878      	ldr	r0, [r7, #4]
 8006692:	f001 f95d 	bl	8007950 <USBD_LL_StallEP>
 8006696:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006698:	e040      	b.n	800671c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800669a:	6839      	ldr	r1, [r7, #0]
 800669c:	6878      	ldr	r0, [r7, #4]
 800669e:	f000 fc3e 	bl	8006f1e <USBD_CtlError>
              break;
 80066a2:	e03b      	b.n	800671c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80066a4:	683b      	ldr	r3, [r7, #0]
 80066a6:	885b      	ldrh	r3, [r3, #2]
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d136      	bne.n	800671a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80066ac:	7bbb      	ldrb	r3, [r7, #14]
 80066ae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d004      	beq.n	80066c0 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80066b6:	7bbb      	ldrb	r3, [r7, #14]
 80066b8:	4619      	mov	r1, r3
 80066ba:	6878      	ldr	r0, [r7, #4]
 80066bc:	f001 f967 	bl	800798e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80066c0:	6878      	ldr	r0, [r7, #4]
 80066c2:	f000 fd03 	bl	80070cc <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80066c6:	7bbb      	ldrb	r3, [r7, #14]
 80066c8:	4619      	mov	r1, r3
 80066ca:	6878      	ldr	r0, [r7, #4]
 80066cc:	f7ff fde4 	bl	8006298 <USBD_CoreFindEP>
 80066d0:	4603      	mov	r3, r0
 80066d2:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80066d4:	7b7b      	ldrb	r3, [r7, #13]
 80066d6:	2bff      	cmp	r3, #255	@ 0xff
 80066d8:	d01f      	beq.n	800671a <USBD_StdEPReq+0x1c6>
 80066da:	7b7b      	ldrb	r3, [r7, #13]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d11c      	bne.n	800671a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80066e0:	7b7a      	ldrb	r2, [r7, #13]
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80066e8:	7b7a      	ldrb	r2, [r7, #13]
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	32ae      	adds	r2, #174	@ 0xae
 80066ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066f2:	689b      	ldr	r3, [r3, #8]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d010      	beq.n	800671a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80066f8:	7b7a      	ldrb	r2, [r7, #13]
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	32ae      	adds	r2, #174	@ 0xae
 80066fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006702:	689b      	ldr	r3, [r3, #8]
 8006704:	6839      	ldr	r1, [r7, #0]
 8006706:	6878      	ldr	r0, [r7, #4]
 8006708:	4798      	blx	r3
 800670a:	4603      	mov	r3, r0
 800670c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800670e:	e004      	b.n	800671a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8006710:	6839      	ldr	r1, [r7, #0]
 8006712:	6878      	ldr	r0, [r7, #4]
 8006714:	f000 fc03 	bl	8006f1e <USBD_CtlError>
              break;
 8006718:	e000      	b.n	800671c <USBD_StdEPReq+0x1c8>
              break;
 800671a:	bf00      	nop
          }
          break;
 800671c:	e0ab      	b.n	8006876 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006724:	b2db      	uxtb	r3, r3
 8006726:	2b02      	cmp	r3, #2
 8006728:	d002      	beq.n	8006730 <USBD_StdEPReq+0x1dc>
 800672a:	2b03      	cmp	r3, #3
 800672c:	d032      	beq.n	8006794 <USBD_StdEPReq+0x240>
 800672e:	e097      	b.n	8006860 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006730:	7bbb      	ldrb	r3, [r7, #14]
 8006732:	2b00      	cmp	r3, #0
 8006734:	d007      	beq.n	8006746 <USBD_StdEPReq+0x1f2>
 8006736:	7bbb      	ldrb	r3, [r7, #14]
 8006738:	2b80      	cmp	r3, #128	@ 0x80
 800673a:	d004      	beq.n	8006746 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800673c:	6839      	ldr	r1, [r7, #0]
 800673e:	6878      	ldr	r0, [r7, #4]
 8006740:	f000 fbed 	bl	8006f1e <USBD_CtlError>
                break;
 8006744:	e091      	b.n	800686a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006746:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800674a:	2b00      	cmp	r3, #0
 800674c:	da0b      	bge.n	8006766 <USBD_StdEPReq+0x212>
 800674e:	7bbb      	ldrb	r3, [r7, #14]
 8006750:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006754:	4613      	mov	r3, r2
 8006756:	009b      	lsls	r3, r3, #2
 8006758:	4413      	add	r3, r2
 800675a:	009b      	lsls	r3, r3, #2
 800675c:	3310      	adds	r3, #16
 800675e:	687a      	ldr	r2, [r7, #4]
 8006760:	4413      	add	r3, r2
 8006762:	3304      	adds	r3, #4
 8006764:	e00b      	b.n	800677e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006766:	7bbb      	ldrb	r3, [r7, #14]
 8006768:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800676c:	4613      	mov	r3, r2
 800676e:	009b      	lsls	r3, r3, #2
 8006770:	4413      	add	r3, r2
 8006772:	009b      	lsls	r3, r3, #2
 8006774:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006778:	687a      	ldr	r2, [r7, #4]
 800677a:	4413      	add	r3, r2
 800677c:	3304      	adds	r3, #4
 800677e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006780:	68bb      	ldr	r3, [r7, #8]
 8006782:	2200      	movs	r2, #0
 8006784:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006786:	68bb      	ldr	r3, [r7, #8]
 8006788:	2202      	movs	r2, #2
 800678a:	4619      	mov	r1, r3
 800678c:	6878      	ldr	r0, [r7, #4]
 800678e:	f000 fc43 	bl	8007018 <USBD_CtlSendData>
              break;
 8006792:	e06a      	b.n	800686a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006794:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006798:	2b00      	cmp	r3, #0
 800679a:	da11      	bge.n	80067c0 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800679c:	7bbb      	ldrb	r3, [r7, #14]
 800679e:	f003 020f 	and.w	r2, r3, #15
 80067a2:	6879      	ldr	r1, [r7, #4]
 80067a4:	4613      	mov	r3, r2
 80067a6:	009b      	lsls	r3, r3, #2
 80067a8:	4413      	add	r3, r2
 80067aa:	009b      	lsls	r3, r3, #2
 80067ac:	440b      	add	r3, r1
 80067ae:	3324      	adds	r3, #36	@ 0x24
 80067b0:	881b      	ldrh	r3, [r3, #0]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d117      	bne.n	80067e6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80067b6:	6839      	ldr	r1, [r7, #0]
 80067b8:	6878      	ldr	r0, [r7, #4]
 80067ba:	f000 fbb0 	bl	8006f1e <USBD_CtlError>
                  break;
 80067be:	e054      	b.n	800686a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80067c0:	7bbb      	ldrb	r3, [r7, #14]
 80067c2:	f003 020f 	and.w	r2, r3, #15
 80067c6:	6879      	ldr	r1, [r7, #4]
 80067c8:	4613      	mov	r3, r2
 80067ca:	009b      	lsls	r3, r3, #2
 80067cc:	4413      	add	r3, r2
 80067ce:	009b      	lsls	r3, r3, #2
 80067d0:	440b      	add	r3, r1
 80067d2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80067d6:	881b      	ldrh	r3, [r3, #0]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d104      	bne.n	80067e6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80067dc:	6839      	ldr	r1, [r7, #0]
 80067de:	6878      	ldr	r0, [r7, #4]
 80067e0:	f000 fb9d 	bl	8006f1e <USBD_CtlError>
                  break;
 80067e4:	e041      	b.n	800686a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80067e6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	da0b      	bge.n	8006806 <USBD_StdEPReq+0x2b2>
 80067ee:	7bbb      	ldrb	r3, [r7, #14]
 80067f0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80067f4:	4613      	mov	r3, r2
 80067f6:	009b      	lsls	r3, r3, #2
 80067f8:	4413      	add	r3, r2
 80067fa:	009b      	lsls	r3, r3, #2
 80067fc:	3310      	adds	r3, #16
 80067fe:	687a      	ldr	r2, [r7, #4]
 8006800:	4413      	add	r3, r2
 8006802:	3304      	adds	r3, #4
 8006804:	e00b      	b.n	800681e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006806:	7bbb      	ldrb	r3, [r7, #14]
 8006808:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800680c:	4613      	mov	r3, r2
 800680e:	009b      	lsls	r3, r3, #2
 8006810:	4413      	add	r3, r2
 8006812:	009b      	lsls	r3, r3, #2
 8006814:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006818:	687a      	ldr	r2, [r7, #4]
 800681a:	4413      	add	r3, r2
 800681c:	3304      	adds	r3, #4
 800681e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006820:	7bbb      	ldrb	r3, [r7, #14]
 8006822:	2b00      	cmp	r3, #0
 8006824:	d002      	beq.n	800682c <USBD_StdEPReq+0x2d8>
 8006826:	7bbb      	ldrb	r3, [r7, #14]
 8006828:	2b80      	cmp	r3, #128	@ 0x80
 800682a:	d103      	bne.n	8006834 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800682c:	68bb      	ldr	r3, [r7, #8]
 800682e:	2200      	movs	r2, #0
 8006830:	601a      	str	r2, [r3, #0]
 8006832:	e00e      	b.n	8006852 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006834:	7bbb      	ldrb	r3, [r7, #14]
 8006836:	4619      	mov	r1, r3
 8006838:	6878      	ldr	r0, [r7, #4]
 800683a:	f001 f8c7 	bl	80079cc <USBD_LL_IsStallEP>
 800683e:	4603      	mov	r3, r0
 8006840:	2b00      	cmp	r3, #0
 8006842:	d003      	beq.n	800684c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8006844:	68bb      	ldr	r3, [r7, #8]
 8006846:	2201      	movs	r2, #1
 8006848:	601a      	str	r2, [r3, #0]
 800684a:	e002      	b.n	8006852 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800684c:	68bb      	ldr	r3, [r7, #8]
 800684e:	2200      	movs	r2, #0
 8006850:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006852:	68bb      	ldr	r3, [r7, #8]
 8006854:	2202      	movs	r2, #2
 8006856:	4619      	mov	r1, r3
 8006858:	6878      	ldr	r0, [r7, #4]
 800685a:	f000 fbdd 	bl	8007018 <USBD_CtlSendData>
              break;
 800685e:	e004      	b.n	800686a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8006860:	6839      	ldr	r1, [r7, #0]
 8006862:	6878      	ldr	r0, [r7, #4]
 8006864:	f000 fb5b 	bl	8006f1e <USBD_CtlError>
              break;
 8006868:	bf00      	nop
          }
          break;
 800686a:	e004      	b.n	8006876 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800686c:	6839      	ldr	r1, [r7, #0]
 800686e:	6878      	ldr	r0, [r7, #4]
 8006870:	f000 fb55 	bl	8006f1e <USBD_CtlError>
          break;
 8006874:	bf00      	nop
      }
      break;
 8006876:	e005      	b.n	8006884 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8006878:	6839      	ldr	r1, [r7, #0]
 800687a:	6878      	ldr	r0, [r7, #4]
 800687c:	f000 fb4f 	bl	8006f1e <USBD_CtlError>
      break;
 8006880:	e000      	b.n	8006884 <USBD_StdEPReq+0x330>
      break;
 8006882:	bf00      	nop
  }

  return ret;
 8006884:	7bfb      	ldrb	r3, [r7, #15]
}
 8006886:	4618      	mov	r0, r3
 8006888:	3710      	adds	r7, #16
 800688a:	46bd      	mov	sp, r7
 800688c:	bd80      	pop	{r7, pc}
	...

08006890 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006890:	b580      	push	{r7, lr}
 8006892:	b084      	sub	sp, #16
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
 8006898:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800689a:	2300      	movs	r3, #0
 800689c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800689e:	2300      	movs	r3, #0
 80068a0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80068a2:	2300      	movs	r3, #0
 80068a4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	885b      	ldrh	r3, [r3, #2]
 80068aa:	0a1b      	lsrs	r3, r3, #8
 80068ac:	b29b      	uxth	r3, r3
 80068ae:	3b01      	subs	r3, #1
 80068b0:	2b06      	cmp	r3, #6
 80068b2:	f200 8128 	bhi.w	8006b06 <USBD_GetDescriptor+0x276>
 80068b6:	a201      	add	r2, pc, #4	@ (adr r2, 80068bc <USBD_GetDescriptor+0x2c>)
 80068b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068bc:	080068d9 	.word	0x080068d9
 80068c0:	080068f1 	.word	0x080068f1
 80068c4:	08006931 	.word	0x08006931
 80068c8:	08006b07 	.word	0x08006b07
 80068cc:	08006b07 	.word	0x08006b07
 80068d0:	08006aa7 	.word	0x08006aa7
 80068d4:	08006ad3 	.word	0x08006ad3
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	687a      	ldr	r2, [r7, #4]
 80068e2:	7c12      	ldrb	r2, [r2, #16]
 80068e4:	f107 0108 	add.w	r1, r7, #8
 80068e8:	4610      	mov	r0, r2
 80068ea:	4798      	blx	r3
 80068ec:	60f8      	str	r0, [r7, #12]
      break;
 80068ee:	e112      	b.n	8006b16 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	7c1b      	ldrb	r3, [r3, #16]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d10d      	bne.n	8006914 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80068fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006900:	f107 0208 	add.w	r2, r7, #8
 8006904:	4610      	mov	r0, r2
 8006906:	4798      	blx	r3
 8006908:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	3301      	adds	r3, #1
 800690e:	2202      	movs	r2, #2
 8006910:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006912:	e100      	b.n	8006b16 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800691a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800691c:	f107 0208 	add.w	r2, r7, #8
 8006920:	4610      	mov	r0, r2
 8006922:	4798      	blx	r3
 8006924:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	3301      	adds	r3, #1
 800692a:	2202      	movs	r2, #2
 800692c:	701a      	strb	r2, [r3, #0]
      break;
 800692e:	e0f2      	b.n	8006b16 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006930:	683b      	ldr	r3, [r7, #0]
 8006932:	885b      	ldrh	r3, [r3, #2]
 8006934:	b2db      	uxtb	r3, r3
 8006936:	2b05      	cmp	r3, #5
 8006938:	f200 80ac 	bhi.w	8006a94 <USBD_GetDescriptor+0x204>
 800693c:	a201      	add	r2, pc, #4	@ (adr r2, 8006944 <USBD_GetDescriptor+0xb4>)
 800693e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006942:	bf00      	nop
 8006944:	0800695d 	.word	0x0800695d
 8006948:	08006991 	.word	0x08006991
 800694c:	080069c5 	.word	0x080069c5
 8006950:	080069f9 	.word	0x080069f9
 8006954:	08006a2d 	.word	0x08006a2d
 8006958:	08006a61 	.word	0x08006a61
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006962:	685b      	ldr	r3, [r3, #4]
 8006964:	2b00      	cmp	r3, #0
 8006966:	d00b      	beq.n	8006980 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800696e:	685b      	ldr	r3, [r3, #4]
 8006970:	687a      	ldr	r2, [r7, #4]
 8006972:	7c12      	ldrb	r2, [r2, #16]
 8006974:	f107 0108 	add.w	r1, r7, #8
 8006978:	4610      	mov	r0, r2
 800697a:	4798      	blx	r3
 800697c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800697e:	e091      	b.n	8006aa4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006980:	6839      	ldr	r1, [r7, #0]
 8006982:	6878      	ldr	r0, [r7, #4]
 8006984:	f000 facb 	bl	8006f1e <USBD_CtlError>
            err++;
 8006988:	7afb      	ldrb	r3, [r7, #11]
 800698a:	3301      	adds	r3, #1
 800698c:	72fb      	strb	r3, [r7, #11]
          break;
 800698e:	e089      	b.n	8006aa4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006996:	689b      	ldr	r3, [r3, #8]
 8006998:	2b00      	cmp	r3, #0
 800699a:	d00b      	beq.n	80069b4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80069a2:	689b      	ldr	r3, [r3, #8]
 80069a4:	687a      	ldr	r2, [r7, #4]
 80069a6:	7c12      	ldrb	r2, [r2, #16]
 80069a8:	f107 0108 	add.w	r1, r7, #8
 80069ac:	4610      	mov	r0, r2
 80069ae:	4798      	blx	r3
 80069b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80069b2:	e077      	b.n	8006aa4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80069b4:	6839      	ldr	r1, [r7, #0]
 80069b6:	6878      	ldr	r0, [r7, #4]
 80069b8:	f000 fab1 	bl	8006f1e <USBD_CtlError>
            err++;
 80069bc:	7afb      	ldrb	r3, [r7, #11]
 80069be:	3301      	adds	r3, #1
 80069c0:	72fb      	strb	r3, [r7, #11]
          break;
 80069c2:	e06f      	b.n	8006aa4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80069ca:	68db      	ldr	r3, [r3, #12]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d00b      	beq.n	80069e8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80069d6:	68db      	ldr	r3, [r3, #12]
 80069d8:	687a      	ldr	r2, [r7, #4]
 80069da:	7c12      	ldrb	r2, [r2, #16]
 80069dc:	f107 0108 	add.w	r1, r7, #8
 80069e0:	4610      	mov	r0, r2
 80069e2:	4798      	blx	r3
 80069e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80069e6:	e05d      	b.n	8006aa4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80069e8:	6839      	ldr	r1, [r7, #0]
 80069ea:	6878      	ldr	r0, [r7, #4]
 80069ec:	f000 fa97 	bl	8006f1e <USBD_CtlError>
            err++;
 80069f0:	7afb      	ldrb	r3, [r7, #11]
 80069f2:	3301      	adds	r3, #1
 80069f4:	72fb      	strb	r3, [r7, #11]
          break;
 80069f6:	e055      	b.n	8006aa4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80069fe:	691b      	ldr	r3, [r3, #16]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d00b      	beq.n	8006a1c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006a0a:	691b      	ldr	r3, [r3, #16]
 8006a0c:	687a      	ldr	r2, [r7, #4]
 8006a0e:	7c12      	ldrb	r2, [r2, #16]
 8006a10:	f107 0108 	add.w	r1, r7, #8
 8006a14:	4610      	mov	r0, r2
 8006a16:	4798      	blx	r3
 8006a18:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006a1a:	e043      	b.n	8006aa4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006a1c:	6839      	ldr	r1, [r7, #0]
 8006a1e:	6878      	ldr	r0, [r7, #4]
 8006a20:	f000 fa7d 	bl	8006f1e <USBD_CtlError>
            err++;
 8006a24:	7afb      	ldrb	r3, [r7, #11]
 8006a26:	3301      	adds	r3, #1
 8006a28:	72fb      	strb	r3, [r7, #11]
          break;
 8006a2a:	e03b      	b.n	8006aa4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006a32:	695b      	ldr	r3, [r3, #20]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d00b      	beq.n	8006a50 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006a3e:	695b      	ldr	r3, [r3, #20]
 8006a40:	687a      	ldr	r2, [r7, #4]
 8006a42:	7c12      	ldrb	r2, [r2, #16]
 8006a44:	f107 0108 	add.w	r1, r7, #8
 8006a48:	4610      	mov	r0, r2
 8006a4a:	4798      	blx	r3
 8006a4c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006a4e:	e029      	b.n	8006aa4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006a50:	6839      	ldr	r1, [r7, #0]
 8006a52:	6878      	ldr	r0, [r7, #4]
 8006a54:	f000 fa63 	bl	8006f1e <USBD_CtlError>
            err++;
 8006a58:	7afb      	ldrb	r3, [r7, #11]
 8006a5a:	3301      	adds	r3, #1
 8006a5c:	72fb      	strb	r3, [r7, #11]
          break;
 8006a5e:	e021      	b.n	8006aa4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006a66:	699b      	ldr	r3, [r3, #24]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d00b      	beq.n	8006a84 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006a72:	699b      	ldr	r3, [r3, #24]
 8006a74:	687a      	ldr	r2, [r7, #4]
 8006a76:	7c12      	ldrb	r2, [r2, #16]
 8006a78:	f107 0108 	add.w	r1, r7, #8
 8006a7c:	4610      	mov	r0, r2
 8006a7e:	4798      	blx	r3
 8006a80:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006a82:	e00f      	b.n	8006aa4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006a84:	6839      	ldr	r1, [r7, #0]
 8006a86:	6878      	ldr	r0, [r7, #4]
 8006a88:	f000 fa49 	bl	8006f1e <USBD_CtlError>
            err++;
 8006a8c:	7afb      	ldrb	r3, [r7, #11]
 8006a8e:	3301      	adds	r3, #1
 8006a90:	72fb      	strb	r3, [r7, #11]
          break;
 8006a92:	e007      	b.n	8006aa4 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006a94:	6839      	ldr	r1, [r7, #0]
 8006a96:	6878      	ldr	r0, [r7, #4]
 8006a98:	f000 fa41 	bl	8006f1e <USBD_CtlError>
          err++;
 8006a9c:	7afb      	ldrb	r3, [r7, #11]
 8006a9e:	3301      	adds	r3, #1
 8006aa0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8006aa2:	bf00      	nop
      }
      break;
 8006aa4:	e037      	b.n	8006b16 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	7c1b      	ldrb	r3, [r3, #16]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d109      	bne.n	8006ac2 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006ab4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ab6:	f107 0208 	add.w	r2, r7, #8
 8006aba:	4610      	mov	r0, r2
 8006abc:	4798      	blx	r3
 8006abe:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006ac0:	e029      	b.n	8006b16 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006ac2:	6839      	ldr	r1, [r7, #0]
 8006ac4:	6878      	ldr	r0, [r7, #4]
 8006ac6:	f000 fa2a 	bl	8006f1e <USBD_CtlError>
        err++;
 8006aca:	7afb      	ldrb	r3, [r7, #11]
 8006acc:	3301      	adds	r3, #1
 8006ace:	72fb      	strb	r3, [r7, #11]
      break;
 8006ad0:	e021      	b.n	8006b16 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	7c1b      	ldrb	r3, [r3, #16]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d10d      	bne.n	8006af6 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006ae0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ae2:	f107 0208 	add.w	r2, r7, #8
 8006ae6:	4610      	mov	r0, r2
 8006ae8:	4798      	blx	r3
 8006aea:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	3301      	adds	r3, #1
 8006af0:	2207      	movs	r2, #7
 8006af2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006af4:	e00f      	b.n	8006b16 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006af6:	6839      	ldr	r1, [r7, #0]
 8006af8:	6878      	ldr	r0, [r7, #4]
 8006afa:	f000 fa10 	bl	8006f1e <USBD_CtlError>
        err++;
 8006afe:	7afb      	ldrb	r3, [r7, #11]
 8006b00:	3301      	adds	r3, #1
 8006b02:	72fb      	strb	r3, [r7, #11]
      break;
 8006b04:	e007      	b.n	8006b16 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006b06:	6839      	ldr	r1, [r7, #0]
 8006b08:	6878      	ldr	r0, [r7, #4]
 8006b0a:	f000 fa08 	bl	8006f1e <USBD_CtlError>
      err++;
 8006b0e:	7afb      	ldrb	r3, [r7, #11]
 8006b10:	3301      	adds	r3, #1
 8006b12:	72fb      	strb	r3, [r7, #11]
      break;
 8006b14:	bf00      	nop
  }

  if (err != 0U)
 8006b16:	7afb      	ldrb	r3, [r7, #11]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d11e      	bne.n	8006b5a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8006b1c:	683b      	ldr	r3, [r7, #0]
 8006b1e:	88db      	ldrh	r3, [r3, #6]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d016      	beq.n	8006b52 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8006b24:	893b      	ldrh	r3, [r7, #8]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d00e      	beq.n	8006b48 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8006b2a:	683b      	ldr	r3, [r7, #0]
 8006b2c:	88da      	ldrh	r2, [r3, #6]
 8006b2e:	893b      	ldrh	r3, [r7, #8]
 8006b30:	4293      	cmp	r3, r2
 8006b32:	bf28      	it	cs
 8006b34:	4613      	movcs	r3, r2
 8006b36:	b29b      	uxth	r3, r3
 8006b38:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006b3a:	893b      	ldrh	r3, [r7, #8]
 8006b3c:	461a      	mov	r2, r3
 8006b3e:	68f9      	ldr	r1, [r7, #12]
 8006b40:	6878      	ldr	r0, [r7, #4]
 8006b42:	f000 fa69 	bl	8007018 <USBD_CtlSendData>
 8006b46:	e009      	b.n	8006b5c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006b48:	6839      	ldr	r1, [r7, #0]
 8006b4a:	6878      	ldr	r0, [r7, #4]
 8006b4c:	f000 f9e7 	bl	8006f1e <USBD_CtlError>
 8006b50:	e004      	b.n	8006b5c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8006b52:	6878      	ldr	r0, [r7, #4]
 8006b54:	f000 faba 	bl	80070cc <USBD_CtlSendStatus>
 8006b58:	e000      	b.n	8006b5c <USBD_GetDescriptor+0x2cc>
    return;
 8006b5a:	bf00      	nop
  }
}
 8006b5c:	3710      	adds	r7, #16
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	bd80      	pop	{r7, pc}
 8006b62:	bf00      	nop

08006b64 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b64:	b580      	push	{r7, lr}
 8006b66:	b084      	sub	sp, #16
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	6078      	str	r0, [r7, #4]
 8006b6c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006b6e:	683b      	ldr	r3, [r7, #0]
 8006b70:	889b      	ldrh	r3, [r3, #4]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d131      	bne.n	8006bda <USBD_SetAddress+0x76>
 8006b76:	683b      	ldr	r3, [r7, #0]
 8006b78:	88db      	ldrh	r3, [r3, #6]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d12d      	bne.n	8006bda <USBD_SetAddress+0x76>
 8006b7e:	683b      	ldr	r3, [r7, #0]
 8006b80:	885b      	ldrh	r3, [r3, #2]
 8006b82:	2b7f      	cmp	r3, #127	@ 0x7f
 8006b84:	d829      	bhi.n	8006bda <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006b86:	683b      	ldr	r3, [r7, #0]
 8006b88:	885b      	ldrh	r3, [r3, #2]
 8006b8a:	b2db      	uxtb	r3, r3
 8006b8c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006b90:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006b98:	b2db      	uxtb	r3, r3
 8006b9a:	2b03      	cmp	r3, #3
 8006b9c:	d104      	bne.n	8006ba8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8006b9e:	6839      	ldr	r1, [r7, #0]
 8006ba0:	6878      	ldr	r0, [r7, #4]
 8006ba2:	f000 f9bc 	bl	8006f1e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ba6:	e01d      	b.n	8006be4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	7bfa      	ldrb	r2, [r7, #15]
 8006bac:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006bb0:	7bfb      	ldrb	r3, [r7, #15]
 8006bb2:	4619      	mov	r1, r3
 8006bb4:	6878      	ldr	r0, [r7, #4]
 8006bb6:	f000 ff35 	bl	8007a24 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006bba:	6878      	ldr	r0, [r7, #4]
 8006bbc:	f000 fa86 	bl	80070cc <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006bc0:	7bfb      	ldrb	r3, [r7, #15]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d004      	beq.n	8006bd0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	2202      	movs	r2, #2
 8006bca:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006bce:	e009      	b.n	8006be4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2201      	movs	r2, #1
 8006bd4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006bd8:	e004      	b.n	8006be4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006bda:	6839      	ldr	r1, [r7, #0]
 8006bdc:	6878      	ldr	r0, [r7, #4]
 8006bde:	f000 f99e 	bl	8006f1e <USBD_CtlError>
  }
}
 8006be2:	bf00      	nop
 8006be4:	bf00      	nop
 8006be6:	3710      	adds	r7, #16
 8006be8:	46bd      	mov	sp, r7
 8006bea:	bd80      	pop	{r7, pc}

08006bec <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006bec:	b580      	push	{r7, lr}
 8006bee:	b084      	sub	sp, #16
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	6078      	str	r0, [r7, #4]
 8006bf4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006bf6:	2300      	movs	r3, #0
 8006bf8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006bfa:	683b      	ldr	r3, [r7, #0]
 8006bfc:	885b      	ldrh	r3, [r3, #2]
 8006bfe:	b2da      	uxtb	r2, r3
 8006c00:	4b4e      	ldr	r3, [pc, #312]	@ (8006d3c <USBD_SetConfig+0x150>)
 8006c02:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006c04:	4b4d      	ldr	r3, [pc, #308]	@ (8006d3c <USBD_SetConfig+0x150>)
 8006c06:	781b      	ldrb	r3, [r3, #0]
 8006c08:	2b01      	cmp	r3, #1
 8006c0a:	d905      	bls.n	8006c18 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006c0c:	6839      	ldr	r1, [r7, #0]
 8006c0e:	6878      	ldr	r0, [r7, #4]
 8006c10:	f000 f985 	bl	8006f1e <USBD_CtlError>
    return USBD_FAIL;
 8006c14:	2303      	movs	r3, #3
 8006c16:	e08c      	b.n	8006d32 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006c1e:	b2db      	uxtb	r3, r3
 8006c20:	2b02      	cmp	r3, #2
 8006c22:	d002      	beq.n	8006c2a <USBD_SetConfig+0x3e>
 8006c24:	2b03      	cmp	r3, #3
 8006c26:	d029      	beq.n	8006c7c <USBD_SetConfig+0x90>
 8006c28:	e075      	b.n	8006d16 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8006c2a:	4b44      	ldr	r3, [pc, #272]	@ (8006d3c <USBD_SetConfig+0x150>)
 8006c2c:	781b      	ldrb	r3, [r3, #0]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d020      	beq.n	8006c74 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8006c32:	4b42      	ldr	r3, [pc, #264]	@ (8006d3c <USBD_SetConfig+0x150>)
 8006c34:	781b      	ldrb	r3, [r3, #0]
 8006c36:	461a      	mov	r2, r3
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006c3c:	4b3f      	ldr	r3, [pc, #252]	@ (8006d3c <USBD_SetConfig+0x150>)
 8006c3e:	781b      	ldrb	r3, [r3, #0]
 8006c40:	4619      	mov	r1, r3
 8006c42:	6878      	ldr	r0, [r7, #4]
 8006c44:	f7fe ffe3 	bl	8005c0e <USBD_SetClassConfig>
 8006c48:	4603      	mov	r3, r0
 8006c4a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006c4c:	7bfb      	ldrb	r3, [r7, #15]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d008      	beq.n	8006c64 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8006c52:	6839      	ldr	r1, [r7, #0]
 8006c54:	6878      	ldr	r0, [r7, #4]
 8006c56:	f000 f962 	bl	8006f1e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	2202      	movs	r2, #2
 8006c5e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006c62:	e065      	b.n	8006d30 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006c64:	6878      	ldr	r0, [r7, #4]
 8006c66:	f000 fa31 	bl	80070cc <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	2203      	movs	r2, #3
 8006c6e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8006c72:	e05d      	b.n	8006d30 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006c74:	6878      	ldr	r0, [r7, #4]
 8006c76:	f000 fa29 	bl	80070cc <USBD_CtlSendStatus>
      break;
 8006c7a:	e059      	b.n	8006d30 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006c7c:	4b2f      	ldr	r3, [pc, #188]	@ (8006d3c <USBD_SetConfig+0x150>)
 8006c7e:	781b      	ldrb	r3, [r3, #0]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d112      	bne.n	8006caa <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2202      	movs	r2, #2
 8006c88:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8006c8c:	4b2b      	ldr	r3, [pc, #172]	@ (8006d3c <USBD_SetConfig+0x150>)
 8006c8e:	781b      	ldrb	r3, [r3, #0]
 8006c90:	461a      	mov	r2, r3
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006c96:	4b29      	ldr	r3, [pc, #164]	@ (8006d3c <USBD_SetConfig+0x150>)
 8006c98:	781b      	ldrb	r3, [r3, #0]
 8006c9a:	4619      	mov	r1, r3
 8006c9c:	6878      	ldr	r0, [r7, #4]
 8006c9e:	f7fe ffd2 	bl	8005c46 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8006ca2:	6878      	ldr	r0, [r7, #4]
 8006ca4:	f000 fa12 	bl	80070cc <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006ca8:	e042      	b.n	8006d30 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8006caa:	4b24      	ldr	r3, [pc, #144]	@ (8006d3c <USBD_SetConfig+0x150>)
 8006cac:	781b      	ldrb	r3, [r3, #0]
 8006cae:	461a      	mov	r2, r3
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	685b      	ldr	r3, [r3, #4]
 8006cb4:	429a      	cmp	r2, r3
 8006cb6:	d02a      	beq.n	8006d0e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	685b      	ldr	r3, [r3, #4]
 8006cbc:	b2db      	uxtb	r3, r3
 8006cbe:	4619      	mov	r1, r3
 8006cc0:	6878      	ldr	r0, [r7, #4]
 8006cc2:	f7fe ffc0 	bl	8005c46 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8006cc6:	4b1d      	ldr	r3, [pc, #116]	@ (8006d3c <USBD_SetConfig+0x150>)
 8006cc8:	781b      	ldrb	r3, [r3, #0]
 8006cca:	461a      	mov	r2, r3
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006cd0:	4b1a      	ldr	r3, [pc, #104]	@ (8006d3c <USBD_SetConfig+0x150>)
 8006cd2:	781b      	ldrb	r3, [r3, #0]
 8006cd4:	4619      	mov	r1, r3
 8006cd6:	6878      	ldr	r0, [r7, #4]
 8006cd8:	f7fe ff99 	bl	8005c0e <USBD_SetClassConfig>
 8006cdc:	4603      	mov	r3, r0
 8006cde:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8006ce0:	7bfb      	ldrb	r3, [r7, #15]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d00f      	beq.n	8006d06 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8006ce6:	6839      	ldr	r1, [r7, #0]
 8006ce8:	6878      	ldr	r0, [r7, #4]
 8006cea:	f000 f918 	bl	8006f1e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	685b      	ldr	r3, [r3, #4]
 8006cf2:	b2db      	uxtb	r3, r3
 8006cf4:	4619      	mov	r1, r3
 8006cf6:	6878      	ldr	r0, [r7, #4]
 8006cf8:	f7fe ffa5 	bl	8005c46 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	2202      	movs	r2, #2
 8006d00:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8006d04:	e014      	b.n	8006d30 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006d06:	6878      	ldr	r0, [r7, #4]
 8006d08:	f000 f9e0 	bl	80070cc <USBD_CtlSendStatus>
      break;
 8006d0c:	e010      	b.n	8006d30 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006d0e:	6878      	ldr	r0, [r7, #4]
 8006d10:	f000 f9dc 	bl	80070cc <USBD_CtlSendStatus>
      break;
 8006d14:	e00c      	b.n	8006d30 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8006d16:	6839      	ldr	r1, [r7, #0]
 8006d18:	6878      	ldr	r0, [r7, #4]
 8006d1a:	f000 f900 	bl	8006f1e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006d1e:	4b07      	ldr	r3, [pc, #28]	@ (8006d3c <USBD_SetConfig+0x150>)
 8006d20:	781b      	ldrb	r3, [r3, #0]
 8006d22:	4619      	mov	r1, r3
 8006d24:	6878      	ldr	r0, [r7, #4]
 8006d26:	f7fe ff8e 	bl	8005c46 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8006d2a:	2303      	movs	r3, #3
 8006d2c:	73fb      	strb	r3, [r7, #15]
      break;
 8006d2e:	bf00      	nop
  }

  return ret;
 8006d30:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d32:	4618      	mov	r0, r3
 8006d34:	3710      	adds	r7, #16
 8006d36:	46bd      	mov	sp, r7
 8006d38:	bd80      	pop	{r7, pc}
 8006d3a:	bf00      	nop
 8006d3c:	200001cc 	.word	0x200001cc

08006d40 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d40:	b580      	push	{r7, lr}
 8006d42:	b082      	sub	sp, #8
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
 8006d48:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006d4a:	683b      	ldr	r3, [r7, #0]
 8006d4c:	88db      	ldrh	r3, [r3, #6]
 8006d4e:	2b01      	cmp	r3, #1
 8006d50:	d004      	beq.n	8006d5c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006d52:	6839      	ldr	r1, [r7, #0]
 8006d54:	6878      	ldr	r0, [r7, #4]
 8006d56:	f000 f8e2 	bl	8006f1e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006d5a:	e023      	b.n	8006da4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006d62:	b2db      	uxtb	r3, r3
 8006d64:	2b02      	cmp	r3, #2
 8006d66:	dc02      	bgt.n	8006d6e <USBD_GetConfig+0x2e>
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	dc03      	bgt.n	8006d74 <USBD_GetConfig+0x34>
 8006d6c:	e015      	b.n	8006d9a <USBD_GetConfig+0x5a>
 8006d6e:	2b03      	cmp	r3, #3
 8006d70:	d00b      	beq.n	8006d8a <USBD_GetConfig+0x4a>
 8006d72:	e012      	b.n	8006d9a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2200      	movs	r2, #0
 8006d78:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	3308      	adds	r3, #8
 8006d7e:	2201      	movs	r2, #1
 8006d80:	4619      	mov	r1, r3
 8006d82:	6878      	ldr	r0, [r7, #4]
 8006d84:	f000 f948 	bl	8007018 <USBD_CtlSendData>
        break;
 8006d88:	e00c      	b.n	8006da4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	3304      	adds	r3, #4
 8006d8e:	2201      	movs	r2, #1
 8006d90:	4619      	mov	r1, r3
 8006d92:	6878      	ldr	r0, [r7, #4]
 8006d94:	f000 f940 	bl	8007018 <USBD_CtlSendData>
        break;
 8006d98:	e004      	b.n	8006da4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8006d9a:	6839      	ldr	r1, [r7, #0]
 8006d9c:	6878      	ldr	r0, [r7, #4]
 8006d9e:	f000 f8be 	bl	8006f1e <USBD_CtlError>
        break;
 8006da2:	bf00      	nop
}
 8006da4:	bf00      	nop
 8006da6:	3708      	adds	r7, #8
 8006da8:	46bd      	mov	sp, r7
 8006daa:	bd80      	pop	{r7, pc}

08006dac <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006dac:	b580      	push	{r7, lr}
 8006dae:	b082      	sub	sp, #8
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
 8006db4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006dbc:	b2db      	uxtb	r3, r3
 8006dbe:	3b01      	subs	r3, #1
 8006dc0:	2b02      	cmp	r3, #2
 8006dc2:	d81e      	bhi.n	8006e02 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006dc4:	683b      	ldr	r3, [r7, #0]
 8006dc6:	88db      	ldrh	r3, [r3, #6]
 8006dc8:	2b02      	cmp	r3, #2
 8006dca:	d004      	beq.n	8006dd6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006dcc:	6839      	ldr	r1, [r7, #0]
 8006dce:	6878      	ldr	r0, [r7, #4]
 8006dd0:	f000 f8a5 	bl	8006f1e <USBD_CtlError>
        break;
 8006dd4:	e01a      	b.n	8006e0c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	2201      	movs	r2, #1
 8006dda:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d005      	beq.n	8006df2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	68db      	ldr	r3, [r3, #12]
 8006dea:	f043 0202 	orr.w	r2, r3, #2
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	330c      	adds	r3, #12
 8006df6:	2202      	movs	r2, #2
 8006df8:	4619      	mov	r1, r3
 8006dfa:	6878      	ldr	r0, [r7, #4]
 8006dfc:	f000 f90c 	bl	8007018 <USBD_CtlSendData>
      break;
 8006e00:	e004      	b.n	8006e0c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8006e02:	6839      	ldr	r1, [r7, #0]
 8006e04:	6878      	ldr	r0, [r7, #4]
 8006e06:	f000 f88a 	bl	8006f1e <USBD_CtlError>
      break;
 8006e0a:	bf00      	nop
  }
}
 8006e0c:	bf00      	nop
 8006e0e:	3708      	adds	r7, #8
 8006e10:	46bd      	mov	sp, r7
 8006e12:	bd80      	pop	{r7, pc}

08006e14 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006e14:	b580      	push	{r7, lr}
 8006e16:	b082      	sub	sp, #8
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]
 8006e1c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006e1e:	683b      	ldr	r3, [r7, #0]
 8006e20:	885b      	ldrh	r3, [r3, #2]
 8006e22:	2b01      	cmp	r3, #1
 8006e24:	d107      	bne.n	8006e36 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	2201      	movs	r2, #1
 8006e2a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006e2e:	6878      	ldr	r0, [r7, #4]
 8006e30:	f000 f94c 	bl	80070cc <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8006e34:	e013      	b.n	8006e5e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8006e36:	683b      	ldr	r3, [r7, #0]
 8006e38:	885b      	ldrh	r3, [r3, #2]
 8006e3a:	2b02      	cmp	r3, #2
 8006e3c:	d10b      	bne.n	8006e56 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8006e3e:	683b      	ldr	r3, [r7, #0]
 8006e40:	889b      	ldrh	r3, [r3, #4]
 8006e42:	0a1b      	lsrs	r3, r3, #8
 8006e44:	b29b      	uxth	r3, r3
 8006e46:	b2da      	uxtb	r2, r3
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8006e4e:	6878      	ldr	r0, [r7, #4]
 8006e50:	f000 f93c 	bl	80070cc <USBD_CtlSendStatus>
}
 8006e54:	e003      	b.n	8006e5e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8006e56:	6839      	ldr	r1, [r7, #0]
 8006e58:	6878      	ldr	r0, [r7, #4]
 8006e5a:	f000 f860 	bl	8006f1e <USBD_CtlError>
}
 8006e5e:	bf00      	nop
 8006e60:	3708      	adds	r7, #8
 8006e62:	46bd      	mov	sp, r7
 8006e64:	bd80      	pop	{r7, pc}

08006e66 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006e66:	b580      	push	{r7, lr}
 8006e68:	b082      	sub	sp, #8
 8006e6a:	af00      	add	r7, sp, #0
 8006e6c:	6078      	str	r0, [r7, #4]
 8006e6e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006e76:	b2db      	uxtb	r3, r3
 8006e78:	3b01      	subs	r3, #1
 8006e7a:	2b02      	cmp	r3, #2
 8006e7c:	d80b      	bhi.n	8006e96 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006e7e:	683b      	ldr	r3, [r7, #0]
 8006e80:	885b      	ldrh	r3, [r3, #2]
 8006e82:	2b01      	cmp	r3, #1
 8006e84:	d10c      	bne.n	8006ea0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	2200      	movs	r2, #0
 8006e8a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006e8e:	6878      	ldr	r0, [r7, #4]
 8006e90:	f000 f91c 	bl	80070cc <USBD_CtlSendStatus>
      }
      break;
 8006e94:	e004      	b.n	8006ea0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8006e96:	6839      	ldr	r1, [r7, #0]
 8006e98:	6878      	ldr	r0, [r7, #4]
 8006e9a:	f000 f840 	bl	8006f1e <USBD_CtlError>
      break;
 8006e9e:	e000      	b.n	8006ea2 <USBD_ClrFeature+0x3c>
      break;
 8006ea0:	bf00      	nop
  }
}
 8006ea2:	bf00      	nop
 8006ea4:	3708      	adds	r7, #8
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	bd80      	pop	{r7, pc}

08006eaa <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006eaa:	b580      	push	{r7, lr}
 8006eac:	b084      	sub	sp, #16
 8006eae:	af00      	add	r7, sp, #0
 8006eb0:	6078      	str	r0, [r7, #4]
 8006eb2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006eb4:	683b      	ldr	r3, [r7, #0]
 8006eb6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	781a      	ldrb	r2, [r3, #0]
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	3301      	adds	r3, #1
 8006ec4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	781a      	ldrb	r2, [r3, #0]
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	3301      	adds	r3, #1
 8006ed2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006ed4:	68f8      	ldr	r0, [r7, #12]
 8006ed6:	f7ff fa40 	bl	800635a <SWAPBYTE>
 8006eda:	4603      	mov	r3, r0
 8006edc:	461a      	mov	r2, r3
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	3301      	adds	r3, #1
 8006ee6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	3301      	adds	r3, #1
 8006eec:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006eee:	68f8      	ldr	r0, [r7, #12]
 8006ef0:	f7ff fa33 	bl	800635a <SWAPBYTE>
 8006ef4:	4603      	mov	r3, r0
 8006ef6:	461a      	mov	r2, r3
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	3301      	adds	r3, #1
 8006f00:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	3301      	adds	r3, #1
 8006f06:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006f08:	68f8      	ldr	r0, [r7, #12]
 8006f0a:	f7ff fa26 	bl	800635a <SWAPBYTE>
 8006f0e:	4603      	mov	r3, r0
 8006f10:	461a      	mov	r2, r3
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	80da      	strh	r2, [r3, #6]
}
 8006f16:	bf00      	nop
 8006f18:	3710      	adds	r7, #16
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	bd80      	pop	{r7, pc}

08006f1e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006f1e:	b580      	push	{r7, lr}
 8006f20:	b082      	sub	sp, #8
 8006f22:	af00      	add	r7, sp, #0
 8006f24:	6078      	str	r0, [r7, #4]
 8006f26:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006f28:	2180      	movs	r1, #128	@ 0x80
 8006f2a:	6878      	ldr	r0, [r7, #4]
 8006f2c:	f000 fd10 	bl	8007950 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006f30:	2100      	movs	r1, #0
 8006f32:	6878      	ldr	r0, [r7, #4]
 8006f34:	f000 fd0c 	bl	8007950 <USBD_LL_StallEP>
}
 8006f38:	bf00      	nop
 8006f3a:	3708      	adds	r7, #8
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	bd80      	pop	{r7, pc}

08006f40 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006f40:	b580      	push	{r7, lr}
 8006f42:	b086      	sub	sp, #24
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	60f8      	str	r0, [r7, #12]
 8006f48:	60b9      	str	r1, [r7, #8]
 8006f4a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006f4c:	2300      	movs	r3, #0
 8006f4e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d042      	beq.n	8006fdc <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8006f5a:	6938      	ldr	r0, [r7, #16]
 8006f5c:	f000 f842 	bl	8006fe4 <USBD_GetLen>
 8006f60:	4603      	mov	r3, r0
 8006f62:	3301      	adds	r3, #1
 8006f64:	005b      	lsls	r3, r3, #1
 8006f66:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006f6a:	d808      	bhi.n	8006f7e <USBD_GetString+0x3e>
 8006f6c:	6938      	ldr	r0, [r7, #16]
 8006f6e:	f000 f839 	bl	8006fe4 <USBD_GetLen>
 8006f72:	4603      	mov	r3, r0
 8006f74:	3301      	adds	r3, #1
 8006f76:	b29b      	uxth	r3, r3
 8006f78:	005b      	lsls	r3, r3, #1
 8006f7a:	b29a      	uxth	r2, r3
 8006f7c:	e001      	b.n	8006f82 <USBD_GetString+0x42>
 8006f7e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006f86:	7dfb      	ldrb	r3, [r7, #23]
 8006f88:	68ba      	ldr	r2, [r7, #8]
 8006f8a:	4413      	add	r3, r2
 8006f8c:	687a      	ldr	r2, [r7, #4]
 8006f8e:	7812      	ldrb	r2, [r2, #0]
 8006f90:	701a      	strb	r2, [r3, #0]
  idx++;
 8006f92:	7dfb      	ldrb	r3, [r7, #23]
 8006f94:	3301      	adds	r3, #1
 8006f96:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006f98:	7dfb      	ldrb	r3, [r7, #23]
 8006f9a:	68ba      	ldr	r2, [r7, #8]
 8006f9c:	4413      	add	r3, r2
 8006f9e:	2203      	movs	r2, #3
 8006fa0:	701a      	strb	r2, [r3, #0]
  idx++;
 8006fa2:	7dfb      	ldrb	r3, [r7, #23]
 8006fa4:	3301      	adds	r3, #1
 8006fa6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006fa8:	e013      	b.n	8006fd2 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8006faa:	7dfb      	ldrb	r3, [r7, #23]
 8006fac:	68ba      	ldr	r2, [r7, #8]
 8006fae:	4413      	add	r3, r2
 8006fb0:	693a      	ldr	r2, [r7, #16]
 8006fb2:	7812      	ldrb	r2, [r2, #0]
 8006fb4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8006fb6:	693b      	ldr	r3, [r7, #16]
 8006fb8:	3301      	adds	r3, #1
 8006fba:	613b      	str	r3, [r7, #16]
    idx++;
 8006fbc:	7dfb      	ldrb	r3, [r7, #23]
 8006fbe:	3301      	adds	r3, #1
 8006fc0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8006fc2:	7dfb      	ldrb	r3, [r7, #23]
 8006fc4:	68ba      	ldr	r2, [r7, #8]
 8006fc6:	4413      	add	r3, r2
 8006fc8:	2200      	movs	r2, #0
 8006fca:	701a      	strb	r2, [r3, #0]
    idx++;
 8006fcc:	7dfb      	ldrb	r3, [r7, #23]
 8006fce:	3301      	adds	r3, #1
 8006fd0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8006fd2:	693b      	ldr	r3, [r7, #16]
 8006fd4:	781b      	ldrb	r3, [r3, #0]
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d1e7      	bne.n	8006faa <USBD_GetString+0x6a>
 8006fda:	e000      	b.n	8006fde <USBD_GetString+0x9e>
    return;
 8006fdc:	bf00      	nop
  }
}
 8006fde:	3718      	adds	r7, #24
 8006fe0:	46bd      	mov	sp, r7
 8006fe2:	bd80      	pop	{r7, pc}

08006fe4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006fe4:	b480      	push	{r7}
 8006fe6:	b085      	sub	sp, #20
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006fec:	2300      	movs	r3, #0
 8006fee:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8006ff4:	e005      	b.n	8007002 <USBD_GetLen+0x1e>
  {
    len++;
 8006ff6:	7bfb      	ldrb	r3, [r7, #15]
 8006ff8:	3301      	adds	r3, #1
 8006ffa:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8006ffc:	68bb      	ldr	r3, [r7, #8]
 8006ffe:	3301      	adds	r3, #1
 8007000:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007002:	68bb      	ldr	r3, [r7, #8]
 8007004:	781b      	ldrb	r3, [r3, #0]
 8007006:	2b00      	cmp	r3, #0
 8007008:	d1f5      	bne.n	8006ff6 <USBD_GetLen+0x12>
  }

  return len;
 800700a:	7bfb      	ldrb	r3, [r7, #15]
}
 800700c:	4618      	mov	r0, r3
 800700e:	3714      	adds	r7, #20
 8007010:	46bd      	mov	sp, r7
 8007012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007016:	4770      	bx	lr

08007018 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007018:	b580      	push	{r7, lr}
 800701a:	b084      	sub	sp, #16
 800701c:	af00      	add	r7, sp, #0
 800701e:	60f8      	str	r0, [r7, #12]
 8007020:	60b9      	str	r1, [r7, #8]
 8007022:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	2202      	movs	r2, #2
 8007028:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	687a      	ldr	r2, [r7, #4]
 8007030:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	687a      	ldr	r2, [r7, #4]
 8007036:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	68ba      	ldr	r2, [r7, #8]
 800703c:	2100      	movs	r1, #0
 800703e:	68f8      	ldr	r0, [r7, #12]
 8007040:	f000 fd0f 	bl	8007a62 <USBD_LL_Transmit>

  return USBD_OK;
 8007044:	2300      	movs	r3, #0
}
 8007046:	4618      	mov	r0, r3
 8007048:	3710      	adds	r7, #16
 800704a:	46bd      	mov	sp, r7
 800704c:	bd80      	pop	{r7, pc}

0800704e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800704e:	b580      	push	{r7, lr}
 8007050:	b084      	sub	sp, #16
 8007052:	af00      	add	r7, sp, #0
 8007054:	60f8      	str	r0, [r7, #12]
 8007056:	60b9      	str	r1, [r7, #8]
 8007058:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	68ba      	ldr	r2, [r7, #8]
 800705e:	2100      	movs	r1, #0
 8007060:	68f8      	ldr	r0, [r7, #12]
 8007062:	f000 fcfe 	bl	8007a62 <USBD_LL_Transmit>

  return USBD_OK;
 8007066:	2300      	movs	r3, #0
}
 8007068:	4618      	mov	r0, r3
 800706a:	3710      	adds	r7, #16
 800706c:	46bd      	mov	sp, r7
 800706e:	bd80      	pop	{r7, pc}

08007070 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007070:	b580      	push	{r7, lr}
 8007072:	b084      	sub	sp, #16
 8007074:	af00      	add	r7, sp, #0
 8007076:	60f8      	str	r0, [r7, #12]
 8007078:	60b9      	str	r1, [r7, #8]
 800707a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	2203      	movs	r2, #3
 8007080:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	687a      	ldr	r2, [r7, #4]
 8007088:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	687a      	ldr	r2, [r7, #4]
 8007090:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	68ba      	ldr	r2, [r7, #8]
 8007098:	2100      	movs	r1, #0
 800709a:	68f8      	ldr	r0, [r7, #12]
 800709c:	f000 fd02 	bl	8007aa4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80070a0:	2300      	movs	r3, #0
}
 80070a2:	4618      	mov	r0, r3
 80070a4:	3710      	adds	r7, #16
 80070a6:	46bd      	mov	sp, r7
 80070a8:	bd80      	pop	{r7, pc}

080070aa <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80070aa:	b580      	push	{r7, lr}
 80070ac:	b084      	sub	sp, #16
 80070ae:	af00      	add	r7, sp, #0
 80070b0:	60f8      	str	r0, [r7, #12]
 80070b2:	60b9      	str	r1, [r7, #8]
 80070b4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	68ba      	ldr	r2, [r7, #8]
 80070ba:	2100      	movs	r1, #0
 80070bc:	68f8      	ldr	r0, [r7, #12]
 80070be:	f000 fcf1 	bl	8007aa4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80070c2:	2300      	movs	r3, #0
}
 80070c4:	4618      	mov	r0, r3
 80070c6:	3710      	adds	r7, #16
 80070c8:	46bd      	mov	sp, r7
 80070ca:	bd80      	pop	{r7, pc}

080070cc <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80070cc:	b580      	push	{r7, lr}
 80070ce:	b082      	sub	sp, #8
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2204      	movs	r2, #4
 80070d8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80070dc:	2300      	movs	r3, #0
 80070de:	2200      	movs	r2, #0
 80070e0:	2100      	movs	r1, #0
 80070e2:	6878      	ldr	r0, [r7, #4]
 80070e4:	f000 fcbd 	bl	8007a62 <USBD_LL_Transmit>

  return USBD_OK;
 80070e8:	2300      	movs	r3, #0
}
 80070ea:	4618      	mov	r0, r3
 80070ec:	3708      	adds	r7, #8
 80070ee:	46bd      	mov	sp, r7
 80070f0:	bd80      	pop	{r7, pc}

080070f2 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80070f2:	b580      	push	{r7, lr}
 80070f4:	b082      	sub	sp, #8
 80070f6:	af00      	add	r7, sp, #0
 80070f8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	2205      	movs	r2, #5
 80070fe:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007102:	2300      	movs	r3, #0
 8007104:	2200      	movs	r2, #0
 8007106:	2100      	movs	r1, #0
 8007108:	6878      	ldr	r0, [r7, #4]
 800710a:	f000 fccb 	bl	8007aa4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800710e:	2300      	movs	r3, #0
}
 8007110:	4618      	mov	r0, r3
 8007112:	3708      	adds	r7, #8
 8007114:	46bd      	mov	sp, r7
 8007116:	bd80      	pop	{r7, pc}

08007118 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007118:	b580      	push	{r7, lr}
 800711a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800711c:	2200      	movs	r2, #0
 800711e:	4912      	ldr	r1, [pc, #72]	@ (8007168 <MX_USB_DEVICE_Init+0x50>)
 8007120:	4812      	ldr	r0, [pc, #72]	@ (800716c <MX_USB_DEVICE_Init+0x54>)
 8007122:	f7fe fcf7 	bl	8005b14 <USBD_Init>
 8007126:	4603      	mov	r3, r0
 8007128:	2b00      	cmp	r3, #0
 800712a:	d001      	beq.n	8007130 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800712c:	f7f9 fc60 	bl	80009f0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007130:	490f      	ldr	r1, [pc, #60]	@ (8007170 <MX_USB_DEVICE_Init+0x58>)
 8007132:	480e      	ldr	r0, [pc, #56]	@ (800716c <MX_USB_DEVICE_Init+0x54>)
 8007134:	f7fe fd1e 	bl	8005b74 <USBD_RegisterClass>
 8007138:	4603      	mov	r3, r0
 800713a:	2b00      	cmp	r3, #0
 800713c:	d001      	beq.n	8007142 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800713e:	f7f9 fc57 	bl	80009f0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007142:	490c      	ldr	r1, [pc, #48]	@ (8007174 <MX_USB_DEVICE_Init+0x5c>)
 8007144:	4809      	ldr	r0, [pc, #36]	@ (800716c <MX_USB_DEVICE_Init+0x54>)
 8007146:	f7fe fc15 	bl	8005974 <USBD_CDC_RegisterInterface>
 800714a:	4603      	mov	r3, r0
 800714c:	2b00      	cmp	r3, #0
 800714e:	d001      	beq.n	8007154 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007150:	f7f9 fc4e 	bl	80009f0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007154:	4805      	ldr	r0, [pc, #20]	@ (800716c <MX_USB_DEVICE_Init+0x54>)
 8007156:	f7fe fd43 	bl	8005be0 <USBD_Start>
 800715a:	4603      	mov	r3, r0
 800715c:	2b00      	cmp	r3, #0
 800715e:	d001      	beq.n	8007164 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007160:	f7f9 fc46 	bl	80009f0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007164:	bf00      	nop
 8007166:	bd80      	pop	{r7, pc}
 8007168:	200000cc 	.word	0x200000cc
 800716c:	200001d0 	.word	0x200001d0
 8007170:	20000038 	.word	0x20000038
 8007174:	200000b8 	.word	0x200000b8

08007178 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007178:	b580      	push	{r7, lr}
 800717a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800717c:	2200      	movs	r2, #0
 800717e:	4905      	ldr	r1, [pc, #20]	@ (8007194 <CDC_Init_FS+0x1c>)
 8007180:	4805      	ldr	r0, [pc, #20]	@ (8007198 <CDC_Init_FS+0x20>)
 8007182:	f7fe fc11 	bl	80059a8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007186:	4905      	ldr	r1, [pc, #20]	@ (800719c <CDC_Init_FS+0x24>)
 8007188:	4803      	ldr	r0, [pc, #12]	@ (8007198 <CDC_Init_FS+0x20>)
 800718a:	f7fe fc2f 	bl	80059ec <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800718e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007190:	4618      	mov	r0, r3
 8007192:	bd80      	pop	{r7, pc}
 8007194:	20000cac 	.word	0x20000cac
 8007198:	200001d0 	.word	0x200001d0
 800719c:	200004ac 	.word	0x200004ac

080071a0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80071a0:	b480      	push	{r7}
 80071a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80071a4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80071a6:	4618      	mov	r0, r3
 80071a8:	46bd      	mov	sp, r7
 80071aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ae:	4770      	bx	lr

080071b0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80071b0:	b480      	push	{r7}
 80071b2:	b083      	sub	sp, #12
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	4603      	mov	r3, r0
 80071b8:	6039      	str	r1, [r7, #0]
 80071ba:	71fb      	strb	r3, [r7, #7]
 80071bc:	4613      	mov	r3, r2
 80071be:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80071c0:	79fb      	ldrb	r3, [r7, #7]
 80071c2:	2b23      	cmp	r3, #35	@ 0x23
 80071c4:	d84a      	bhi.n	800725c <CDC_Control_FS+0xac>
 80071c6:	a201      	add	r2, pc, #4	@ (adr r2, 80071cc <CDC_Control_FS+0x1c>)
 80071c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071cc:	0800725d 	.word	0x0800725d
 80071d0:	0800725d 	.word	0x0800725d
 80071d4:	0800725d 	.word	0x0800725d
 80071d8:	0800725d 	.word	0x0800725d
 80071dc:	0800725d 	.word	0x0800725d
 80071e0:	0800725d 	.word	0x0800725d
 80071e4:	0800725d 	.word	0x0800725d
 80071e8:	0800725d 	.word	0x0800725d
 80071ec:	0800725d 	.word	0x0800725d
 80071f0:	0800725d 	.word	0x0800725d
 80071f4:	0800725d 	.word	0x0800725d
 80071f8:	0800725d 	.word	0x0800725d
 80071fc:	0800725d 	.word	0x0800725d
 8007200:	0800725d 	.word	0x0800725d
 8007204:	0800725d 	.word	0x0800725d
 8007208:	0800725d 	.word	0x0800725d
 800720c:	0800725d 	.word	0x0800725d
 8007210:	0800725d 	.word	0x0800725d
 8007214:	0800725d 	.word	0x0800725d
 8007218:	0800725d 	.word	0x0800725d
 800721c:	0800725d 	.word	0x0800725d
 8007220:	0800725d 	.word	0x0800725d
 8007224:	0800725d 	.word	0x0800725d
 8007228:	0800725d 	.word	0x0800725d
 800722c:	0800725d 	.word	0x0800725d
 8007230:	0800725d 	.word	0x0800725d
 8007234:	0800725d 	.word	0x0800725d
 8007238:	0800725d 	.word	0x0800725d
 800723c:	0800725d 	.word	0x0800725d
 8007240:	0800725d 	.word	0x0800725d
 8007244:	0800725d 	.word	0x0800725d
 8007248:	0800725d 	.word	0x0800725d
 800724c:	0800725d 	.word	0x0800725d
 8007250:	0800725d 	.word	0x0800725d
 8007254:	0800725d 	.word	0x0800725d
 8007258:	0800725d 	.word	0x0800725d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800725c:	bf00      	nop
  }

  return (USBD_OK);
 800725e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007260:	4618      	mov	r0, r3
 8007262:	370c      	adds	r7, #12
 8007264:	46bd      	mov	sp, r7
 8007266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726a:	4770      	bx	lr

0800726c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800726c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007270:	b091      	sub	sp, #68	@ 0x44
 8007272:	af0e      	add	r7, sp, #56	@ 0x38
 8007274:	6078      	str	r0, [r7, #4]
 8007276:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007278:	6879      	ldr	r1, [r7, #4]
 800727a:	4816      	ldr	r0, [pc, #88]	@ (80072d4 <CDC_Receive_FS+0x68>)
 800727c:	f7fe fbb6 	bl	80059ec <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007280:	4814      	ldr	r0, [pc, #80]	@ (80072d4 <CDC_Receive_FS+0x68>)
 8007282:	f7fe fc11 	bl	8005aa8 <USBD_CDC_ReceivePacket>
  put_task_to_queue(&usb_queue, *(struct task_struct *)Buf);
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681a      	ldr	r2, [r3, #0]
 800728a:	4691      	mov	r9, r2
 800728c:	685a      	ldr	r2, [r3, #4]
 800728e:	4690      	mov	r8, r2
 8007290:	689a      	ldr	r2, [r3, #8]
 8007292:	4696      	mov	lr, r2
 8007294:	f103 040c 	add.w	r4, r3, #12
 8007298:	466e      	mov	r6, sp
 800729a:	f104 0c30 	add.w	ip, r4, #48	@ 0x30
 800729e:	4635      	mov	r5, r6
 80072a0:	4623      	mov	r3, r4
 80072a2:	6818      	ldr	r0, [r3, #0]
 80072a4:	6859      	ldr	r1, [r3, #4]
 80072a6:	689a      	ldr	r2, [r3, #8]
 80072a8:	68db      	ldr	r3, [r3, #12]
 80072aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80072ac:	3410      	adds	r4, #16
 80072ae:	3610      	adds	r6, #16
 80072b0:	4564      	cmp	r4, ip
 80072b2:	d1f4      	bne.n	800729e <CDC_Receive_FS+0x32>
 80072b4:	4633      	mov	r3, r6
 80072b6:	4622      	mov	r2, r4
 80072b8:	6810      	ldr	r0, [r2, #0]
 80072ba:	6018      	str	r0, [r3, #0]
 80072bc:	4649      	mov	r1, r9
 80072be:	4642      	mov	r2, r8
 80072c0:	4673      	mov	r3, lr
 80072c2:	4805      	ldr	r0, [pc, #20]	@ (80072d8 <CDC_Receive_FS+0x6c>)
 80072c4:	f7f9 fc5e 	bl	8000b84 <put_task_to_queue>
  return (USBD_OK);
 80072c8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80072ca:	4618      	mov	r0, r3
 80072cc:	370c      	adds	r7, #12
 80072ce:	46bd      	mov	sp, r7
 80072d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80072d4:	200001d0 	.word	0x200001d0
 80072d8:	20000190 	.word	0x20000190

080072dc <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80072dc:	b580      	push	{r7, lr}
 80072de:	b084      	sub	sp, #16
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	6078      	str	r0, [r7, #4]
 80072e4:	460b      	mov	r3, r1
 80072e6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80072e8:	2300      	movs	r3, #0
 80072ea:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80072ec:	4b0d      	ldr	r3, [pc, #52]	@ (8007324 <CDC_Transmit_FS+0x48>)
 80072ee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80072f2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80072f4:	68bb      	ldr	r3, [r7, #8]
 80072f6:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d001      	beq.n	8007302 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80072fe:	2301      	movs	r3, #1
 8007300:	e00b      	b.n	800731a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8007302:	887b      	ldrh	r3, [r7, #2]
 8007304:	461a      	mov	r2, r3
 8007306:	6879      	ldr	r1, [r7, #4]
 8007308:	4806      	ldr	r0, [pc, #24]	@ (8007324 <CDC_Transmit_FS+0x48>)
 800730a:	f7fe fb4d 	bl	80059a8 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800730e:	4805      	ldr	r0, [pc, #20]	@ (8007324 <CDC_Transmit_FS+0x48>)
 8007310:	f7fe fb8a 	bl	8005a28 <USBD_CDC_TransmitPacket>
 8007314:	4603      	mov	r3, r0
 8007316:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8007318:	7bfb      	ldrb	r3, [r7, #15]
}
 800731a:	4618      	mov	r0, r3
 800731c:	3710      	adds	r7, #16
 800731e:	46bd      	mov	sp, r7
 8007320:	bd80      	pop	{r7, pc}
 8007322:	bf00      	nop
 8007324:	200001d0 	.word	0x200001d0

08007328 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8007328:	b480      	push	{r7}
 800732a:	b087      	sub	sp, #28
 800732c:	af00      	add	r7, sp, #0
 800732e:	60f8      	str	r0, [r7, #12]
 8007330:	60b9      	str	r1, [r7, #8]
 8007332:	4613      	mov	r3, r2
 8007334:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8007336:	2300      	movs	r3, #0
 8007338:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800733a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800733e:	4618      	mov	r0, r3
 8007340:	371c      	adds	r7, #28
 8007342:	46bd      	mov	sp, r7
 8007344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007348:	4770      	bx	lr
	...

0800734c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800734c:	b480      	push	{r7}
 800734e:	b083      	sub	sp, #12
 8007350:	af00      	add	r7, sp, #0
 8007352:	4603      	mov	r3, r0
 8007354:	6039      	str	r1, [r7, #0]
 8007356:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007358:	683b      	ldr	r3, [r7, #0]
 800735a:	2212      	movs	r2, #18
 800735c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800735e:	4b03      	ldr	r3, [pc, #12]	@ (800736c <USBD_FS_DeviceDescriptor+0x20>)
}
 8007360:	4618      	mov	r0, r3
 8007362:	370c      	adds	r7, #12
 8007364:	46bd      	mov	sp, r7
 8007366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736a:	4770      	bx	lr
 800736c:	200000e8 	.word	0x200000e8

08007370 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007370:	b480      	push	{r7}
 8007372:	b083      	sub	sp, #12
 8007374:	af00      	add	r7, sp, #0
 8007376:	4603      	mov	r3, r0
 8007378:	6039      	str	r1, [r7, #0]
 800737a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800737c:	683b      	ldr	r3, [r7, #0]
 800737e:	2204      	movs	r2, #4
 8007380:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007382:	4b03      	ldr	r3, [pc, #12]	@ (8007390 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007384:	4618      	mov	r0, r3
 8007386:	370c      	adds	r7, #12
 8007388:	46bd      	mov	sp, r7
 800738a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738e:	4770      	bx	lr
 8007390:	200000fc 	.word	0x200000fc

08007394 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007394:	b580      	push	{r7, lr}
 8007396:	b082      	sub	sp, #8
 8007398:	af00      	add	r7, sp, #0
 800739a:	4603      	mov	r3, r0
 800739c:	6039      	str	r1, [r7, #0]
 800739e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80073a0:	79fb      	ldrb	r3, [r7, #7]
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d105      	bne.n	80073b2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80073a6:	683a      	ldr	r2, [r7, #0]
 80073a8:	4907      	ldr	r1, [pc, #28]	@ (80073c8 <USBD_FS_ProductStrDescriptor+0x34>)
 80073aa:	4808      	ldr	r0, [pc, #32]	@ (80073cc <USBD_FS_ProductStrDescriptor+0x38>)
 80073ac:	f7ff fdc8 	bl	8006f40 <USBD_GetString>
 80073b0:	e004      	b.n	80073bc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80073b2:	683a      	ldr	r2, [r7, #0]
 80073b4:	4904      	ldr	r1, [pc, #16]	@ (80073c8 <USBD_FS_ProductStrDescriptor+0x34>)
 80073b6:	4805      	ldr	r0, [pc, #20]	@ (80073cc <USBD_FS_ProductStrDescriptor+0x38>)
 80073b8:	f7ff fdc2 	bl	8006f40 <USBD_GetString>
  }
  return USBD_StrDesc;
 80073bc:	4b02      	ldr	r3, [pc, #8]	@ (80073c8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80073be:	4618      	mov	r0, r3
 80073c0:	3708      	adds	r7, #8
 80073c2:	46bd      	mov	sp, r7
 80073c4:	bd80      	pop	{r7, pc}
 80073c6:	bf00      	nop
 80073c8:	200014ac 	.word	0x200014ac
 80073cc:	08007dc8 	.word	0x08007dc8

080073d0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80073d0:	b580      	push	{r7, lr}
 80073d2:	b082      	sub	sp, #8
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	4603      	mov	r3, r0
 80073d8:	6039      	str	r1, [r7, #0]
 80073da:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80073dc:	683a      	ldr	r2, [r7, #0]
 80073de:	4904      	ldr	r1, [pc, #16]	@ (80073f0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80073e0:	4804      	ldr	r0, [pc, #16]	@ (80073f4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80073e2:	f7ff fdad 	bl	8006f40 <USBD_GetString>
  return USBD_StrDesc;
 80073e6:	4b02      	ldr	r3, [pc, #8]	@ (80073f0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80073e8:	4618      	mov	r0, r3
 80073ea:	3708      	adds	r7, #8
 80073ec:	46bd      	mov	sp, r7
 80073ee:	bd80      	pop	{r7, pc}
 80073f0:	200014ac 	.word	0x200014ac
 80073f4:	08007dd4 	.word	0x08007dd4

080073f8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80073f8:	b580      	push	{r7, lr}
 80073fa:	b082      	sub	sp, #8
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	4603      	mov	r3, r0
 8007400:	6039      	str	r1, [r7, #0]
 8007402:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007404:	683b      	ldr	r3, [r7, #0]
 8007406:	221a      	movs	r2, #26
 8007408:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800740a:	f000 f843 	bl	8007494 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800740e:	4b02      	ldr	r3, [pc, #8]	@ (8007418 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007410:	4618      	mov	r0, r3
 8007412:	3708      	adds	r7, #8
 8007414:	46bd      	mov	sp, r7
 8007416:	bd80      	pop	{r7, pc}
 8007418:	20000100 	.word	0x20000100

0800741c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800741c:	b580      	push	{r7, lr}
 800741e:	b082      	sub	sp, #8
 8007420:	af00      	add	r7, sp, #0
 8007422:	4603      	mov	r3, r0
 8007424:	6039      	str	r1, [r7, #0]
 8007426:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007428:	79fb      	ldrb	r3, [r7, #7]
 800742a:	2b00      	cmp	r3, #0
 800742c:	d105      	bne.n	800743a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800742e:	683a      	ldr	r2, [r7, #0]
 8007430:	4907      	ldr	r1, [pc, #28]	@ (8007450 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007432:	4808      	ldr	r0, [pc, #32]	@ (8007454 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007434:	f7ff fd84 	bl	8006f40 <USBD_GetString>
 8007438:	e004      	b.n	8007444 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800743a:	683a      	ldr	r2, [r7, #0]
 800743c:	4904      	ldr	r1, [pc, #16]	@ (8007450 <USBD_FS_ConfigStrDescriptor+0x34>)
 800743e:	4805      	ldr	r0, [pc, #20]	@ (8007454 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007440:	f7ff fd7e 	bl	8006f40 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007444:	4b02      	ldr	r3, [pc, #8]	@ (8007450 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007446:	4618      	mov	r0, r3
 8007448:	3708      	adds	r7, #8
 800744a:	46bd      	mov	sp, r7
 800744c:	bd80      	pop	{r7, pc}
 800744e:	bf00      	nop
 8007450:	200014ac 	.word	0x200014ac
 8007454:	08007de0 	.word	0x08007de0

08007458 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007458:	b580      	push	{r7, lr}
 800745a:	b082      	sub	sp, #8
 800745c:	af00      	add	r7, sp, #0
 800745e:	4603      	mov	r3, r0
 8007460:	6039      	str	r1, [r7, #0]
 8007462:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007464:	79fb      	ldrb	r3, [r7, #7]
 8007466:	2b00      	cmp	r3, #0
 8007468:	d105      	bne.n	8007476 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800746a:	683a      	ldr	r2, [r7, #0]
 800746c:	4907      	ldr	r1, [pc, #28]	@ (800748c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800746e:	4808      	ldr	r0, [pc, #32]	@ (8007490 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007470:	f7ff fd66 	bl	8006f40 <USBD_GetString>
 8007474:	e004      	b.n	8007480 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007476:	683a      	ldr	r2, [r7, #0]
 8007478:	4904      	ldr	r1, [pc, #16]	@ (800748c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800747a:	4805      	ldr	r0, [pc, #20]	@ (8007490 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800747c:	f7ff fd60 	bl	8006f40 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007480:	4b02      	ldr	r3, [pc, #8]	@ (800748c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007482:	4618      	mov	r0, r3
 8007484:	3708      	adds	r7, #8
 8007486:	46bd      	mov	sp, r7
 8007488:	bd80      	pop	{r7, pc}
 800748a:	bf00      	nop
 800748c:	200014ac 	.word	0x200014ac
 8007490:	08007df0 	.word	0x08007df0

08007494 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007494:	b580      	push	{r7, lr}
 8007496:	b084      	sub	sp, #16
 8007498:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800749a:	4b0f      	ldr	r3, [pc, #60]	@ (80074d8 <Get_SerialNum+0x44>)
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80074a0:	4b0e      	ldr	r3, [pc, #56]	@ (80074dc <Get_SerialNum+0x48>)
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80074a6:	4b0e      	ldr	r3, [pc, #56]	@ (80074e0 <Get_SerialNum+0x4c>)
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80074ac:	68fa      	ldr	r2, [r7, #12]
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	4413      	add	r3, r2
 80074b2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d009      	beq.n	80074ce <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80074ba:	2208      	movs	r2, #8
 80074bc:	4909      	ldr	r1, [pc, #36]	@ (80074e4 <Get_SerialNum+0x50>)
 80074be:	68f8      	ldr	r0, [r7, #12]
 80074c0:	f000 f814 	bl	80074ec <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80074c4:	2204      	movs	r2, #4
 80074c6:	4908      	ldr	r1, [pc, #32]	@ (80074e8 <Get_SerialNum+0x54>)
 80074c8:	68b8      	ldr	r0, [r7, #8]
 80074ca:	f000 f80f 	bl	80074ec <IntToUnicode>
  }
}
 80074ce:	bf00      	nop
 80074d0:	3710      	adds	r7, #16
 80074d2:	46bd      	mov	sp, r7
 80074d4:	bd80      	pop	{r7, pc}
 80074d6:	bf00      	nop
 80074d8:	1fff7a10 	.word	0x1fff7a10
 80074dc:	1fff7a14 	.word	0x1fff7a14
 80074e0:	1fff7a18 	.word	0x1fff7a18
 80074e4:	20000102 	.word	0x20000102
 80074e8:	20000112 	.word	0x20000112

080074ec <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80074ec:	b480      	push	{r7}
 80074ee:	b087      	sub	sp, #28
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	60f8      	str	r0, [r7, #12]
 80074f4:	60b9      	str	r1, [r7, #8]
 80074f6:	4613      	mov	r3, r2
 80074f8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80074fa:	2300      	movs	r3, #0
 80074fc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80074fe:	2300      	movs	r3, #0
 8007500:	75fb      	strb	r3, [r7, #23]
 8007502:	e027      	b.n	8007554 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	0f1b      	lsrs	r3, r3, #28
 8007508:	2b09      	cmp	r3, #9
 800750a:	d80b      	bhi.n	8007524 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	0f1b      	lsrs	r3, r3, #28
 8007510:	b2da      	uxtb	r2, r3
 8007512:	7dfb      	ldrb	r3, [r7, #23]
 8007514:	005b      	lsls	r3, r3, #1
 8007516:	4619      	mov	r1, r3
 8007518:	68bb      	ldr	r3, [r7, #8]
 800751a:	440b      	add	r3, r1
 800751c:	3230      	adds	r2, #48	@ 0x30
 800751e:	b2d2      	uxtb	r2, r2
 8007520:	701a      	strb	r2, [r3, #0]
 8007522:	e00a      	b.n	800753a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	0f1b      	lsrs	r3, r3, #28
 8007528:	b2da      	uxtb	r2, r3
 800752a:	7dfb      	ldrb	r3, [r7, #23]
 800752c:	005b      	lsls	r3, r3, #1
 800752e:	4619      	mov	r1, r3
 8007530:	68bb      	ldr	r3, [r7, #8]
 8007532:	440b      	add	r3, r1
 8007534:	3237      	adds	r2, #55	@ 0x37
 8007536:	b2d2      	uxtb	r2, r2
 8007538:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	011b      	lsls	r3, r3, #4
 800753e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007540:	7dfb      	ldrb	r3, [r7, #23]
 8007542:	005b      	lsls	r3, r3, #1
 8007544:	3301      	adds	r3, #1
 8007546:	68ba      	ldr	r2, [r7, #8]
 8007548:	4413      	add	r3, r2
 800754a:	2200      	movs	r2, #0
 800754c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800754e:	7dfb      	ldrb	r3, [r7, #23]
 8007550:	3301      	adds	r3, #1
 8007552:	75fb      	strb	r3, [r7, #23]
 8007554:	7dfa      	ldrb	r2, [r7, #23]
 8007556:	79fb      	ldrb	r3, [r7, #7]
 8007558:	429a      	cmp	r2, r3
 800755a:	d3d3      	bcc.n	8007504 <IntToUnicode+0x18>
  }
}
 800755c:	bf00      	nop
 800755e:	bf00      	nop
 8007560:	371c      	adds	r7, #28
 8007562:	46bd      	mov	sp, r7
 8007564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007568:	4770      	bx	lr
	...

0800756c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800756c:	b580      	push	{r7, lr}
 800756e:	b08a      	sub	sp, #40	@ 0x28
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007574:	f107 0314 	add.w	r3, r7, #20
 8007578:	2200      	movs	r2, #0
 800757a:	601a      	str	r2, [r3, #0]
 800757c:	605a      	str	r2, [r3, #4]
 800757e:	609a      	str	r2, [r3, #8]
 8007580:	60da      	str	r2, [r3, #12]
 8007582:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800758c:	d13a      	bne.n	8007604 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800758e:	2300      	movs	r3, #0
 8007590:	613b      	str	r3, [r7, #16]
 8007592:	4b1e      	ldr	r3, [pc, #120]	@ (800760c <HAL_PCD_MspInit+0xa0>)
 8007594:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007596:	4a1d      	ldr	r2, [pc, #116]	@ (800760c <HAL_PCD_MspInit+0xa0>)
 8007598:	f043 0301 	orr.w	r3, r3, #1
 800759c:	6313      	str	r3, [r2, #48]	@ 0x30
 800759e:	4b1b      	ldr	r3, [pc, #108]	@ (800760c <HAL_PCD_MspInit+0xa0>)
 80075a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075a2:	f003 0301 	and.w	r3, r3, #1
 80075a6:	613b      	str	r3, [r7, #16]
 80075a8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80075aa:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80075ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80075b0:	2302      	movs	r3, #2
 80075b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80075b4:	2300      	movs	r3, #0
 80075b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80075b8:	2303      	movs	r3, #3
 80075ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80075bc:	230a      	movs	r3, #10
 80075be:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80075c0:	f107 0314 	add.w	r3, r7, #20
 80075c4:	4619      	mov	r1, r3
 80075c6:	4812      	ldr	r0, [pc, #72]	@ (8007610 <HAL_PCD_MspInit+0xa4>)
 80075c8:	f7fa f92e 	bl	8001828 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80075cc:	4b0f      	ldr	r3, [pc, #60]	@ (800760c <HAL_PCD_MspInit+0xa0>)
 80075ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80075d0:	4a0e      	ldr	r2, [pc, #56]	@ (800760c <HAL_PCD_MspInit+0xa0>)
 80075d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80075d6:	6353      	str	r3, [r2, #52]	@ 0x34
 80075d8:	2300      	movs	r3, #0
 80075da:	60fb      	str	r3, [r7, #12]
 80075dc:	4b0b      	ldr	r3, [pc, #44]	@ (800760c <HAL_PCD_MspInit+0xa0>)
 80075de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80075e0:	4a0a      	ldr	r2, [pc, #40]	@ (800760c <HAL_PCD_MspInit+0xa0>)
 80075e2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80075e6:	6453      	str	r3, [r2, #68]	@ 0x44
 80075e8:	4b08      	ldr	r3, [pc, #32]	@ (800760c <HAL_PCD_MspInit+0xa0>)
 80075ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80075ec:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80075f0:	60fb      	str	r3, [r7, #12]
 80075f2:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80075f4:	2200      	movs	r2, #0
 80075f6:	2100      	movs	r1, #0
 80075f8:	2043      	movs	r0, #67	@ 0x43
 80075fa:	f7f9 fe06 	bl	800120a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80075fe:	2043      	movs	r0, #67	@ 0x43
 8007600:	f7f9 fe1f 	bl	8001242 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007604:	bf00      	nop
 8007606:	3728      	adds	r7, #40	@ 0x28
 8007608:	46bd      	mov	sp, r7
 800760a:	bd80      	pop	{r7, pc}
 800760c:	40023800 	.word	0x40023800
 8007610:	40020000 	.word	0x40020000

08007614 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007614:	b580      	push	{r7, lr}
 8007616:	b082      	sub	sp, #8
 8007618:	af00      	add	r7, sp, #0
 800761a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007628:	4619      	mov	r1, r3
 800762a:	4610      	mov	r0, r2
 800762c:	f7fe fb25 	bl	8005c7a <USBD_LL_SetupStage>
}
 8007630:	bf00      	nop
 8007632:	3708      	adds	r7, #8
 8007634:	46bd      	mov	sp, r7
 8007636:	bd80      	pop	{r7, pc}

08007638 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007638:	b580      	push	{r7, lr}
 800763a:	b082      	sub	sp, #8
 800763c:	af00      	add	r7, sp, #0
 800763e:	6078      	str	r0, [r7, #4]
 8007640:	460b      	mov	r3, r1
 8007642:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800764a:	78fa      	ldrb	r2, [r7, #3]
 800764c:	6879      	ldr	r1, [r7, #4]
 800764e:	4613      	mov	r3, r2
 8007650:	00db      	lsls	r3, r3, #3
 8007652:	4413      	add	r3, r2
 8007654:	009b      	lsls	r3, r3, #2
 8007656:	440b      	add	r3, r1
 8007658:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800765c:	681a      	ldr	r2, [r3, #0]
 800765e:	78fb      	ldrb	r3, [r7, #3]
 8007660:	4619      	mov	r1, r3
 8007662:	f7fe fb5f 	bl	8005d24 <USBD_LL_DataOutStage>
}
 8007666:	bf00      	nop
 8007668:	3708      	adds	r7, #8
 800766a:	46bd      	mov	sp, r7
 800766c:	bd80      	pop	{r7, pc}

0800766e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800766e:	b580      	push	{r7, lr}
 8007670:	b082      	sub	sp, #8
 8007672:	af00      	add	r7, sp, #0
 8007674:	6078      	str	r0, [r7, #4]
 8007676:	460b      	mov	r3, r1
 8007678:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8007680:	78fa      	ldrb	r2, [r7, #3]
 8007682:	6879      	ldr	r1, [r7, #4]
 8007684:	4613      	mov	r3, r2
 8007686:	00db      	lsls	r3, r3, #3
 8007688:	4413      	add	r3, r2
 800768a:	009b      	lsls	r3, r3, #2
 800768c:	440b      	add	r3, r1
 800768e:	3320      	adds	r3, #32
 8007690:	681a      	ldr	r2, [r3, #0]
 8007692:	78fb      	ldrb	r3, [r7, #3]
 8007694:	4619      	mov	r1, r3
 8007696:	f7fe fbf8 	bl	8005e8a <USBD_LL_DataInStage>
}
 800769a:	bf00      	nop
 800769c:	3708      	adds	r7, #8
 800769e:	46bd      	mov	sp, r7
 80076a0:	bd80      	pop	{r7, pc}

080076a2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80076a2:	b580      	push	{r7, lr}
 80076a4:	b082      	sub	sp, #8
 80076a6:	af00      	add	r7, sp, #0
 80076a8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80076b0:	4618      	mov	r0, r3
 80076b2:	f7fe fd32 	bl	800611a <USBD_LL_SOF>
}
 80076b6:	bf00      	nop
 80076b8:	3708      	adds	r7, #8
 80076ba:	46bd      	mov	sp, r7
 80076bc:	bd80      	pop	{r7, pc}

080076be <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80076be:	b580      	push	{r7, lr}
 80076c0:	b084      	sub	sp, #16
 80076c2:	af00      	add	r7, sp, #0
 80076c4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80076c6:	2301      	movs	r3, #1
 80076c8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	79db      	ldrb	r3, [r3, #7]
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d102      	bne.n	80076d8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80076d2:	2300      	movs	r3, #0
 80076d4:	73fb      	strb	r3, [r7, #15]
 80076d6:	e008      	b.n	80076ea <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	79db      	ldrb	r3, [r3, #7]
 80076dc:	2b02      	cmp	r3, #2
 80076de:	d102      	bne.n	80076e6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80076e0:	2301      	movs	r3, #1
 80076e2:	73fb      	strb	r3, [r7, #15]
 80076e4:	e001      	b.n	80076ea <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80076e6:	f7f9 f983 	bl	80009f0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80076f0:	7bfa      	ldrb	r2, [r7, #15]
 80076f2:	4611      	mov	r1, r2
 80076f4:	4618      	mov	r0, r3
 80076f6:	f7fe fccc 	bl	8006092 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007700:	4618      	mov	r0, r3
 8007702:	f7fe fc74 	bl	8005fee <USBD_LL_Reset>
}
 8007706:	bf00      	nop
 8007708:	3710      	adds	r7, #16
 800770a:	46bd      	mov	sp, r7
 800770c:	bd80      	pop	{r7, pc}
	...

08007710 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007710:	b580      	push	{r7, lr}
 8007712:	b082      	sub	sp, #8
 8007714:	af00      	add	r7, sp, #0
 8007716:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800771e:	4618      	mov	r0, r3
 8007720:	f7fe fcc7 	bl	80060b2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	687a      	ldr	r2, [r7, #4]
 8007730:	6812      	ldr	r2, [r2, #0]
 8007732:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007736:	f043 0301 	orr.w	r3, r3, #1
 800773a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	7adb      	ldrb	r3, [r3, #11]
 8007740:	2b00      	cmp	r3, #0
 8007742:	d005      	beq.n	8007750 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007744:	4b04      	ldr	r3, [pc, #16]	@ (8007758 <HAL_PCD_SuspendCallback+0x48>)
 8007746:	691b      	ldr	r3, [r3, #16]
 8007748:	4a03      	ldr	r2, [pc, #12]	@ (8007758 <HAL_PCD_SuspendCallback+0x48>)
 800774a:	f043 0306 	orr.w	r3, r3, #6
 800774e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007750:	bf00      	nop
 8007752:	3708      	adds	r7, #8
 8007754:	46bd      	mov	sp, r7
 8007756:	bd80      	pop	{r7, pc}
 8007758:	e000ed00 	.word	0xe000ed00

0800775c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800775c:	b580      	push	{r7, lr}
 800775e:	b082      	sub	sp, #8
 8007760:	af00      	add	r7, sp, #0
 8007762:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800776a:	4618      	mov	r0, r3
 800776c:	f7fe fcbd 	bl	80060ea <USBD_LL_Resume>
}
 8007770:	bf00      	nop
 8007772:	3708      	adds	r7, #8
 8007774:	46bd      	mov	sp, r7
 8007776:	bd80      	pop	{r7, pc}

08007778 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007778:	b580      	push	{r7, lr}
 800777a:	b082      	sub	sp, #8
 800777c:	af00      	add	r7, sp, #0
 800777e:	6078      	str	r0, [r7, #4]
 8007780:	460b      	mov	r3, r1
 8007782:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800778a:	78fa      	ldrb	r2, [r7, #3]
 800778c:	4611      	mov	r1, r2
 800778e:	4618      	mov	r0, r3
 8007790:	f7fe fd15 	bl	80061be <USBD_LL_IsoOUTIncomplete>
}
 8007794:	bf00      	nop
 8007796:	3708      	adds	r7, #8
 8007798:	46bd      	mov	sp, r7
 800779a:	bd80      	pop	{r7, pc}

0800779c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800779c:	b580      	push	{r7, lr}
 800779e:	b082      	sub	sp, #8
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	6078      	str	r0, [r7, #4]
 80077a4:	460b      	mov	r3, r1
 80077a6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80077ae:	78fa      	ldrb	r2, [r7, #3]
 80077b0:	4611      	mov	r1, r2
 80077b2:	4618      	mov	r0, r3
 80077b4:	f7fe fcd1 	bl	800615a <USBD_LL_IsoINIncomplete>
}
 80077b8:	bf00      	nop
 80077ba:	3708      	adds	r7, #8
 80077bc:	46bd      	mov	sp, r7
 80077be:	bd80      	pop	{r7, pc}

080077c0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80077c0:	b580      	push	{r7, lr}
 80077c2:	b082      	sub	sp, #8
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80077ce:	4618      	mov	r0, r3
 80077d0:	f7fe fd27 	bl	8006222 <USBD_LL_DevConnected>
}
 80077d4:	bf00      	nop
 80077d6:	3708      	adds	r7, #8
 80077d8:	46bd      	mov	sp, r7
 80077da:	bd80      	pop	{r7, pc}

080077dc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80077dc:	b580      	push	{r7, lr}
 80077de:	b082      	sub	sp, #8
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80077ea:	4618      	mov	r0, r3
 80077ec:	f7fe fd24 	bl	8006238 <USBD_LL_DevDisconnected>
}
 80077f0:	bf00      	nop
 80077f2:	3708      	adds	r7, #8
 80077f4:	46bd      	mov	sp, r7
 80077f6:	bd80      	pop	{r7, pc}

080077f8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80077f8:	b580      	push	{r7, lr}
 80077fa:	b082      	sub	sp, #8
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	781b      	ldrb	r3, [r3, #0]
 8007804:	2b00      	cmp	r3, #0
 8007806:	d13c      	bne.n	8007882 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007808:	4a20      	ldr	r2, [pc, #128]	@ (800788c <USBD_LL_Init+0x94>)
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	4a1e      	ldr	r2, [pc, #120]	@ (800788c <USBD_LL_Init+0x94>)
 8007814:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007818:	4b1c      	ldr	r3, [pc, #112]	@ (800788c <USBD_LL_Init+0x94>)
 800781a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800781e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8007820:	4b1a      	ldr	r3, [pc, #104]	@ (800788c <USBD_LL_Init+0x94>)
 8007822:	2204      	movs	r2, #4
 8007824:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007826:	4b19      	ldr	r3, [pc, #100]	@ (800788c <USBD_LL_Init+0x94>)
 8007828:	2202      	movs	r2, #2
 800782a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800782c:	4b17      	ldr	r3, [pc, #92]	@ (800788c <USBD_LL_Init+0x94>)
 800782e:	2200      	movs	r2, #0
 8007830:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007832:	4b16      	ldr	r3, [pc, #88]	@ (800788c <USBD_LL_Init+0x94>)
 8007834:	2202      	movs	r2, #2
 8007836:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007838:	4b14      	ldr	r3, [pc, #80]	@ (800788c <USBD_LL_Init+0x94>)
 800783a:	2200      	movs	r2, #0
 800783c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800783e:	4b13      	ldr	r3, [pc, #76]	@ (800788c <USBD_LL_Init+0x94>)
 8007840:	2200      	movs	r2, #0
 8007842:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007844:	4b11      	ldr	r3, [pc, #68]	@ (800788c <USBD_LL_Init+0x94>)
 8007846:	2200      	movs	r2, #0
 8007848:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800784a:	4b10      	ldr	r3, [pc, #64]	@ (800788c <USBD_LL_Init+0x94>)
 800784c:	2200      	movs	r2, #0
 800784e:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007850:	4b0e      	ldr	r3, [pc, #56]	@ (800788c <USBD_LL_Init+0x94>)
 8007852:	2200      	movs	r2, #0
 8007854:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007856:	480d      	ldr	r0, [pc, #52]	@ (800788c <USBD_LL_Init+0x94>)
 8007858:	f7fa f9b3 	bl	8001bc2 <HAL_PCD_Init>
 800785c:	4603      	mov	r3, r0
 800785e:	2b00      	cmp	r3, #0
 8007860:	d001      	beq.n	8007866 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007862:	f7f9 f8c5 	bl	80009f0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007866:	2180      	movs	r1, #128	@ 0x80
 8007868:	4808      	ldr	r0, [pc, #32]	@ (800788c <USBD_LL_Init+0x94>)
 800786a:	f7fb fbe0 	bl	800302e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800786e:	2240      	movs	r2, #64	@ 0x40
 8007870:	2100      	movs	r1, #0
 8007872:	4806      	ldr	r0, [pc, #24]	@ (800788c <USBD_LL_Init+0x94>)
 8007874:	f7fb fb94 	bl	8002fa0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007878:	2280      	movs	r2, #128	@ 0x80
 800787a:	2101      	movs	r1, #1
 800787c:	4803      	ldr	r0, [pc, #12]	@ (800788c <USBD_LL_Init+0x94>)
 800787e:	f7fb fb8f 	bl	8002fa0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007882:	2300      	movs	r3, #0
}
 8007884:	4618      	mov	r0, r3
 8007886:	3708      	adds	r7, #8
 8007888:	46bd      	mov	sp, r7
 800788a:	bd80      	pop	{r7, pc}
 800788c:	200016ac 	.word	0x200016ac

08007890 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007890:	b580      	push	{r7, lr}
 8007892:	b084      	sub	sp, #16
 8007894:	af00      	add	r7, sp, #0
 8007896:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007898:	2300      	movs	r3, #0
 800789a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800789c:	2300      	movs	r3, #0
 800789e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80078a6:	4618      	mov	r0, r3
 80078a8:	f7fa fa9a 	bl	8001de0 <HAL_PCD_Start>
 80078ac:	4603      	mov	r3, r0
 80078ae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80078b0:	7bfb      	ldrb	r3, [r7, #15]
 80078b2:	4618      	mov	r0, r3
 80078b4:	f000 f942 	bl	8007b3c <USBD_Get_USB_Status>
 80078b8:	4603      	mov	r3, r0
 80078ba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80078bc:	7bbb      	ldrb	r3, [r7, #14]
}
 80078be:	4618      	mov	r0, r3
 80078c0:	3710      	adds	r7, #16
 80078c2:	46bd      	mov	sp, r7
 80078c4:	bd80      	pop	{r7, pc}

080078c6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80078c6:	b580      	push	{r7, lr}
 80078c8:	b084      	sub	sp, #16
 80078ca:	af00      	add	r7, sp, #0
 80078cc:	6078      	str	r0, [r7, #4]
 80078ce:	4608      	mov	r0, r1
 80078d0:	4611      	mov	r1, r2
 80078d2:	461a      	mov	r2, r3
 80078d4:	4603      	mov	r3, r0
 80078d6:	70fb      	strb	r3, [r7, #3]
 80078d8:	460b      	mov	r3, r1
 80078da:	70bb      	strb	r3, [r7, #2]
 80078dc:	4613      	mov	r3, r2
 80078de:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80078e0:	2300      	movs	r3, #0
 80078e2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80078e4:	2300      	movs	r3, #0
 80078e6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80078ee:	78bb      	ldrb	r3, [r7, #2]
 80078f0:	883a      	ldrh	r2, [r7, #0]
 80078f2:	78f9      	ldrb	r1, [r7, #3]
 80078f4:	f7fa ff6e 	bl	80027d4 <HAL_PCD_EP_Open>
 80078f8:	4603      	mov	r3, r0
 80078fa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80078fc:	7bfb      	ldrb	r3, [r7, #15]
 80078fe:	4618      	mov	r0, r3
 8007900:	f000 f91c 	bl	8007b3c <USBD_Get_USB_Status>
 8007904:	4603      	mov	r3, r0
 8007906:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007908:	7bbb      	ldrb	r3, [r7, #14]
}
 800790a:	4618      	mov	r0, r3
 800790c:	3710      	adds	r7, #16
 800790e:	46bd      	mov	sp, r7
 8007910:	bd80      	pop	{r7, pc}

08007912 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007912:	b580      	push	{r7, lr}
 8007914:	b084      	sub	sp, #16
 8007916:	af00      	add	r7, sp, #0
 8007918:	6078      	str	r0, [r7, #4]
 800791a:	460b      	mov	r3, r1
 800791c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800791e:	2300      	movs	r3, #0
 8007920:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007922:	2300      	movs	r3, #0
 8007924:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800792c:	78fa      	ldrb	r2, [r7, #3]
 800792e:	4611      	mov	r1, r2
 8007930:	4618      	mov	r0, r3
 8007932:	f7fa ffb9 	bl	80028a8 <HAL_PCD_EP_Close>
 8007936:	4603      	mov	r3, r0
 8007938:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800793a:	7bfb      	ldrb	r3, [r7, #15]
 800793c:	4618      	mov	r0, r3
 800793e:	f000 f8fd 	bl	8007b3c <USBD_Get_USB_Status>
 8007942:	4603      	mov	r3, r0
 8007944:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007946:	7bbb      	ldrb	r3, [r7, #14]
}
 8007948:	4618      	mov	r0, r3
 800794a:	3710      	adds	r7, #16
 800794c:	46bd      	mov	sp, r7
 800794e:	bd80      	pop	{r7, pc}

08007950 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007950:	b580      	push	{r7, lr}
 8007952:	b084      	sub	sp, #16
 8007954:	af00      	add	r7, sp, #0
 8007956:	6078      	str	r0, [r7, #4]
 8007958:	460b      	mov	r3, r1
 800795a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800795c:	2300      	movs	r3, #0
 800795e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007960:	2300      	movs	r3, #0
 8007962:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800796a:	78fa      	ldrb	r2, [r7, #3]
 800796c:	4611      	mov	r1, r2
 800796e:	4618      	mov	r0, r3
 8007970:	f7fb f871 	bl	8002a56 <HAL_PCD_EP_SetStall>
 8007974:	4603      	mov	r3, r0
 8007976:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007978:	7bfb      	ldrb	r3, [r7, #15]
 800797a:	4618      	mov	r0, r3
 800797c:	f000 f8de 	bl	8007b3c <USBD_Get_USB_Status>
 8007980:	4603      	mov	r3, r0
 8007982:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007984:	7bbb      	ldrb	r3, [r7, #14]
}
 8007986:	4618      	mov	r0, r3
 8007988:	3710      	adds	r7, #16
 800798a:	46bd      	mov	sp, r7
 800798c:	bd80      	pop	{r7, pc}

0800798e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800798e:	b580      	push	{r7, lr}
 8007990:	b084      	sub	sp, #16
 8007992:	af00      	add	r7, sp, #0
 8007994:	6078      	str	r0, [r7, #4]
 8007996:	460b      	mov	r3, r1
 8007998:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800799a:	2300      	movs	r3, #0
 800799c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800799e:	2300      	movs	r3, #0
 80079a0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80079a8:	78fa      	ldrb	r2, [r7, #3]
 80079aa:	4611      	mov	r1, r2
 80079ac:	4618      	mov	r0, r3
 80079ae:	f7fb f8b5 	bl	8002b1c <HAL_PCD_EP_ClrStall>
 80079b2:	4603      	mov	r3, r0
 80079b4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80079b6:	7bfb      	ldrb	r3, [r7, #15]
 80079b8:	4618      	mov	r0, r3
 80079ba:	f000 f8bf 	bl	8007b3c <USBD_Get_USB_Status>
 80079be:	4603      	mov	r3, r0
 80079c0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80079c2:	7bbb      	ldrb	r3, [r7, #14]
}
 80079c4:	4618      	mov	r0, r3
 80079c6:	3710      	adds	r7, #16
 80079c8:	46bd      	mov	sp, r7
 80079ca:	bd80      	pop	{r7, pc}

080079cc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80079cc:	b480      	push	{r7}
 80079ce:	b085      	sub	sp, #20
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	6078      	str	r0, [r7, #4]
 80079d4:	460b      	mov	r3, r1
 80079d6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80079de:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80079e0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	da0b      	bge.n	8007a00 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80079e8:	78fb      	ldrb	r3, [r7, #3]
 80079ea:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80079ee:	68f9      	ldr	r1, [r7, #12]
 80079f0:	4613      	mov	r3, r2
 80079f2:	00db      	lsls	r3, r3, #3
 80079f4:	4413      	add	r3, r2
 80079f6:	009b      	lsls	r3, r3, #2
 80079f8:	440b      	add	r3, r1
 80079fa:	3316      	adds	r3, #22
 80079fc:	781b      	ldrb	r3, [r3, #0]
 80079fe:	e00b      	b.n	8007a18 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007a00:	78fb      	ldrb	r3, [r7, #3]
 8007a02:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007a06:	68f9      	ldr	r1, [r7, #12]
 8007a08:	4613      	mov	r3, r2
 8007a0a:	00db      	lsls	r3, r3, #3
 8007a0c:	4413      	add	r3, r2
 8007a0e:	009b      	lsls	r3, r3, #2
 8007a10:	440b      	add	r3, r1
 8007a12:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8007a16:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007a18:	4618      	mov	r0, r3
 8007a1a:	3714      	adds	r7, #20
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a22:	4770      	bx	lr

08007a24 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007a24:	b580      	push	{r7, lr}
 8007a26:	b084      	sub	sp, #16
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	6078      	str	r0, [r7, #4]
 8007a2c:	460b      	mov	r3, r1
 8007a2e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007a30:	2300      	movs	r3, #0
 8007a32:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007a34:	2300      	movs	r3, #0
 8007a36:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007a3e:	78fa      	ldrb	r2, [r7, #3]
 8007a40:	4611      	mov	r1, r2
 8007a42:	4618      	mov	r0, r3
 8007a44:	f7fa fea2 	bl	800278c <HAL_PCD_SetAddress>
 8007a48:	4603      	mov	r3, r0
 8007a4a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007a4c:	7bfb      	ldrb	r3, [r7, #15]
 8007a4e:	4618      	mov	r0, r3
 8007a50:	f000 f874 	bl	8007b3c <USBD_Get_USB_Status>
 8007a54:	4603      	mov	r3, r0
 8007a56:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007a58:	7bbb      	ldrb	r3, [r7, #14]
}
 8007a5a:	4618      	mov	r0, r3
 8007a5c:	3710      	adds	r7, #16
 8007a5e:	46bd      	mov	sp, r7
 8007a60:	bd80      	pop	{r7, pc}

08007a62 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007a62:	b580      	push	{r7, lr}
 8007a64:	b086      	sub	sp, #24
 8007a66:	af00      	add	r7, sp, #0
 8007a68:	60f8      	str	r0, [r7, #12]
 8007a6a:	607a      	str	r2, [r7, #4]
 8007a6c:	603b      	str	r3, [r7, #0]
 8007a6e:	460b      	mov	r3, r1
 8007a70:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007a72:	2300      	movs	r3, #0
 8007a74:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007a76:	2300      	movs	r3, #0
 8007a78:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8007a80:	7af9      	ldrb	r1, [r7, #11]
 8007a82:	683b      	ldr	r3, [r7, #0]
 8007a84:	687a      	ldr	r2, [r7, #4]
 8007a86:	f7fa ffac 	bl	80029e2 <HAL_PCD_EP_Transmit>
 8007a8a:	4603      	mov	r3, r0
 8007a8c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007a8e:	7dfb      	ldrb	r3, [r7, #23]
 8007a90:	4618      	mov	r0, r3
 8007a92:	f000 f853 	bl	8007b3c <USBD_Get_USB_Status>
 8007a96:	4603      	mov	r3, r0
 8007a98:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007a9a:	7dbb      	ldrb	r3, [r7, #22]
}
 8007a9c:	4618      	mov	r0, r3
 8007a9e:	3718      	adds	r7, #24
 8007aa0:	46bd      	mov	sp, r7
 8007aa2:	bd80      	pop	{r7, pc}

08007aa4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007aa4:	b580      	push	{r7, lr}
 8007aa6:	b086      	sub	sp, #24
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	60f8      	str	r0, [r7, #12]
 8007aac:	607a      	str	r2, [r7, #4]
 8007aae:	603b      	str	r3, [r7, #0]
 8007ab0:	460b      	mov	r3, r1
 8007ab2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ab4:	2300      	movs	r3, #0
 8007ab6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007ab8:	2300      	movs	r3, #0
 8007aba:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8007ac2:	7af9      	ldrb	r1, [r7, #11]
 8007ac4:	683b      	ldr	r3, [r7, #0]
 8007ac6:	687a      	ldr	r2, [r7, #4]
 8007ac8:	f7fa ff38 	bl	800293c <HAL_PCD_EP_Receive>
 8007acc:	4603      	mov	r3, r0
 8007ace:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007ad0:	7dfb      	ldrb	r3, [r7, #23]
 8007ad2:	4618      	mov	r0, r3
 8007ad4:	f000 f832 	bl	8007b3c <USBD_Get_USB_Status>
 8007ad8:	4603      	mov	r3, r0
 8007ada:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007adc:	7dbb      	ldrb	r3, [r7, #22]
}
 8007ade:	4618      	mov	r0, r3
 8007ae0:	3718      	adds	r7, #24
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	bd80      	pop	{r7, pc}

08007ae6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007ae6:	b580      	push	{r7, lr}
 8007ae8:	b082      	sub	sp, #8
 8007aea:	af00      	add	r7, sp, #0
 8007aec:	6078      	str	r0, [r7, #4]
 8007aee:	460b      	mov	r3, r1
 8007af0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007af8:	78fa      	ldrb	r2, [r7, #3]
 8007afa:	4611      	mov	r1, r2
 8007afc:	4618      	mov	r0, r3
 8007afe:	f7fa ff58 	bl	80029b2 <HAL_PCD_EP_GetRxCount>
 8007b02:	4603      	mov	r3, r0
}
 8007b04:	4618      	mov	r0, r3
 8007b06:	3708      	adds	r7, #8
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	bd80      	pop	{r7, pc}

08007b0c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007b0c:	b480      	push	{r7}
 8007b0e:	b083      	sub	sp, #12
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007b14:	4b03      	ldr	r3, [pc, #12]	@ (8007b24 <USBD_static_malloc+0x18>)
}
 8007b16:	4618      	mov	r0, r3
 8007b18:	370c      	adds	r7, #12
 8007b1a:	46bd      	mov	sp, r7
 8007b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b20:	4770      	bx	lr
 8007b22:	bf00      	nop
 8007b24:	20001b90 	.word	0x20001b90

08007b28 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007b28:	b480      	push	{r7}
 8007b2a:	b083      	sub	sp, #12
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	6078      	str	r0, [r7, #4]

}
 8007b30:	bf00      	nop
 8007b32:	370c      	adds	r7, #12
 8007b34:	46bd      	mov	sp, r7
 8007b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3a:	4770      	bx	lr

08007b3c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007b3c:	b480      	push	{r7}
 8007b3e:	b085      	sub	sp, #20
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	4603      	mov	r3, r0
 8007b44:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b46:	2300      	movs	r3, #0
 8007b48:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007b4a:	79fb      	ldrb	r3, [r7, #7]
 8007b4c:	2b03      	cmp	r3, #3
 8007b4e:	d817      	bhi.n	8007b80 <USBD_Get_USB_Status+0x44>
 8007b50:	a201      	add	r2, pc, #4	@ (adr r2, 8007b58 <USBD_Get_USB_Status+0x1c>)
 8007b52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b56:	bf00      	nop
 8007b58:	08007b69 	.word	0x08007b69
 8007b5c:	08007b6f 	.word	0x08007b6f
 8007b60:	08007b75 	.word	0x08007b75
 8007b64:	08007b7b 	.word	0x08007b7b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007b68:	2300      	movs	r3, #0
 8007b6a:	73fb      	strb	r3, [r7, #15]
    break;
 8007b6c:	e00b      	b.n	8007b86 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007b6e:	2303      	movs	r3, #3
 8007b70:	73fb      	strb	r3, [r7, #15]
    break;
 8007b72:	e008      	b.n	8007b86 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007b74:	2301      	movs	r3, #1
 8007b76:	73fb      	strb	r3, [r7, #15]
    break;
 8007b78:	e005      	b.n	8007b86 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007b7a:	2303      	movs	r3, #3
 8007b7c:	73fb      	strb	r3, [r7, #15]
    break;
 8007b7e:	e002      	b.n	8007b86 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007b80:	2303      	movs	r3, #3
 8007b82:	73fb      	strb	r3, [r7, #15]
    break;
 8007b84:	bf00      	nop
  }
  return usb_status;
 8007b86:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b88:	4618      	mov	r0, r3
 8007b8a:	3714      	adds	r7, #20
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b92:	4770      	bx	lr

08007b94 <calloc>:
 8007b94:	4b02      	ldr	r3, [pc, #8]	@ (8007ba0 <calloc+0xc>)
 8007b96:	460a      	mov	r2, r1
 8007b98:	4601      	mov	r1, r0
 8007b9a:	6818      	ldr	r0, [r3, #0]
 8007b9c:	f000 b802 	b.w	8007ba4 <_calloc_r>
 8007ba0:	2000011c 	.word	0x2000011c

08007ba4 <_calloc_r>:
 8007ba4:	b570      	push	{r4, r5, r6, lr}
 8007ba6:	fba1 5402 	umull	r5, r4, r1, r2
 8007baa:	b93c      	cbnz	r4, 8007bbc <_calloc_r+0x18>
 8007bac:	4629      	mov	r1, r5
 8007bae:	f000 f82f 	bl	8007c10 <_malloc_r>
 8007bb2:	4606      	mov	r6, r0
 8007bb4:	b928      	cbnz	r0, 8007bc2 <_calloc_r+0x1e>
 8007bb6:	2600      	movs	r6, #0
 8007bb8:	4630      	mov	r0, r6
 8007bba:	bd70      	pop	{r4, r5, r6, pc}
 8007bbc:	220c      	movs	r2, #12
 8007bbe:	6002      	str	r2, [r0, #0]
 8007bc0:	e7f9      	b.n	8007bb6 <_calloc_r+0x12>
 8007bc2:	462a      	mov	r2, r5
 8007bc4:	4621      	mov	r1, r4
 8007bc6:	f000 f8af 	bl	8007d28 <memset>
 8007bca:	e7f5      	b.n	8007bb8 <_calloc_r+0x14>

08007bcc <sbrk_aligned>:
 8007bcc:	b570      	push	{r4, r5, r6, lr}
 8007bce:	4e0f      	ldr	r6, [pc, #60]	@ (8007c0c <sbrk_aligned+0x40>)
 8007bd0:	460c      	mov	r4, r1
 8007bd2:	6831      	ldr	r1, [r6, #0]
 8007bd4:	4605      	mov	r5, r0
 8007bd6:	b911      	cbnz	r1, 8007bde <sbrk_aligned+0x12>
 8007bd8:	f000 f8ae 	bl	8007d38 <_sbrk_r>
 8007bdc:	6030      	str	r0, [r6, #0]
 8007bde:	4621      	mov	r1, r4
 8007be0:	4628      	mov	r0, r5
 8007be2:	f000 f8a9 	bl	8007d38 <_sbrk_r>
 8007be6:	1c43      	adds	r3, r0, #1
 8007be8:	d103      	bne.n	8007bf2 <sbrk_aligned+0x26>
 8007bea:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8007bee:	4620      	mov	r0, r4
 8007bf0:	bd70      	pop	{r4, r5, r6, pc}
 8007bf2:	1cc4      	adds	r4, r0, #3
 8007bf4:	f024 0403 	bic.w	r4, r4, #3
 8007bf8:	42a0      	cmp	r0, r4
 8007bfa:	d0f8      	beq.n	8007bee <sbrk_aligned+0x22>
 8007bfc:	1a21      	subs	r1, r4, r0
 8007bfe:	4628      	mov	r0, r5
 8007c00:	f000 f89a 	bl	8007d38 <_sbrk_r>
 8007c04:	3001      	adds	r0, #1
 8007c06:	d1f2      	bne.n	8007bee <sbrk_aligned+0x22>
 8007c08:	e7ef      	b.n	8007bea <sbrk_aligned+0x1e>
 8007c0a:	bf00      	nop
 8007c0c:	20001db0 	.word	0x20001db0

08007c10 <_malloc_r>:
 8007c10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007c14:	1ccd      	adds	r5, r1, #3
 8007c16:	f025 0503 	bic.w	r5, r5, #3
 8007c1a:	3508      	adds	r5, #8
 8007c1c:	2d0c      	cmp	r5, #12
 8007c1e:	bf38      	it	cc
 8007c20:	250c      	movcc	r5, #12
 8007c22:	2d00      	cmp	r5, #0
 8007c24:	4606      	mov	r6, r0
 8007c26:	db01      	blt.n	8007c2c <_malloc_r+0x1c>
 8007c28:	42a9      	cmp	r1, r5
 8007c2a:	d904      	bls.n	8007c36 <_malloc_r+0x26>
 8007c2c:	230c      	movs	r3, #12
 8007c2e:	6033      	str	r3, [r6, #0]
 8007c30:	2000      	movs	r0, #0
 8007c32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007c36:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007d0c <_malloc_r+0xfc>
 8007c3a:	f000 f869 	bl	8007d10 <__malloc_lock>
 8007c3e:	f8d8 3000 	ldr.w	r3, [r8]
 8007c42:	461c      	mov	r4, r3
 8007c44:	bb44      	cbnz	r4, 8007c98 <_malloc_r+0x88>
 8007c46:	4629      	mov	r1, r5
 8007c48:	4630      	mov	r0, r6
 8007c4a:	f7ff ffbf 	bl	8007bcc <sbrk_aligned>
 8007c4e:	1c43      	adds	r3, r0, #1
 8007c50:	4604      	mov	r4, r0
 8007c52:	d158      	bne.n	8007d06 <_malloc_r+0xf6>
 8007c54:	f8d8 4000 	ldr.w	r4, [r8]
 8007c58:	4627      	mov	r7, r4
 8007c5a:	2f00      	cmp	r7, #0
 8007c5c:	d143      	bne.n	8007ce6 <_malloc_r+0xd6>
 8007c5e:	2c00      	cmp	r4, #0
 8007c60:	d04b      	beq.n	8007cfa <_malloc_r+0xea>
 8007c62:	6823      	ldr	r3, [r4, #0]
 8007c64:	4639      	mov	r1, r7
 8007c66:	4630      	mov	r0, r6
 8007c68:	eb04 0903 	add.w	r9, r4, r3
 8007c6c:	f000 f864 	bl	8007d38 <_sbrk_r>
 8007c70:	4581      	cmp	r9, r0
 8007c72:	d142      	bne.n	8007cfa <_malloc_r+0xea>
 8007c74:	6821      	ldr	r1, [r4, #0]
 8007c76:	1a6d      	subs	r5, r5, r1
 8007c78:	4629      	mov	r1, r5
 8007c7a:	4630      	mov	r0, r6
 8007c7c:	f7ff ffa6 	bl	8007bcc <sbrk_aligned>
 8007c80:	3001      	adds	r0, #1
 8007c82:	d03a      	beq.n	8007cfa <_malloc_r+0xea>
 8007c84:	6823      	ldr	r3, [r4, #0]
 8007c86:	442b      	add	r3, r5
 8007c88:	6023      	str	r3, [r4, #0]
 8007c8a:	f8d8 3000 	ldr.w	r3, [r8]
 8007c8e:	685a      	ldr	r2, [r3, #4]
 8007c90:	bb62      	cbnz	r2, 8007cec <_malloc_r+0xdc>
 8007c92:	f8c8 7000 	str.w	r7, [r8]
 8007c96:	e00f      	b.n	8007cb8 <_malloc_r+0xa8>
 8007c98:	6822      	ldr	r2, [r4, #0]
 8007c9a:	1b52      	subs	r2, r2, r5
 8007c9c:	d420      	bmi.n	8007ce0 <_malloc_r+0xd0>
 8007c9e:	2a0b      	cmp	r2, #11
 8007ca0:	d917      	bls.n	8007cd2 <_malloc_r+0xc2>
 8007ca2:	1961      	adds	r1, r4, r5
 8007ca4:	42a3      	cmp	r3, r4
 8007ca6:	6025      	str	r5, [r4, #0]
 8007ca8:	bf18      	it	ne
 8007caa:	6059      	strne	r1, [r3, #4]
 8007cac:	6863      	ldr	r3, [r4, #4]
 8007cae:	bf08      	it	eq
 8007cb0:	f8c8 1000 	streq.w	r1, [r8]
 8007cb4:	5162      	str	r2, [r4, r5]
 8007cb6:	604b      	str	r3, [r1, #4]
 8007cb8:	4630      	mov	r0, r6
 8007cba:	f000 f82f 	bl	8007d1c <__malloc_unlock>
 8007cbe:	f104 000b 	add.w	r0, r4, #11
 8007cc2:	1d23      	adds	r3, r4, #4
 8007cc4:	f020 0007 	bic.w	r0, r0, #7
 8007cc8:	1ac2      	subs	r2, r0, r3
 8007cca:	bf1c      	itt	ne
 8007ccc:	1a1b      	subne	r3, r3, r0
 8007cce:	50a3      	strne	r3, [r4, r2]
 8007cd0:	e7af      	b.n	8007c32 <_malloc_r+0x22>
 8007cd2:	6862      	ldr	r2, [r4, #4]
 8007cd4:	42a3      	cmp	r3, r4
 8007cd6:	bf0c      	ite	eq
 8007cd8:	f8c8 2000 	streq.w	r2, [r8]
 8007cdc:	605a      	strne	r2, [r3, #4]
 8007cde:	e7eb      	b.n	8007cb8 <_malloc_r+0xa8>
 8007ce0:	4623      	mov	r3, r4
 8007ce2:	6864      	ldr	r4, [r4, #4]
 8007ce4:	e7ae      	b.n	8007c44 <_malloc_r+0x34>
 8007ce6:	463c      	mov	r4, r7
 8007ce8:	687f      	ldr	r7, [r7, #4]
 8007cea:	e7b6      	b.n	8007c5a <_malloc_r+0x4a>
 8007cec:	461a      	mov	r2, r3
 8007cee:	685b      	ldr	r3, [r3, #4]
 8007cf0:	42a3      	cmp	r3, r4
 8007cf2:	d1fb      	bne.n	8007cec <_malloc_r+0xdc>
 8007cf4:	2300      	movs	r3, #0
 8007cf6:	6053      	str	r3, [r2, #4]
 8007cf8:	e7de      	b.n	8007cb8 <_malloc_r+0xa8>
 8007cfa:	230c      	movs	r3, #12
 8007cfc:	6033      	str	r3, [r6, #0]
 8007cfe:	4630      	mov	r0, r6
 8007d00:	f000 f80c 	bl	8007d1c <__malloc_unlock>
 8007d04:	e794      	b.n	8007c30 <_malloc_r+0x20>
 8007d06:	6005      	str	r5, [r0, #0]
 8007d08:	e7d6      	b.n	8007cb8 <_malloc_r+0xa8>
 8007d0a:	bf00      	nop
 8007d0c:	20001db4 	.word	0x20001db4

08007d10 <__malloc_lock>:
 8007d10:	4801      	ldr	r0, [pc, #4]	@ (8007d18 <__malloc_lock+0x8>)
 8007d12:	f000 b84b 	b.w	8007dac <__retarget_lock_acquire_recursive>
 8007d16:	bf00      	nop
 8007d18:	20001ef4 	.word	0x20001ef4

08007d1c <__malloc_unlock>:
 8007d1c:	4801      	ldr	r0, [pc, #4]	@ (8007d24 <__malloc_unlock+0x8>)
 8007d1e:	f000 b846 	b.w	8007dae <__retarget_lock_release_recursive>
 8007d22:	bf00      	nop
 8007d24:	20001ef4 	.word	0x20001ef4

08007d28 <memset>:
 8007d28:	4402      	add	r2, r0
 8007d2a:	4603      	mov	r3, r0
 8007d2c:	4293      	cmp	r3, r2
 8007d2e:	d100      	bne.n	8007d32 <memset+0xa>
 8007d30:	4770      	bx	lr
 8007d32:	f803 1b01 	strb.w	r1, [r3], #1
 8007d36:	e7f9      	b.n	8007d2c <memset+0x4>

08007d38 <_sbrk_r>:
 8007d38:	b538      	push	{r3, r4, r5, lr}
 8007d3a:	4d06      	ldr	r5, [pc, #24]	@ (8007d54 <_sbrk_r+0x1c>)
 8007d3c:	2300      	movs	r3, #0
 8007d3e:	4604      	mov	r4, r0
 8007d40:	4608      	mov	r0, r1
 8007d42:	602b      	str	r3, [r5, #0]
 8007d44:	f7f8 febc 	bl	8000ac0 <_sbrk>
 8007d48:	1c43      	adds	r3, r0, #1
 8007d4a:	d102      	bne.n	8007d52 <_sbrk_r+0x1a>
 8007d4c:	682b      	ldr	r3, [r5, #0]
 8007d4e:	b103      	cbz	r3, 8007d52 <_sbrk_r+0x1a>
 8007d50:	6023      	str	r3, [r4, #0]
 8007d52:	bd38      	pop	{r3, r4, r5, pc}
 8007d54:	20001ef0 	.word	0x20001ef0

08007d58 <__errno>:
 8007d58:	4b01      	ldr	r3, [pc, #4]	@ (8007d60 <__errno+0x8>)
 8007d5a:	6818      	ldr	r0, [r3, #0]
 8007d5c:	4770      	bx	lr
 8007d5e:	bf00      	nop
 8007d60:	2000011c 	.word	0x2000011c

08007d64 <__libc_init_array>:
 8007d64:	b570      	push	{r4, r5, r6, lr}
 8007d66:	4d0d      	ldr	r5, [pc, #52]	@ (8007d9c <__libc_init_array+0x38>)
 8007d68:	4c0d      	ldr	r4, [pc, #52]	@ (8007da0 <__libc_init_array+0x3c>)
 8007d6a:	1b64      	subs	r4, r4, r5
 8007d6c:	10a4      	asrs	r4, r4, #2
 8007d6e:	2600      	movs	r6, #0
 8007d70:	42a6      	cmp	r6, r4
 8007d72:	d109      	bne.n	8007d88 <__libc_init_array+0x24>
 8007d74:	4d0b      	ldr	r5, [pc, #44]	@ (8007da4 <__libc_init_array+0x40>)
 8007d76:	4c0c      	ldr	r4, [pc, #48]	@ (8007da8 <__libc_init_array+0x44>)
 8007d78:	f000 f81a 	bl	8007db0 <_init>
 8007d7c:	1b64      	subs	r4, r4, r5
 8007d7e:	10a4      	asrs	r4, r4, #2
 8007d80:	2600      	movs	r6, #0
 8007d82:	42a6      	cmp	r6, r4
 8007d84:	d105      	bne.n	8007d92 <__libc_init_array+0x2e>
 8007d86:	bd70      	pop	{r4, r5, r6, pc}
 8007d88:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d8c:	4798      	blx	r3
 8007d8e:	3601      	adds	r6, #1
 8007d90:	e7ee      	b.n	8007d70 <__libc_init_array+0xc>
 8007d92:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d96:	4798      	blx	r3
 8007d98:	3601      	adds	r6, #1
 8007d9a:	e7f2      	b.n	8007d82 <__libc_init_array+0x1e>
 8007d9c:	08007e18 	.word	0x08007e18
 8007da0:	08007e18 	.word	0x08007e18
 8007da4:	08007e18 	.word	0x08007e18
 8007da8:	08007e1c 	.word	0x08007e1c

08007dac <__retarget_lock_acquire_recursive>:
 8007dac:	4770      	bx	lr

08007dae <__retarget_lock_release_recursive>:
 8007dae:	4770      	bx	lr

08007db0 <_init>:
 8007db0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007db2:	bf00      	nop
 8007db4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007db6:	bc08      	pop	{r3}
 8007db8:	469e      	mov	lr, r3
 8007dba:	4770      	bx	lr

08007dbc <_fini>:
 8007dbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007dbe:	bf00      	nop
 8007dc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007dc2:	bc08      	pop	{r3}
 8007dc4:	469e      	mov	lr, r3
 8007dc6:	4770      	bx	lr
